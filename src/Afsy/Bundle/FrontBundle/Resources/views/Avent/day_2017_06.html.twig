{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 6 - HEADLESS IS MORE (sans-t√™te est plus)" %}

{% block article_content %}
    <h1>HEADLESS IS MORE (sans-t√™te c'est plus)</h1>
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/06/Jack-skellington-reciting-shakespeare-in-the-nightmare-before-christmas.jpg') }}"/>
    <h2>Introduction</h2>
    <p>Il existe bon nombre de CMS bas√©s ou connectables avec un projet Symfony mais il existe un genre relativement r√©cent de CMS dont l‚Äôapproche <strong>as a service</strong> promet rapidit√©, productivit√©, ergonomie, scalabilit√©, inter-op√©rabilit√© et la parall√©lisation des canaux de communication.</p>
    <p>La philosophie de base des CMS headless est de d√©centraliser la gestion du contenu afin d‚Äô√™tre capable de consommer celui-ci via les diff√©rents canaux qui peuvent en avoir besoin. On se rapproche ainsi du principe de s√©paration des responsabilit√©s, en s√©parant le contenu, qui rel√®ve de la responsabilit√© du marketing, de sa repr√©sentation, responsabilit√© des designers et d√©veloppeurs.</p>
    <p>Contentful est probablement le cms headless le plus cher du march√© mais c'est √©galement d'apr√®s moi le plus complet en cette fin d'ann√©e 2017. D'ailleurs, hasard du calendrier je vous le jure, ils viennent d'annoncer une nouvelle <a href="https://techcrunch.com/2017/12/04/contentful-a-stripe-for-content-management-raises-28m-led-by-general-catalyst/">lev√©e de fonds de 28M$</a>, voil√† de quoi distancer encore plus les concurrents.</p>
    <p>Pour cette raison, j'ai d√©cid√© de vous le pr√©senter aujourd'hui n√©anmoins, si vous voulez continuer le voyage apr√®s cet article, je vous conseille d'aller voir du c√¥t√© de <a href="https://github.com/directus">Directus</a>, de <a href="https://prismic.io/">Prismic</a>, <a href="https://getcockpit.com/">Cockpit</a>, <a href="https://graphcms.com/">GraphCMS</a> que j'ai d√©couvert derni√®rement et allez voir l'annuaire des CMS Headless : <a href="https://headlesscms.org">https://headlesscms.org</a>.</p>
    <p>Alors c'est parti, je vous emm√®ne avec moi, on va refondre le site de l‚ÄôAFSY afin de lui offrir un syst√®me puissant de gestion de contenu (ux, versionnement, relecture, publication, rss, √©dition simultan√©e/collaborative des √©diteurs...).</p>
    <p>A tout moment, vous pourrez aller voir le <a href="https://github.com/lenybernard/afsy.fr">d√©p√¥t</a> compagnon sur lequel j'ai fait mes commits en pr√©parant cet article ! De plus, vous pouvez voir ce que √ßa donne ici <a href="https://afsy.troopers.agency">https://afsy.troopers.agency</a> !</p>
    <p>Tout d‚Äôabord, d√©finissons bri√®vement les fonctionnalit√©s attendues:</p>
    <ul>
        <li>une page d‚Äôaccueil pour pr√©senter l‚Äôafsy, les objectifs, les √©v√©nements (pass√©s et √† venir)</li>
        <li>un blog de qualit√© filtrable par cat√©gorie avec une cat√©gorie sp√©ciale ‚Äúcalendrier de l‚Äôavent‚Äù (un article par jour et template sp√©cial)</li>
        <li>un formulaire pour proposer un √©v√©nement</li>
    </ul>
    <h2>Sommaire</h2>
    <ul>
        <li><a href="#1">1. Afficher une page d'accueil</a>

            <ul>
                <li><a href="#1.1">Cr√©ation d'un projet vide</a></li>
                <li><a href="#1.2">Cr√©ation de l'espace Contenful</a></li>
                <li><a href="#1.3">Retour √† Symfony</a></li>
                <li><a href="#1.3.configuration">configuration</a></li>
                <li><a href="#1.3.controller-view">Contr√¥leur + Vue</a></li>
                <li><a href="#1.3.layout">L'organisation du contenu dans les pages</a></li>
                <li><a href="#1.3.layout.goals">Les objectifs</a></li>
                <li><a href="#1.3.layout.events">Les √©v√©nements</a></li>
            </ul></li>
        <li><a href="#2">2. Le blog</a>

            <ul>
                <li><a href="#2.1">Un blog de base</a></li>
                <li><a href="#2.1.index">Index du blog</a></li>
                <li><a href="#2.1.show">Vue d'un article</a></li>
                <li><a href="#2.1.listByCateg-avent">Liste des articles par cat√©gorie + calendrier de l'avent</a></li>
            </ul></li>
        <li><a href="#3">3 Soumettre des √©v√©nements depuis le site</a>

            <ul>
                <li><a href="#3.1">Architecture:</a></li>
                <li><a href="#3.1.sdk-management">Installation du sdk contentful-management</a></li>
                <li><a href="#3.1.clientServiceDeclaration">D√©claration du service</a></li>
                <li><a href="#3.1.modelCreation">Cr√©ation du mod√®le</a></li>
                <li><a href="#3.1.form">Cr√©ation du formulaire</a></li>
                <li><a href="#3.1.controller-handler-dataTransformer">Cr√©ation de l'action de controller + Handler + DataTransformer</a></li>
            </ul></li>
        <li><a href="#conclusion">Conclusion</a>

            <ul>
                <li><a href="#conclusion-bundle">Le bundle ContentfulBundle</a></li>
                <li><a href="#conclusion-pricing">Le prix</a></li>
                <li><a href="#conclusion-tests">Et mes tests Behat üò∞</a></li>
            </ul></li>
    </ul>
    <h2><a name="1" href="#1">¬∂ </a>1. Afficher une page d'accueil</h2>
    <h3><a name="1.1" href="#1.1">¬∂ </a>1.1 Cr√©ation d'un projet vide</h3>
    <p>Pour se lancer, je vais partir d‚Äôun projet vide mais vous pouvez partir d‚Äôun projet existant tant qu‚Äôil est en 2.7+. En dessous, il sera difficile d‚Äôutiliser le <a href="https://github.com/contentful/ContentfulBundle">bundle</a> aidant √† la connexion avec le cms.</p>
    <pre><code class="language-shell">symfony new afsy 3.4</code></pre>
    <p>et on va enchainer directement sur l'installation du bundle officiel :</p>
    <pre><code class="language-shell">composer require contentful/contentful-bundle</code></pre>
    <p>avec la d√©claration du bundle dans le Kernel :</p>
    <pre><code class="language-php">class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = [
            //...
            new Contentful\ContentfulBundle\ContentfulBundle(),
        ];
    }
}</code></pre>
    <p>Assurez-vous qu'au moins un moteur de template est d√©fini dans la configuration <code class="language-none">framework.templating</code> pour permettre au bundle de fonctionner :</p>
    <pre><code class="language-yaml">#config.yml
framework:
    templating: { engines: ['twig'] }</code></pre>
    <h3><a name="1.2" href="#1.2">¬∂ </a>1.2 Cr√©ation de l'espace Contenful</h3>
    <p>D√©sormais, destination <a href="https://contentful.com">https://contentful.com</a> !
        On va cr√©er un compte si ce n'est pas d√©j√† fait et ensuite on va cr√©er un espace.
        Dans le jargon de Contentful, un <em>espace</em> se r√©sumera tr√®s souvent √† un projet mais il est tout √† fait possible d'imaginer d'autres organisations. La notre se nommera afsy et partira sur un projet vide :</p>
    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/06/86b69fecfb0e0f954245b1092291d861.png') }}" alt="nouvel espace"></p>
    <p>Le champ <code>language</code> est l√† pour d√©finir la langue par d√©faut des contenus qui vont √™tre cr√©√©s, il sera possible d'en ajouter par la suite mais comme c'est pour l'AFSY, on va choisir Francais üá´üá∑ .</p>
    <p>La deuxi√®me √©tape est alors de d√©finir le mod√®le de notre contenu, on y est d'ailleurs invit√© d√®s le d√©but :</p>
    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/06/8571107669d919420bb187de2539f8d2.png') }}" alt="Cr√©er un type de contenu"></p>
    <p>On va commencer tranquille avec le type <code>Page</code> qui permettra de faire une premi√®re int√©gration avec notre projet Symfony de mani√®re facile et rapide :</p>
    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/06/814cfe1c7cf8e117d2bd20035e0d3ac4.png') }}" alt="Content type Page"></p>
    <p>Je vous conseille de jouer un peu avec le syst√®me, pour ma part, j'ai trouv√© l'interface tr√®s bien faite et adapt√©e √† un profil technique comme le notre mais je vous laisse vous faire votre propre avis :)</p>
    <p>Ensuite, si vous n'√™tes pas allergiques √† <code>npm</code>, je vous conseille d'installer le paquet <code>contentful-import</code> qui va vous permettre d'importer facilement sch√©mas, contenus et assets, c'est id√©al pour potentiellement capitaliser entre des projets ou dans le cadre de tests, cela fait d'excellentes donn√©es de test (fixtures) :</p>
    <pre><code class="language-shell">npm install -g contentful-import
</code></pre>
    <p>‚Ñπ <strong>pour vous g√©n√©rer les fichiers json, j'ai utilis√© son coll√®gue contentful-export</strong></p>
    <p>Une fois que c'est fait, vous pouvez alors t√©l√©charger le fichier <a href="https://assets.contentful.com/ukmha2pdldgt/6qKgNK1ZhCKC4SAkIGUAsg/3546199c31f0be723ec3feb2e97dac2c/contentful-export-3kfuw0hayp3u-1511973698912.json" target="_blank">page.json</a> pour l'importer dans votre space (ou dans un nouvel espace, vous faites bien comme c'est le plus pratique pour vous cher ami) :</p>
    <pre><code class="language-shell">contentful-import --space-id YOUR_SPACE_ID --management-token YOUR-MGTOKEN --content-file page.json
</code></pre>
    <p>‚Ñπ <strong>Pour r√©cup√©rer votre space-id ainsi que votre delivery_token (qu'il vous faudra dans quelques minutes), √ßa se passe dans le menu API &gt; Content delivery / preview tokens &gt; Website key</strong></p>
    <p>‚Ñπ <strong>Pour r√©cup√©rer/g√©n√©rer votre management-token, √ßa se passe dans le menu API &gt; Content management tokens</strong></p>
    <p>Allez voir dans la partie <code>Content</code>, vous devriez avoir la page d'accueil, cela suffira pour commencer √† jouer avec cette partie de notre cms.</p>
    <h3><a name="1.3" href="#1.3">¬∂ </a>1.3. Retour √† Symfony</h3>
    <h4><a name="1.3.configuration" href="#1.3.configuration">¬∂ </a>configuration</h4>
    <p>Pour faire le lien avec votre espace contenful, il faut d√©finir 2 choses relatives √† configuration de Contentful: le <code>spaceId</code> et le <code>token</code>.</p>
    <pre><code class="language-yaml">#parameters.yml.dist
parameters:
    contentful_delivery_space: spaceID
    contentful_delivery_token: token

#config.yml
contentful:
    delivery:
        space: '%contentful_delivery_space%'
        token: '%contentful_delivery_token%'</code></pre>
    <h4><a name="1.3.controller-view" href="#1.3.controller-view">¬∂ </a>Contr√¥leur + Vue</h4>
    <p>Pour afficher cette belle page dans notre site, on va avoir besoin d'un contr√¥leur <code>PageController</code> avec une action <code>showAction</code> qui sera charg√©e d'aller chercher dans l'api de <a href="https://www.contentful.com/" target="_blank">Contentful</a> la page relative au slug pass√© en <code>request</code> (homepage par d√©faut) et d'afficher son contenu. Avant de faire la vue et l'action, on va installer un bundle nous permettant de convertir du markdown en html pour pouvoir ensuite l'interpr√©ter, le gros classique est le <strong>KnpMarkdownBundle</strong> donc :</p>
    <pre><code class="language-shell">composer require knplabs/knp-markdown-bundle</code></pre>
    <p>et puis l'immanquable ajout dans l'AppKernel (on tient bon, Flex sera bient√¥t partout ‚úä) :</p>
    <pre><code class="language-php">//src/AppKernel.php
$bundles = [
    //...
    new Knp\Bundle\MarkdownBundle\KnpMarkdownBundle(),
];</code></pre>
    <p>Allons-y pour le controller et l'action <code>showAction</code>:</p>
    <pre><code class="language-php">&lt;?php
//src/AppBundle/Controller/CMS/PageController.php
namespace AppBundle\Controller\CMS;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class PageController extends Controller
{
    /**
     * @Route("/", name="homepage")
     * @Route("/{slug}", name="app_cms_page_show")
     */
    public function showAction($slug = 'homepage')
    {
        $client = $this-&gt;get('contentful.delivery');
        $query = new \Contentful\Delivery\Query;
        $query->setContentType('page')
            ->where('fields.slug', $slug)
            ->setLimit(1);
        $entry = $client->getEntries($query)[0];

        if (!$entry) {
            throw new NotFoundHttpException;
        }

        return $this-&gt;render('cms/page/show.html.twig', [
            'page' => $entry,
        ]);
    }
}</code></pre>
    <p>et voici une vue qui va faire honneur √† notre contenu:</p>
    <pre><code class="language-twig">{% raw %}{# app/Resources/views/cms/page/show.html.twig #}
{% extends "::base.html.twig" %}
{% block body %}
    &lt;h1&gt;{{ page.getName() }}&lt;/h1&gt;
    {{ page.getText()|markdown|raw }}
{% endblock %}{% endraw %}</code></pre>
    <p>Si on va sur la page d'accueil... üéä  √ßa communique avec <a href="https://www.contentful.com/" target="_blank">Contentful</a> et les modifications se r√©percuteront bien s√ªr dans le site lorsqu'on d√©cidera de les publier (avec quelques petits secondes de d√©lais, cache oblige) !</p>
    <p>C'est un peu minimaliste comme page d'accueil mais on ne va pas en rester l√† ; je veux y afficher une liste d'√©v√©nements et j'ai envie d'avoir un design et un template sp√©cifique pour ma page d'accueil et ce n'est pas en markdown qu'on va le faire, rassurez-vous !</p>
    <p>Je vous laisse cr√©er une autre page, par exemple la page <code>a-propos</code> pour tester que la route <code>app_cms_page_show</code> fonctionne bien s√ªr les autres pages (que la page homepage).</p>
    <h4><a name="1.3.layout" href="#1.3.layout">¬∂ </a>L'organisation du contenu dans les pages</h4>
    <p>Pour rendre la page d'accueil attractive, on m'a demand√© d'avoir 3 parties :</p>
    <ol>
        <li><p>une cover permettant de mettre en avant le logo, la base ligne de l'asso et le bouton d'inscription au google group</p></li>
        <li><p>les 3 objectifs de l'asso:</p></li>
    </ol>
    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/06/48502e67b6e61a67cae590512dbffba8.png') }}" alt="objectifs">
        3. la liste des √©v√©nements pass√©s ou √† venir</p>
    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/06/d3294bba6721d4d536b179c30d31f1cf.png') }}" alt="√©v√©nements"></p>
    <p>2 r√©flexions :
        - en l'√©tat, ma page d'accueil a la m√™me structure que ma page <code>a-propos</code>, je vais avoir besoin de flexibilit√©, il faut r√©ussir √† le faire sans trop complexifier le m√©canisme
        - il peut √™tre tentant de mettre les objectifs <strong>en dur</strong> dans le twig car <strong>c'est pas grand chose √† changer</strong> et <strong>√ßa ne prend pas longtemps si besoin</strong>... ma philosophie est que si c'est du contenu, c'est le gestionnaire de contenu qui en est le responsable et sa place est donc dans le cms (et cr√©er un nouveau mod√®le est fun, prend 3 minutes et fait gagner du temps le jour o√π on veut les changer).</p>
    <h5><a name="1.3.layout.goals" href="#1.3.layout.goals">¬∂ </a>Les objectifs</h5>
    <p>Pour cr√©er le mod√®le Goal et ajouter le contenu (<em>3 objectifs + 3 images</em>), 2 possibilit√©s pour vous :</p>
    <ul>
        <li>la premi√®re, tr√®s rapide, utilise le <code>cli</code> et <a href="https://assets.contentful.com/ukmha2pdldgt/6rSw9RAiCQcGmE8QiGOuCu/9353beed4a451d5c2ba54005cb393a9e/goals.json" target="_blank">ce fichier</a> :</li>
    </ul>
    <pre><code class="language-shell">contentful-import --space-id SPACE_ID --management-token MGT_TOKEN --content-file goals.json</code></pre>
    <ul>
        <li>la deuxi√®me est un peu plus longue (10 min) puisqu'il faut cr√©er soi-m√™me le content-model et peupler avec des donn√©es de test:
            <img src="{{ asset('bundles/afsyfront/images/avent/2017/06/da0518741c8b03f5202e2b10771d91c6.png') }}" alt="model goals">
        </li>
    </ul>
    <p>Une fois que c'est fait, on va faire en sorte de les afficher dans la page d'accueil et pour commencer je vous propose cette petite astuce qui vous permettra de customiser les vues de certaines pages sp√©ciales comme la page d'accueil tout en gardant une vue par d√©faut pour les pages dites <em>classiques</em> :</p>
    <pre><code class="language-php">&lt;?php
use Symfony\Component\Templating\EngineInterface;

class PageController extends Controller
{
    /**
     * @Route("/", name="homepage")
     * @Route("/{slug}", name="page_show")
     */
    public function showAction(EngineInterface $twigEngine, $slug = 'homepage')
    {
        //...
        //seek for custom template
        $template = sprintf('cms/page/custom/%s.html.twig', $slug);
        if (!$twigEngine->exists($template) ) {
            $template = 'cms/page/show.html.twig';
        }
        // replace this example code with whatever you need
        return $this-&gt;render($template, [
            'page' => $entry,
        ]);
    }
}</code></pre>
    <p>‚Ñπ ce petit bout de code tr√®s simple va permettre d'aller d'abord voir s'il n'existe pas une template sp√©cial pour la page qu'on essaye de charger (<code>app/Resources/views/cms/page/custom/homepage.html.twig</code>) et va revenir sinon sur la vue par d√©faut (<code>app/Resources/views/cms/page/show.html.twig</code>)</p>
    <p>On va donc pouvoir commencer √† personnaliser la page d'accueil :</p>
    <pre><code class="language-twig">{% raw %}
{% extends "::base.html.twig" %}
{% block body %}
    &lt;section id="cover-section"&gt;
        {{ page.getText()|markdown|raw }} {# here will stand the name, baseline and call to action #}
    &lt;/section&gt;
    &lt;section id="goals-section"&gt;
        &lt;h3&gt;
            Nos objectifs
        &lt;/h3&gt;
        &lt;!-- Add goals section here --&gt;
    &lt;/section&gt;
    &lt;section id="events-section"&gt;
        &lt;h3&gt;
            Les √©v√©nements
        &lt;/h3&gt;
        &lt;!-- Add events section here --&gt;
    &lt;/section&gt;
{% endblock %}
{% endraw %}</code></pre>
    <p>On voit ici qu'on a maintenant 3 sections (dont 2 vides) :
    <ul>
        <li>
            la cover qui va simplement afficher le contenu pr√©sent dans le champ <em>text</em> de la page d'accueil (par exemple le h1, h2 et un bouton)
        </li>
        <li>les objectifs</li>
        <li>les √©v√©nements</li>
    </ul>
    <p>Pour les objectifs et les √©v√©nements, on peut utiliser la fonction <code>render()</code> (ou <code>render_esi</code>):</p>
    <pre><code class="language-twig">{% raw %}{{ render(path('app_cms_event_rendergoals')) }}{% endraw %}</code></pre>
    <p>‚Ñπ <a href="https://symfony.com/doc/master/reference/twig_reference.html#render">Plus d'informations sur la fonction <code>render</code> / <code>render_esi</code></a></p>
    <p>et voici les actions de contr√¥leurs associ√©s :</p>
    <pre><code class="language-php">&lt;?php
namespace AppBundle\Controller\CMS;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Response;

/**
* @Route("/goals")
*/
class GoalsController extends Controller
{
    /**
     * @Route("/")
     */
    public function renderListAction()
    {
        $client = $this-&gt;get('contentful.delivery');
        $query = new \Contentful\Delivery\Query;
        $query->setContentType('goal');

        $response = '';
        foreach ($client->getEntries($query) as $goal) {
            $response.= $this-&gt;renderView('cms/goals/_item.html.twig', [
                'goal' => $goal
            ]);
        }

        return new Response($response);
    }
}
</code></pre>
    <p>et la vue d'un objectif :</p>
    <pre><code class="language-twig">{% raw %}{# app/Resources/views/cms/goals/_item.html.twig #}
&lt;h3&gt;{{ goal.getName() }}&lt;/h3&gt;
{% if goal.getPicture() %}
    &lt;img src="{{ goal.getPicture().file.url ~ "?fm=jpg&w=350&h=350" }}"/&gt;
{% endif %}
{{ goal.getDescription()|markdown|raw }}{% endraw %}</code></pre>
    <h5><a name="1.3.layout.events" href="#1.3.layout.events">¬∂ </a>Les √©v√©nements</h5>
    <p>Pour les √©v√©nements, on peut s'y prendre exactement de la m√™me mani√®re avec la cr√©ation d'un mod√®le de donn√©es c√¥t√© <a href="https://www.contentful.com/" target="_blank">Contentful</a> et avec l'utilisation de la fonction render...</p>
    <p>Voici le fichier pour d√©finir le mod√®le Event comme je l'ai fait, il y a deux √©v√©n√©ments inclus : <a href="https://assets.contentful.com/ukmha2pdldgt/1dKVi4oVhsY8ysUCCWoSAU/e0c41adf45676181540acb6695dcb2ad/events.json" target="_blank">events.json</a>.</p>
    <p>Voici le controller <code>EventController</code> :</p>
    <pre><code class="language-php">&lt;?php

namespace AppBundle\Controller\CMS;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Response;

/**
* @Route("/event")
*/
class EventController extends Controller
{
    /**
     * @Route("/")
     */
    public function renderListAction($max = 10)
    {
        $client = $this-&gt;get('contentful.delivery');
        $query = new \Contentful\Delivery\Query;
        $query->setContentType('event')
            ->orderBy('fields.date', true)
            ->setLimit($max);

        $response = '';
        foreach ($client->getEntries($query) as $event) {
            $response.= $this-&gt;renderView('cms/event/_item.html.twig', [
                'event' => $event
            ]);
        }

        return new Response($response);
    }
}</code></pre>
    <p>et la vue associ√©e&nbsp;:</p>
    <pre><code class="language-twig">{% raw %}&lt;section&gt;
    &lt;div id="{{ event.getId() }}-map" style="width: 300px; height: 300px;"&gt;&lt;/div&gt;
    &lt;div&gt;
            {% if event.getDate() &lt; date('now') %}
        &lt;span style="right: 20px; top: 20px; position: absolute;"&gt;√âvenement pass√©&lt;/span&gt;
            {% endif %}
            &lt;div&gt;
        &lt;h4&gt;{{ event.getTitle() }}&lt;/h4&gt;
        &lt;small&gt;{{ event.getDate()|date('d/m/Y') }}&lt;/small&gt;
            {% for tag in event.getTags() %}
            &lt;strong&gt;{{ tag }}&lt;/strong&gt;
            {% endfor %}
            {{ event.getDescription() }}
            &lt;a href="{{ event.getLink() }}" class="mdl-button"&gt;Plus d'info&lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;
&lt;script&gt;
    function r(f){/in/.test(document.readyState)?setTimeout('r('+f+')',9):f()}
    r(function(){
        initMap{{ event.getId() }}();
    });
    function initMap{{ event.getId() }}() {
        var eventLocation{{ event.getId() }} = {lat: {{ event.getLocation().latitude }}, lng: {{ event.getLocation().longitude }} };
        var map{{ event.getId() }} = new google.maps.Map(document.getElementById('{{ event.getId() }}-map'), {
            zoom: 13,
            center: eventLocation{{ event.getId() }},
            disableDefaultUI: true
        });
        var marker{{ event.getId() }} = new google.maps.Marker({
            position: eventLocation{{ event.getId() }},
            map: map{{ event.getId() }}
        });
    }
&lt;/script&gt;{% endraw %}</code></pre>
    <p>Vous noterez qu'il y a des cartes gmap embarqu√©es donc il faut rajouter la lib dans le layout de base :</p>
    <pre><code class="language-twig">{% raw %}{# app/Resources/views/base.html.twig #}
{% block javascripts %}
    &lt;script async defer src="https://maps.googleapis.com/maps/api/js?key={{ googleMapAPIKEY }}{% block gmapExtraAttributes %}{% endblock %}"&gt;&lt;/script&gt;
{% endblock %}{% endraw %}</code></pre>
    <p>et bien-sur ajoutez en parameter la cl√© (<a href="https://developers.google.com/maps/documentation/javascript">que vous aurez g√©n√©r√©e ici</a>) et passez-l√† en global :</p>
    <pre><code class="language-yaml">#parameters.yml.dist
parameters:
    googleMapsApiKey: key

#config.yml
twig:
    #...
    globals:
        googleMapAPIKEY: '%googleMapsApiKey%'
</code></pre>
    <h2><a name="2" href="#2">¬∂ </a>2. Le blog</h2>
    <p>Cr√©er un blog simple dans un site Symfony n'est pas tr√®s compliqu√©, mais <a href="https://www.contentful.com/" target="_blank">Contentful</a> va nous nous permettre d‚Äô√©viter de r√©inventer la roue tout en solidifiant et professionnalisant notre blog.</p>
    <p>Lorsqu'on cr√©√© un nouvel espace dans Contentful, plut√¥t que de partir avec le squelette vide, on peut choisir le template Blog (ainsi que catalogue de produit et galerie photo) qui nous am√®nera un mod√®le √©prouv√©, des donn√©es de test ainsi que des exemples de consommations dans beaucoup de langages. D'ailleurs, si vous voulez voir d'autres impl√©mentations, vous pouvez aller voir les projets <em>bac √† sable</em> : <a href="https://github.com/contentful/product-catalogue-app-symfony">un catalogue de produit avec Symfony</a> ou <a href="https://github.com/contentful/blog-app-laravel">un blog avec Laravel</a>.</p>
    <p>üíæ&nbsp;&nbsp;Voici le fichier qu'il vous faudra importer comme pr√©c√©demment avec contentful-import pour r√©cup√©rer dans votre espace un blog pr√™t √† utiliser <a href="https://assets.contentful.com/ukmha2pdldgt/3QAfbGHbPaOoGW6OY8SUog/8686303ff0b7e88b87a8253aba045543/blog.json" target="_blank">blog.json</a></p>
    <h3><a name="2.1" href="#2.1">¬∂ </a>2.1 Un blog de base</h3>
    <p>Le blog apport√© par <a href="https://www.contentful.com/" target="_blank">Contentful</a> est minimaliste et c'est tant mieux, pas de fioriture et libre √† nous d'ajouter ce que l'on souhaite. De base, on a :</p>
    <ul>
        <li>des articles</li>
        <li>des cat√©gories</li>
        <li>des auteurs</li>
    </ul>
    <p>On va donc faire une vue Blog qui va lister tous les articles puis une vue pour afficher chaque article et ouvrir un syst√®me de commentaires sans effort. On ajoutera aussi une vue pour lister uniquement les articles d'une cat√©gorie.</p>
    <h4><a name="2.1.index" href="#2.1.index">¬∂ </a>Index du blog</h4>
    <p>Tout d'abord, on va commencer par cr√©er le <code>PostController</code> comme ceci :</p>
    <pre><code class="language-php">&lt;?php
namespace AppBundle\Controller\CMS;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;

class PostController extends Controller
{
    const CONTENT_TYPE_POST = '2wKn6yEnZewu2SCCkus4as';
    const CONTENT_TYPE_CATEGORY = '5KMiN6YPvi42icqAUQMCQe';
    const CONTENT_TYPE_AUTHOR = '1kUEViTN4EmGiEaaeC6ouY';
}</code></pre>
    <p><i>‚Ñπ</i> Notez la d√©finition des constantes <code>CONTENT_TYPE_*</code>. Le syst√®me g√©n√®re par d√©faut un identifiant unique lorsqu'on cr√©√© un Mod√®le (<code>content-type</code>), afin d‚Äô√©viter d'avoir un conflit lors d'un import avec un mod√®le ayant le m√™me identifiant. Si vous √™tes s√ªrs de ne pas g√©n√©rer de conflit, il est possible de d√©finir un identifiant non obscurci comme dans l'exemple pr√©c√©dent sur le mod√®le <code>Page</code> qui a <code>page</code> comme identifiant.</p>
    <p>On va rajouter ensuite la m√©thode permettant de lister les articles par ordre ant√©chronologique :</p>
    <pre><code class="language-php">
/**
 * @Route("/blog")
 */
public function indexAction()
{
    $client = $this-&gt;get('contentful.delivery');
    $query = new \Contentful\Delivery\Query;
    $query->setContentType(self::CONTENT_TYPE_POST)->orderBy('fields.date', true);

    return $this-&gt;render('cms/post/index.html.twig', [
        'entries' => $client->getEntries($query)
    ]);
}
</code></pre>
    <p>et la vue associ√©e&nbsp;:</p>
    <pre><code class="language-twig">{% raw %}{# cms/post/index.html.twig #}
{% extends "base.html.twig" %}

{% block title %}Blog - {{ parent() }}{% endblock %}
{% block body %}
    &lt;section id="section-blog"&gt&gt;
        &lt;h1&gt;{{ title|default('Blog') }}&lt;/h1&gt;
    &lt;/section&gt;

    &lt;main&gt;
        {% for post in entries %}
            &lt;section&gt;
                &lt;h2&gt;{{ post.title }}
                    &lt;small&gt;par
                    {% for post.getAuthor() %}
                        {{ post.author.name }}
                        {% if loop.index == post.getAuthor()|length - 1 %}
                            et
                        {% else if not loop.last %}
                            ,
                        {% endif %}
                    {% endfor %}
                    &lt;/small&gt; le {{ post.getDate()|date('d/m/Y') }}
                &lt;/h2&gt;
                &lt;img src="{{ post.getFeaturedImage().file.url ~ "?fm=jpg&w=215&h=215" }})"/&gt;
                {% for category in post.getCategory() %}
                    &lt;strong&gt;
                        {{ category.getTitle() }}
                    &lt;/strong&gt;
                {% endfor %}
                {{ post.getBody()|markdown|striptags|truncate(150)|raw }}
            &lt;/section&gt;
        {% endfor %}
    &lt;/main&gt;
{% endblock %}
{% endraw %}</code></pre>
    <p>Si on se rend sur /blog, on va d√©sormais avoir l'affichage certes rudimentaire mais non moins op√©rationnel des articles de notre blog. Pour l'instant, il manque l'action de visualisation d'un article, on veut lire le contenu complet, pas juste l'extrait.</p>
    <h4><a name="2.1.show" href="#2.1.show">¬∂ </a>Vue d'un article</h4>
    <p>Impl√©mentons tout √ßa :</p>
    <pre><code class="language-php">    //src/AppBundle/Controller/CMS/PostController.php

/**
 * @Route("/blog/{slug}")
 */
public function showAction($slug)
{
    $client = $this-&gt;get('contentful.delivery');
    $query = new \Contentful\Delivery\Query;
    $query->setContentType(self::CONTENT_TYPE_POST)
        ->where('fields.slug', $slug, 'match')
        ->setLimit(1);

    return $this-&gt;render('cms/post/show.html.twig', [
        'post' => $client->getEntries($query)[0]
    ]);
}</code></pre>
    <p>et la vue associ√©e&nbsp;:</p>
    <pre><code class="language-twig">{% raw %}{# app/Resources/views/cms/post/show.html.twig #}
{% extends "::base.html.twig" %}

{% block title %}{{ post.getTitle() }} - {{ parent() }}{% endblock %}
{% block body %}
    &lt;h1&gt;{{ post.getTitle() }}&lt;/h1&gt;
    &lt;ul&gt;
        {% for category in post.getCategory() %}
            &lt;li&gt;
                {{ category.getTitle() }}
            &lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
    {{ post.getBody()|markdown|raw }}
{% endblock %}
{% endraw %}</code></pre>
    <p>Ne pas oublier de rajouter un petit lien dans l'index du blog pour pouvoir naviguer sur notre article&nbsp;:</p>
    <pre><code class="language-twig">{% raw %}
{# app/Resources/views/cms/post/index.html.twig #}

...
{% block body %}
    ...
    {% for post in entries %}
        ...
        &lt;a href="{{ path('app_cms_post_show', {slug: post.getSlug()}) }}"&gt;
            Lire
        &lt;/a&gt;
    {% endfor %}
    ...
{% endblock %}
...{% endraw %}</code></pre>
    <h4><a name="2.1.listByCateg-avent" href="#2.1.listByCateg-avent">¬∂ </a>Liste des articles par cat√©gorie + calendrier de l'avent</h4>
    <p>Attaquons-nous aux cat√©gories d√©sormais. La liste des articles d'une cat√©gorie n'est finalement qu'une liste d'articles filtr√©e sur la cat√©gorie, on va donc avoir besoin d'ajouter un action et une route particuli√®re pour faire cette action mais on va pouvoir utiliser la m√™me vue que l'index g√©n√©ral&nbsp;:</p>
    <pre><code class="language-php">
//src/AppBundle/Controller/CMS/PostController
/**
 * @Route("/blog/category/{slug}")
 */
public function listByCategoryAction($slug, EngineInterface $twigEngine)
{
    $client = $this-&gt;get('contentful.delivery');
    //find first the category
    $query = new \Contentful\Delivery\Query;
    $query->setContentType(self::CONTENT_TYPE_CATEGORY)
        ->where('fields.slug', $slug)
        ->setLimit(1);
    $category = $client->getEntries($query)[0];

    //find posts by category
    $query = new \Contentful\Delivery\Query;
    $query->setContentType(self::CONTENT_TYPE_POST)
        ->where('fields.category.sys.id', $category->getId())
        ->orderBy('fields.date');

    //seek for category custom template
    $template = sprintf('cms/category/custom/%s.html.twig', $slug);
    if (!$twigEngine->exists($template) ) {
        $template = 'cms/post/index.html.twig';
    }

    return $this-&gt;render($template, [
        'title' => $category->getTitle(),
        'entries' => $client->getEntries($query)
    ]);
}
</code></pre>
    <p>En dehors du code du client <a href="https://www.contentful.com/" target="_blank">Contentful</a> qui nous est maintenant presque familier, on voit qu'on fait 2 requ√™tes. Une premi√®re pour aller chercher la cat√©gorie en fonction du slug, une deuxi√®me pour aller chercher les articles associ√©s √† cette cat√©gorie.</p>
    <p>Comme vous l'avez peut-√™tre remarqu√© j'ai utilis√© la m√™me m√©canique que sur la homepage pour avoir le droit de surcharger le template de la page d'une collection. √áa nous sera utile par exemple pour mettre en forme le calendrier de l'avent qui nous est demand√©, qui est une <em>cat√©gorie</em> du c√¥t√© du cms.</p>
    <p>On est libre de faire des choses √©volu√©es tr√®s rapidement. Par exemple, pour ce besoin tr√®s pr√©cis de calendrier de l'avent, je me suis amus√© √† faire une petite veille et j'ai trouv√© chez les amis de Codrops une exp√©rimentation <a href="https://tympanus.net/codrops/2016/11/09/cubes-advent-calendar/">Cubes Advent Calendar</a> qui correspondait tout √† fait √† mes attentes&nbsp;:</p>
    <p><img src="{{  asset('bundles/afsyfront/images/avent/2017/06/avent-calendar.gif') }}" alt="calendrier de l'avent par codrops"></p>
    <p>C'est un peu long et pas si fou que √ßa donc je pr√©f√®re d√©tailler d'autres points mais si ca vous int√©resse, retrouvez <a href="https://github.com/lenybernard/afsy.fr/commit/77ef83c1b16da80cd18dc4968c2f5f22b7674e26">l'impl√©mentation du calendrier de l'avent ici</a>.</p>
    <h2><a name="3" href="#3">¬∂ </a>3 Soumettre des √©v√©nements depuis le site</h2>
    <p>Jusqu'√† pr√©sent, on est rest√© dans une d√©marche de consommation du contenu situ√© dans le cms mais pour ce nouveau besoin, c'est un internaute qui doit cr√©er, en passant par le site, un nouvel √©v√©nement. Cet √©v√©nement devra avoir un statut particulier "<strong>En attente</strong>" et ne s'affichera sur le site que lorsqu'il aura √©t√© valid√©.</p>
    <p><img src="{{  asset('bundles/afsyfront/images/avent/2017/06/171d32c5c3834ca871096277c5601dd0.png') }}" alt="image preview"></p>
    <p>Pour ce faire, on va passer par la <strong>Content Management API</strong> (contrairement √† pr√©c√©demment o√π nous utilisions la <strong>Content Delivery API</strong>). D'ailleurs, vous l'avez d√©j√† utilis√© sans forc√©ment vous en rendre compte car c'est l'API qu'utilise le script <code>contentful-import</code> pour ajouter du contenu dans l'espace.</p>
    <p><strong>C'est l√† que √ßa se g√¢te (un tout petit peu)</strong></p>
    <p>Et oui, h√©las au jour o√π j'√©cris cet article, il semble qu'on ait quelques semaines d'avance car le bundle attend la version stable de la lib <code>contentful/contentful-management</code> pour y impl√©menter les fonctions visant √† faciliter la communication avec l'API de management.</p>
    <img src="{{  asset('bundles/afsyfront/images/avent/2017/06/ryan.gif') }}"/>
    <p>En fait, c'est pas si grave car la solution existe ! Donc avant de faire une <a href="https://github.com/contentful/ContentfulBundle/issues/20">PR</a> ou au lieu d'attendre une mise √† jour du bundle, on peut d√©j√† bricoler quelque chose de propre pour avoir acc√®s √† un petit service de <code>Management</code> qui nous permettra de cr√©er nos √©v√©nements en un claquement de doigts ou presque.</p>
    <h4><a name="3.1" href="#3.1">¬∂ </a>3.1 Architecture&nbsp;:</h4>
    <p><img src="{{  asset('bundles/afsyfront/images/avent/2017/06/Event_Handler.jpg') }}" alt="image archi"></p>
    <p>Tout commence avec composer, on va installer contentful-management (il n'y a pas de version stable encore)&nbsp;:</p>
    <h5><a name="3.1.sdk-management" href="#3.1.sdk-management">¬∂ </a>Installation du sdk contentful-management</h5>
    <pre><code class="language-shell">composer require contentful/contentful-management:@dev</code></pre>
    <p>Ensuite, en suivant la <a href="https://www.contentful.com/developers/docs/references/content-management-api/#/reference/entries/entries-collection/create-an-entry/console/php">documentation</a>, on comprend qu'il va falloir instancier le client <code>Contentful\Management\Client</code> en lui passant le <code>content_management_api_key</code> et le <code>space_id</code>&nbsp;:</p>
    <pre><code class="language-php">use Contentful\Management\Client;
use Contentful\Management\Resource\Entry;

$client = new Client('content_management_api_key', 'space_id');

$entry = new Entry('content_type_id');
$entry->setField('title', 'en-US', 'Entry title');

$client->entry->create($entry);</code></pre>
    <h5><a name="3.1.clientServiceDeclaration" href="#3.1.clientServiceDeclaration">¬∂ </a>D√©claration du service</h5>
    <p>On va cr√©er un service pour s'affranchir de cette instanciation:&nbsp;</p>
    <pre><code class="language-yaml">#parameters.yml
parameters:
    contentful_management_token: token

#app/config/services.yml
services:
    Contentful\Management\Client:
        arguments:
            $token: '%contentful_management_token%'
            $currentSpaceId: '%contentful_delivery_space%'
</code></pre>
    <p>Le client va nous permettre de cr√©er notre nouvel √©venement.</p>
    <p>Voici maintenant les quelques √©tapes pour d√©velopper cette fonctionnalit√©&nbsp;:
    <ul>
        <li>un mod√®le <strong>AppBundle\Domain\Model\Event</strong></li>
        <li>un formulaire <strong>EventType</strong> (+ 1 formulaire <strong>LocationType</strong> car c'est un peu sp√©cifique)</li>
        <li>un transformer <strong>AppBundle\Domain\Transformer\EventToEntryTransformer</strong> pour changer notre <strong>Event</strong> en <strong>Contentful\Management\Resource\Entry</strong></li>
        <li>un handler <strong>AppBundle\Domain\Handler\AddEventHandler</strong> pour centraliser la logique propre √† la soumission d'un √©v√©nement</li>
    </ul>
    <h4><a name="3.1.modelCreation" href="#3.1.modelCreation">¬∂ </a>Cr√©ation du mod√®le</h4>
    <p>On va cr√©er le mod√®le <strong>Event</strong> qui sera un miroir du <strong>content-type</strong> d√©fini dans <strong>Contentful</strong>&nbsp;:</p>
    <pre><code class="language-php">&lt;?php
namespace AppBundle\Domain\Model;

use Symfony\Component\Validator\Constraints as Assert;

class Event
{
    /**
     * @var string
     */
    private $title;
    /**
     * @var \DateTime
     */
    private $date;
    /**
     * @var float
     */
    private $latitude;
    /**
     * @var float
     */
    private $longitude;
    /**
     * @var string
     */
    private $description;
    /**
     * @var array
     */
    private $tags = [];
    /**
     * @var string
     * @Assert\Url()
     */
    private $link;

    /**
     * @return string
     */
    public function getTitle(): ?string
    {
        return $this-&gt;title;
    }

    /**
     * @param string $title
     * @return Event
     */
    public function setTitle(string $title): Event
    {
        $this-&gt;title = $title;
        return $this;
    }

    /**
     * @return \DateTime
     */
    public function getDate(): ?\DateTime
    {
        return $this-&gt;date;
    }

    /**
     * @param \DateTime $date
     * @return Event
     */
    public function setDate(\DateTime $date): Event
    {
        $this-&gt;date = $date;
        return $this;
    }

    /**
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this-&gt;description;
    }

    /**
     * @param string $description
     * @return Event
     */
    public function setDescription(string $description): Event
    {
        $this-&gt;description = $description;
        return $this;
    }

    /**
     * @return array
     */
    public function getTags(): ?array
    {
        return $this-&gt;tags;
    }

    /**
     * @param array $tags
     * @return Event
     */
    public function setTags(array $tags): Event
    {
        $this-&gt;tags = $tags;
        return $this;
    }

    /**
     * @return string
     */
    public function getLink(): ?string
    {
        return $this-&gt;link;
    }

    /**
     * @param string $link
     * @return Event
     */
    public function setLink(string $link): Event
    {
        $this-&gt;link = $link;
        return $this;
    }

    /**
     * @param string $latitude
     * @return Event
     */
    public function setLatitude(string $latitude): Event
    {
        $this-&gt;latitude = $latitude;
        return $this;
    }

    /**
     * @return float
     */
    public function getLatitude(): ?float
    {
        return $this-&gt;latitude;
    }

    /**
     * @param float $longitude
     * @return Event
     */
    public function setLongitude(float $longitude): Event
    {
        $this-&gt;longitude = $longitude;
        return $this;
    }

    /**
     * @return float
     */
    public function getLongitude(): ?float
    {
        return $this-&gt;longitude;
    }
}</code></pre>
    <h4><a name="3.1.form" href="#3.1.form">¬∂ </a>Cr√©ation du formulaire</h4>
    <p>Puis on va faire la formulaire <code>EventType</code>&nbsp;:</p>
    <pre><code class="language-php">&lt;?php
namespace AppBundle\Form;

use AppBundle\Domain\Model\Event;
use Contentful\Location;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\CallbackTransformer;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class EventType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('title')
            ->add('date', DateTimeType::class, [
                'html5' => true,
                'years' => range(date('Y'), date('Y') + 5)
            ])
            ->add('location', LocationType::class, [
                'inherit_data' => true,
            ])
            ->add('description', TextareaType::class)
            ->add('tags', TextType::class, [
                'attr' => [
                    'placeholder' => 'SFPot, Nantes, Pizza'
                ]
            ])
            ->add('link')
        ;

        $builder->get('tags')
            ->addModelTransformer(new CallbackTransformer(
                function ($tagsAsArray) {
                    return implode(', ', $tagsAsArray);
                },
                function ($tagsAsString) {
                    return explode(', ', $tagsAsString);
                }
            ));
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefault('data_class', Event::class);
    }
}</code></pre>
    <p>ainsi que le <code>LocationType</code>:</p>
    <pre><code class="language-php">&lt;?php
namespace AppBundle\Form;

use Contentful\Location;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class LocationType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('address', TextType::class, [
                'mapped' => false,
            ])
            ->add('latitude', HiddenType::class)
            ->add('longitude', HiddenType::class)
        ;
    }
}</code></pre>
    <h4><a name="3.1.controller-handler-dataTransformer" href="#3.1.controller-handler-dataTransformer">¬∂ </a>Cr√©ation de l'action de controller + Handler + DataTransformer</h4>
    <p>On va ensuite ajouter l'action d'ajout dans le controller <strong>EventController</strong>:</p>
    <pre><code class="language-php">
/**
 * @Route("/new")
 * @Method(methods={"GET", "POST"})
 * @param Request $request
 * @return Response
 */
public function newAction(Request $request)
{
    $event = new Event();
    $form = $this->createForm(EventType::class, $event);
    if ($request->isMethod(Request::METHOD_POST)) {
        $form->handleRequest($request);
        if ($form->isValid()) {
            //@todo Do something
        }
    }

    return $this->render('cms/event/new.html.twig', [
        'form' => $form->createView()
    ]);
}
</code></pre>
    <p>et la vue associ√©e&nbsp;:</p>
    <pre><code class="language-twig">{% raw %}{# app/Resources/views/cms/event/new.html.twig #}
{% extends "::base.html.twig" %}

{% block body %}
    &lt;h1&gt;Proposez un √©v√©nement&lt;/h1&gt;
    {{ form_start(form) }}
        {{ form_row(form.title) }}
        {{ form_row(form.date) }}
        {{ form_widget(form.location) }}
        &lt;div id="previewMap" style="width: 300px; height: 200px;"&gt;&lt;/div&gt;
        {{ form_rest(form) }}
        &lt;input type="submit"/&gt;
    {{ form_end(form) }}
{% endblock %}

{% block gmapExtraAttributes %}&libraries=places&callback=initMap{% endblock %}
{% block javascripts %}
    {{ parent() }}
    &lt;script&gt;
        function initMap() {
            var map = new google.maps.Map(document.getElementById('previewMap'), {
                center: {lat: 47.212205, lng: -1.550555},
                zoom: 13
            });
            var input = /** @type {!HTMLInputElement} */(
                document.getElementById('event_location_address'));
            var latInput = /** @type {!HTMLInputElement} */(
                document.getElementById('event_location_latitude'));
            var longInput = /** @type {!HTMLInputElement} */(
                document.getElementById('event_location_longitude'));

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function() {
                infowindow.close();
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }

                latInput.value = place.geometry.location.lat();
                longInput.value = place.geometry.location.lng();

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }

                var address = '';
                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('&lt;div&gt;&lt;strong&gt;' + place.name + '&lt;/strong&gt;&lt;br&gt;' + address);
                infowindow.open(map, marker);
            });
        }
    &lt;/script&gt;
{% endblock %}{% endraw %}</code></pre>
    <p>Pour traiter le formulaire et ne pas outrepasser la responsabilit√© du controller, on va cr√©er un service responsable de cr√©er un √©v√©nement √† partir d'un formulaire: <strong>AddEventHandler</strong>.</p>
    <p>Ce service utilisera un <strong>DataTransformer</strong> qu'il faudra aussi cr√©er pour transformer l'<strong>√âv√©nement</strong> en <strong>Entry</strong> et utilisera ensuite le service <strong>Contentful\Management\Client</strong> pour envoyer l'<strong>Entry</strong> √† Contentful:</p>
    <pre><code class="language-php">&lt;?php
namespace AppBundle\Domain\Transformer;

use AppBundle\Domain\Model\Event;
use Contentful\Management\Resource\Entry;
use Symfony\Component\Form\DataTransformerInterface;
use Symfony\Component\HttpFoundation\RequestStack;

class EventToEntryTransformer implements DataTransformerInterface
{
    /**
     * @var RequestStack
     */
    private $requestStack;

    /**
     * EventToEntryTransformer constructor.
     * @param RequestStack $requestStack
     */
    public function __construct(RequestStack $requestStack)
    {
        $this->requestStack = $requestStack;
    }

    /**
     * @param Event $event
     * @return Entry
     */
    public function transform($event)
    {
        $locale = $this->requestStack->getCurrentRequest()->getLocale();
        $entry = new Entry('event');
        $entry->setField('title', $locale, $event->getTitle());
        $entry->setField('date', $locale, $event->getDate()->format('c'));
        $entry->setField('location', $locale, [
            "lat" => $event->getLatitude(),
            "lon" => $event->getLongitude()
        ]);
        $entry->setField('description', $locale, $event->getDescription());
        $entry->setField('tags', $locale, $event->getTags());
        $entry->setField('link', $locale, $event->getLink());
        $entry->setField('slug', $locale, uniqid('event_', true));

        return $entry;
    }

    /**
     * @param Entry $entry
     * @return Event
     */
    public function reverseTransform($entry)
    {
        $locale = $this->requestStack->getCurrentRequest()->getLocale();
        $event = new Event();
        $event->setTitle($entry->getField('title'), $locale);
        $event->setDate($entry->getField('date'), $locale);
        $event->setLatitude($entry->getField('location')->getField('latitude'), $locale);
        $event->setLongitude($entry->getField('location')->getField('longitude'), $locale);
        $event->setDescription($entry->getField('description'), $locale);
        $event->setTags($entry->getField('tags'), $locale);
        $event->setLink($entry->getField('link'), $locale);

        return $event;
    }
}
</code></pre>
    <p>‚Ñπ <a href="https://www.contentful.com/developers/docs/concepts/data-model/">https://www.contentful.com/developers/docs/concepts/data-model/</a></p>
    <pre><code class="language-php">&lt;?php
namespace AppBundle\Domain\Handler;

use AppBundle\Domain\Model\Event;
use AppBundle\Domain\Transformer\EventToEntryTransformer;
use Contentful\Management\Client;

class AddEventHandler
{
    /**
     * @var Client
     */
    private $client;
    /**
     * @var EventToEntryTransformer
     */
    private $transformer;

    public function __construct(Client $client, EventToEntryTransformer $transformer)
    {
        $this->client = $client;
        $this->transformer = $transformer;
    }

    public function handle(Event $event) {
        $entry = $this->transformer->transform($event);
        $this->client->entry->create($entry);
    }
}</code></pre>
    <p>D√©sormais, si on se rend sur <code>/event/new</code>, on a acc√®s au formulaire de d√©p√¥t d'un √©v√©nement et lorsqu'on le soumet, un √©v√©nement est ajout√© dans <a href="https://www.contentful.com/" target="_blank">Contentful</a> en brouillon.</p>
    <p>Il ne reste plus qu'√† le valider. On peut imaginer que le <strong>AddEventHandler</strong> pourrait s'occuper de notifier la <em>room</em> Event dans le Slack de l'AFSY afin d'avoir une bonne r√©activit√© mais c'est hors sujet ;)</p>
    <h2><a name="conclusion" href="#conclusion">¬∂ </a>Conclusion</h2>
    <p>Nous ne sommes qu'au d√©but des CMS Headless mais on sent d√©j√† qu'il s'agit d'une solution plus adapt√©e au d√©veloppement applicatif moderne.</p>
    <h3><a name="conclusion-bundle" href="#conclusion-bundle">¬∂ </a>Le <a href="https://github.com/contentful/ContentfulBundle">bundle ContentfulBundle</a></h3>
    <p>Fonctionnel mais il semble √™tre encore un peu jeune. L'utilisation du client n'est pas des plus √©l√©gante et m√™me si le sdk fait un travail cons√©quent notamment avec l'objet <a href="https://github.com/contentful/contentful.php/blob/master/src/Delivery/DynamicEntry.php">DynamicEntry</a>, il faut l'abstraire dans des services m√©tiers, sp√©cialis√©s dans la r√©cup√©ration et la pr√©paration du contenu pour ne pas surcharger les <strong>Controllers</strong>.
        De plus, le bundle vient avec un <strong>Collector</strong> pour la <a href="https://symfony.com/doc/current/profiler/data_collector.html">WDT</a>:</p>
    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/06/61dce631d7b2237f0ffc722c1ec8affc.png') }}" alt="debug toolbar">
        <img src="{{ asset('bundles/afsyfront/images/avent/2017/06/71b1850cb522359d2e2542fc8aa45328.png') }}" alt="profiler"></p>
    <p>C'est plut√¥t sympa pour garder un oeil sur le nombre de requ√™tes effectu√©es pour chaque page.</p>
    <p>Et puis comme expliqu√© dans l'article, des √©volutions devraient arriver dans les semaines √† venir pour faciliter encore l'int√©gration des models avec Contentful.</p>
    <h3><a name="conclusion-pricing" href="#conclusion-pricing">¬∂ </a>Le prix</h3>
    <p>Cela ne vous aura pas √©chapp√©, en dehors de l'√©dition Developper, <a href="https://www.contentful.com/" target="_blank">Contentful</a> n'est pas donn√©, loin de l√† :</p>
    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/06/ea97a8c3c19a4c0ef2e1f67954543a7b.png') }}" alt="pricing"></p>
    <p>Cependant, m√™me l'offre Developper peut fonctionner pour des petits sites car le sdk PHP offre un syst√®me de cache permettant d'√©viter les appels trop fr√©quents en prod : <a href="https://www.contentful.com/developers/docs/php/tutorials/caching-in-the-php-cda-sdk/">https://www.contentful.com/developers/docs/php/tutorials/caching-in-the-php-cda-sdk/</a></p>
    <h3><a name="conclusion-tests" href="#conclusion-tests">¬∂ </a>Et mes tests Behat ? üò∞</h3>
    <p>La r√©ponse apport√©e par la core team du sdk php est d'utiliser, comme eux, la librairie <a href="http://php-vcr.github.io/">PHP-VCR</a> qui permet d'enregistrer les appels API et de les enregistrer sur des cassettes (oui oui s√©rieux) afin de les rejouer dans les tests futurs en simulant les appels √† l'API contentful.</p>
    <p>Plus d'info ici <a href="https://github.com/contentful/contentful.php/issues/170">Mock Client Call #170</a>.</p>
    <p>Allez sur ce, je vous souhaite de belles f√™tes de fin d'ann√©e pleines de contenu (content full hum...) et je souhaite une bonne f√™te √† tous les Nicolas :).</p>
{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/06/leny-bernard.jpg') }}" alt="Leny Bernard" />
{% endblock %}

{% block article_bio %}
    <h2>
        <a href="{% block author_url %}https://twitter.com/lenybernard{% endblock %}" target="_blank">
            {% block article_author %}Leny Bernard{% endblock %}
        </a>
    </h2>
    <p>
        Co-Fondateur et d√©veloppeur chez <a target="_blank" href="https://troopers.agency">Troopers</a>, membre du comit√© technique du <a href="https://web2day.co/" target="_blank">Web2Day</a>, co-cr√©ateur du <a href="https://github.com/victoire/victoire" target="_blank">CMS Open Source Victoire</a> et passionn√© de l'innovation et de de l'open source.
    </p>
{% endblock %}
