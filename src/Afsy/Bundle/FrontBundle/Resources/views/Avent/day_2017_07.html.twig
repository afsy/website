{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 7 - D√©coupler Form et votre mod√®le" %}

{% block article_content %}
    <style type="text/css">
        i {
            font-family: sans-serif;
        }
    </style>
    <h1 id="d√©coupler-form-et-votre-mod√®le">D√©coupler Form et votre mod√®le</h1>

    <p>Le composant Form est un de ceux qui ont largement contribu√© au succ√®s et √† la popularit√© de l‚Äô√©cosyst√®me Symfony. Il propose un syst√®me puissant et flexible qui permet d‚Äôunifier et de simplifier la g√©n√©ration et le traitement de formulaires. Il est aussi connu pour impl√©menter plusieurs <i>design patterns</i>, qui lui permettent d‚Äô√™tre √† la fois rapide √† utiliser, et suffisamment flexible pour s‚Äôadapter √† tous les besoins, sans se retrouver bloqu√© devant de la magie noire imp√©n√©trable (le cauchemar de tout d√©veloppeur).</p>

    <p>Je ne m‚Äô√©tendrai pas sur les fonctionnalit√©s de ce composant et de son int√©gration avec Symfony √©tant donn√© sa popularit√©. Cependant, dans cet article je vais parler de son lien avec notre mod√®le de donn√©es : nos entit√©s.</p>

    <p>Je vais prendre un exemple simple, que l‚Äôon suivra tout au long de l‚Äôarticle.</p>

    <p>Voici ma <i>user story :</i><br>
        <i>En tant que gestionnaire de mon application de vente de camion transporteurs,</i> <br>
        <i>quand je suis sur le backoffice de mon application,</i> <br>
        <i>je souhaite pouvoir ajouter un mod√®le tout en renseignant ses informations propres : mod√®le, marque, ann√©e de construction, kilom√®tres au compteur.</i></p>

    <p>ProTip pour r√©pondre √† ce besoin : <a href="https://afsy.fr/avent/2017/01-easyadminbundle-l-arriere-guichet-easy-peasy">lire l'excellent l‚Äôarticle de Baptiste sur EasyAdmin üòÑ</a><br>
        Fin. Merci d‚Äôavoir lu !</p>



    <h2 id="pourquoi-on-aime-form">Pourquoi on aime Form</h2>

    <p>Avant de rentrer dans le vif du sujet, je tiens quand m√™me √† rappeler pourquoi on aime Form, et particuli√®rement √† travers ses choix de conception :</p>

    <p>C‚Äôest un composant <strong>assez facile d‚Äôacc√®s</strong>. Il est ais√© de cr√©er son premier formulaire en quelques lignes en suivant la documentation.</p>

    <p>Voici notre entit√© pour r√©f√©rence :</p>



    <pre class="prettyprint"><code class="language-php hljs "><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeavyTruck</span>
{</span>
    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @Assert</span>\Length("min"=5)
     *<span class="hljs-phpdoc"> @var</span> string
     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$reference</span>;

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @Assert</span>\Valid
     *<span class="hljs-phpdoc"> @var</span> Brand
     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$brand</span>;

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @Assert</span>\Length("min"=4, "max"=4)
     *<span class="hljs-phpdoc"> @var</span> int
     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$buildYear</span>;

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @var</span> float
     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$kilometers</span>;

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @return</span> string
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReference</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span>
    {</span>
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;reference;
    }

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @param</span> string $reference
     *<span class="hljs-phpdoc"> @return</span> HeavyTruck
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setReference</span><span class="hljs-params">(string <span class="hljs-variable">$reference</span>)</span>: <span class="hljs-title">HeavyTruck</span>
    {</span>
        <span class="hljs-variable">$this</span>-&gt;reference = <span class="hljs-variable">$reference</span>;

        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>;
    }

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @return</span> Brand
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBrand</span><span class="hljs-params">()</span>: <span class="hljs-title">Brand</span>
    {</span>
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;brand;
    }

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @param</span> Brand $brand
     *<span class="hljs-phpdoc"> @return</span> HeavyTruck
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setBrand</span><span class="hljs-params">(Brand <span class="hljs-variable">$brand</span>)</span>: <span class="hljs-title">HeavyTruck</span>
    {</span>
        <span class="hljs-variable">$this</span>-&gt;brand = <span class="hljs-variable">$brand</span>;

        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>;
    }

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @return</span> int
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBuildYear</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span>
    {</span>
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;buildYear;
    }

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @param</span> int $buildYear
     *<span class="hljs-phpdoc"> @return</span> HeavyTruck
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setBuildYear</span><span class="hljs-params">(int <span class="hljs-variable">$buildYear</span>)</span>: <span class="hljs-title">HeavyTruck</span>
    {</span>
        <span class="hljs-variable">$this</span>-&gt;buildYear = <span class="hljs-variable">$buildYear</span>;

        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>;
    }

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @return</span> float
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getKilometers</span><span class="hljs-params">()</span>: <span class="hljs-title">float</span>
    {</span>
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;kilometers;
    }

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @param</span> float $kilometers
     *<span class="hljs-phpdoc"> @return</span> HeavyTruck
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setKilometers</span><span class="hljs-params">(<span class="hljs-variable">$kilometers</span>)</span>: <span class="hljs-title">HeavyTruck</span>
    {</span>
        <span class="hljs-variable">$this</span>-&gt;kilometers = <span class="hljs-variable">$kilometers</span>;

        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>;
    }
}</code></pre>

    <p>Et le formulaire associ√© :</p>



    <pre class="prettyprint"><code class="language-php hljs "><span class="hljs-preprocessor">&lt;?php</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeavyTruckType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractType</span>
{</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildForm</span><span class="hljs-params">(FormBuilderInterface <span class="hljs-variable">$builder</span>, array <span class="hljs-variable">$options</span>)</span>
    {</span>
        <span class="hljs-variable">$builder</span>
            -&gt;add(<span class="hljs-string">'reference'</span>)
            -&gt;add(<span class="hljs-string">'brand'</span>)
            -&gt;add(<span class="hljs-string">'buildYear'</span>)
            -&gt;add(<span class="hljs-string">'kilometers'</span>)
        ;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configureOptions</span><span class="hljs-params">(OptionsResolver <span class="hljs-variable">$resolver</span>)</span>
    {</span>
        <span class="hljs-variable">$resolver</span>-&gt;setDefaults([
            <span class="hljs-string">'data_class'</span> =&gt; HeavyTruck::<span class="hljs-class"><span class="hljs-keyword">class</span>,
        ]);
    }
}</span></code></pre>

    <p>Je ne parlerai pas ici des options propres √† chaque champ car cela ne nous int√©resse pas ici, et je veux garder des exemples simples pour me concentrer sur les donn√©es et non la configuration.</p>

    <p>On note que cette approche basique a l‚Äôavantage de regrouper la g√©n√©ration du formulaire et son remplissage, gr√¢ce √† l‚Äôimpl√©mentation native du composant <code>PropertyAccess</code>.</p>

    <p>Ce duo entit√© / formulaire est id√©al dans un contexte de <abbr title="Rapid Application Development" lang="en">RAD</abbr> car il permet de d‚Äôimpl√©menter rapidement des write actions sur son mod√®le, tout en ayant quelque chose de clair et extensible. Je passe la partie "contr√¥leur" que vous connaissez bien.</p>

    <p>Notre besoin ici est simple, cette ‚Äúmagie‚Äù nous suffit amplement.</p>

    <p>Mais que se passe-t-il si notre besoin √©volue, si on doit faire des traitements plus pouss√©s sur nos champs ? Si on veut utiliser plusieurs champs pour ne remplir qu‚Äôune propri√©t√© ? <br>
        On peut adapter la magie par l‚Äôimpl√©mentation de plusieurs points d‚Äôentr√©es permettant de mettre sa propre logique de traitement, c‚Äôest √† dire les
        <a href="https://symfony.com/doc/4.0/form/dynamic_form_modification.html"><code>FormEvents</code></a> et les <a href="https://symfony.com/doc/current/form/data_transformers.html"><code>DataTransformers</code></a>, ce qui est suffisant dans la plupart des cas.</p>

    <p>La force du composant Form r√©side aussi dans son impl√©mentation du <i>design pattern</i> <code>Composite</code>, qui apporte toute la flexibilit√© n√©cessaire pour cr√©er des formulaires complexes.</p>



    <h2 id="pourquoi-form-nest-pas-optimis√©-pour-votre-mod√®le">Pourquoi Form n‚Äôest pas optimis√© pour votre mod√®le</h2>

    <p>Revenons sur l‚Äôexemple que j‚Äôai fourni en d√©but d‚Äôarticle. C‚Äôest un exemple typique qu‚Äôon peut trouver dans la documentation de Symfony. Comme je l‚Äôai expliqu√©, cela fonctionne tr√®s bien et est tr√®s pratique dans de nombreux cas. <br>
        Pourquoi ? Parce que la classe de formulaire est <strong>fortement coupl√©e</strong> au mod√®le.</p>



    <pre class="prettyprint"><code class="language-php hljs "><span class="hljs-preprocessor">&lt;?php</span>

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configureOptions</span><span class="hljs-params">(OptionsResolver <span class="hljs-variable">$resolver</span>)</span>
{</span>
    <span class="hljs-variable">$resolver</span>-&gt;setDefaults([
        <span class="hljs-string">'data_class'</span> =&gt; HeavyTruck::<span class="hljs-class"><span class="hljs-keyword">class</span>,
    ]);
}</span></code></pre>

    <p>En sp√©cifiant <code>data_class</code> directement sur l‚Äôentit√©, voici ce qui va se passer √† la soumission du formulaire (je n‚Äôai retenu que ce qui nous int√©resse ici) : <br>
        1) les donn√©es du formulaire sont pass√©es dans chaque ‚Äúchamp‚Äù <br>
        2) Un objet <code>HeavyTruck</code> est hydrat√© avec ces donn√©es <br>
        3) L‚Äôobjet hydrat√© est valid√©</p>

    <p>Ce qui signifie qu‚Äôon cr√©e / modifie un objet m√©tier et qu‚Äôon valide ses donn√©es ensuite. C‚Äôest probl√©matique en terme de conception.</p>

    <p>Imaginons que dans mon application, pour une raison (que la raison ignore üòÑ) je souhaite faire un <code>flush()</code> sur chaque requ√™te (par exemple dans un <i>listener</i> branch√© sur un <i>kernel event</i>).</p>

    <p>Je passe dans mon formulaire, l‚Äôobjet est hydrat√© ; la validation s‚Äôop√®re, disons qu‚Äôelle renvoie des erreurs. L‚Äôobjet ne match pas les crit√®res de validations, il ne doit en aucun cas se retrouver persist√© auquel cas votre base de donn√©e se retrouvera corrompue.</p>

    <p>Et pourtant‚Ä¶ si vous utilisez un ORM et que l‚Äôobjet qui vient d‚Äô√™tre hydrat√© est d√©j√† <i>manag√©</i>, et bien Doctrine va computer les changements et ils se retrouveront dans votre base au moment au moment du <code>flush()</code> ! <br>
        En fait, m√™me sans avoir de listener qui flush, il suffit qu‚Äôun <code>flush()</code> se soit perdu quelque part avant la fin de la requ√™te (dans un <i>manager</i>, ou juste avant de faire le rendu de votre template, cas classique).</p>



    <pre class="prettyprint"><code class="language-php hljs "><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TruckController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractController</span>

// $<span class="hljs-title">truck</span> <span class="hljs-title">est</span> <span class="hljs-title">inject</span>√© <span class="hljs-title">par</span> <span class="hljs-title">un</span> <span class="hljs-title">ParamConverter</span>, <span class="hljs-title">il</span> <span class="hljs-title">est</span> <span class="hljs-title">manag</span>√© <span class="hljs-title">par</span> <span class="hljs-title">notre</span> <span class="hljs-title">ORM</span>
<span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">editAction</span>(<span class="hljs-title">Request</span> $<span class="hljs-title">request</span>, <span class="hljs-title">Truck</span> $<span class="hljs-title">truck</span>)
{</span>
    <span class="hljs-variable">$form</span> = <span class="hljs-variable">$this</span>-&gt;formFactory-&gt;createForm(TruckType::<span class="hljs-class"><span class="hljs-keyword">class</span>, $<span class="hljs-title">truck</span>);
    <span class="hljs-title">if</span> ($<span class="hljs-title">form</span>-&gt;<span class="hljs-title">isValid</span>()) {</span>
        <span class="hljs-variable">$this</span>-&gt;entityManager-&gt;flush();
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;templating-&gt;render(<span class="hljs-string">'list'</span>);
    }

    <span class="hljs-comment">// oh un flush perdu</span>
    <span class="hljs-variable">$this</span>-&gt;entityManager-&gt;flush();
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;templating-&gt;render(<span class="hljs-string">'edit'</span>);
}</code></pre>

    <p>Ceci est un simple exemple pour montrer que le cas peut exister. Il est de notre responsabilit√© en tant que d√©veloppeurs de concevoir nos applications afin de limiter au mieux les effets de bord, <a href="https://en.wikipedia.org/wiki/Defensive_programming">en appliquant un peu la loi de Murphy</a>.</p>

    <p>L‚Äôid√©e √† retenir ici est donc qu‚Äôil faut √©viter d‚Äôhydrater un objet m√©tier invalide (= non valid√©), et que si vous utilisez Form en mode RAD, alors vous ne pourrez pas l‚Äôemp√™cher.</p>

    <p>Cependant, comme abord√© plus haut, il reste toujours la possibilit√© d‚Äôutiliser des <code>FormEvents</code> pour appliquer de la logique avant que l‚Äôobjet soit hydrat√©.</p>

    <p>L‚Äôutilisation des <code>FormEvents</code> n‚Äôest pas tr√®s intuitive selon moi. <br>
        La donn√©e contenue dans les <i>events</i> n‚Äôest pas toujours fournie sous le m√™me format, parfois sous forme de tableau, parfois sous forme d‚Äôobjet hydrat√© ‚Äî ce qui fait sens au vu du workflow du composant mais qui peut √™tre un peu d√©routant √† l‚Äôutilisation. <br>
        De plus ces listeners sont fortement coupl√©s √† la classe de formulaire elle-m√™me, et il n‚Äôest pas tr√®s sain d‚Äôessayer de les rendre r√©utilisables. Les <code>DataTransformers</code> sont plus adapt√©s √† ce cas de figure mais permettent de transformer un champ √† la fois. <br>
        Il peut √™tre donc un peu fastidieux de passer par ces √©tapes pour des besoins complexes.</p>

    <p>Pour valider les donn√©es avant qu‚Äôelles ne soient effectivement utilis√©es, l‚Äôutilisation des <code>FormEvents</code> ne semble pas vraiment adapt√©e : il faudrait valider alors un array de donn√©es en reprenant les r√®gles de validation d√©finies dans l‚Äôentit√© et lever une <code>FormError</code> manuellement pour chaque‚Ä¶ √ßa reste faisable mais pas vraiment intuitif selon moi.</p>

    <p>
        En bref :
        <ul>
            <li>une des qualit√©s du composant Form est qu‚Äôil permet de facilement cr√©er et modifier des entit√©s √† l'aide d'un couplage ;</li>
            <li>ce couplage est compens√© par des points d‚Äôentr√©e qui permettent d‚Äôimpl√©menter votre propre logique ;</li>
            <li>cette fa√ßon de faire s‚Äôapparente un peu √† du ‚Äúbidouillage‚Äù, ce qui pose des limites dans un contexte d‚Äôapplication plus complexe.</li>
        </ul>
    </p>


    <p>Notre mission : rendre nos formulaires ind√©pendants de nos entit√©s.</p>
    <br><br>
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/07/challenge_accepted.gif') }}" alt="Challenge accepted!">



    <h2 id="quelques-pistes">Quelques pistes</h2>



    <h3 id="utiliser-un-objet-interm√©diaire">Utiliser un objet interm√©diaire</h3>

    <p>Pour l‚Äôinstant, nous avons directement li√© notre formulaire √† notre entit√©. <br>
        Pourquoi ne pas envisager de le lier √† un objet interm√©diaire ? <br>
        Quelques avantages que cela repr√©sente : <br>
        <ul>
            <li>On hydrate pas le m√©tier directement, mais un objet qui n‚Äôest pas fait pour √™tre persist√© ;</li>
            <li>On ne devient plus d√©pendant des propri√©t√©s / setters de l‚Äôentit√©, et on lib√®re une couche de traitement suppl√©mentaire pour jouer sur nos donn√©es ;</li>
            <li>On peut avoir un objet √† l‚Äôimage du formulaire et pas √† celui du m√©tier ;</li>
            <li>On peut appliquer la validation sur cet objet avant d‚Äôhydrater notre objet m√©tier.</li>
        </ul>

    <p>Assez de blabla, voici un exemple :</p>



    <pre class="prettyprint"><code class="language-php hljs "><span class="hljs-preprocessor">&lt;?php</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChangeTruckDetailsDTO</span>
{</span>
    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @Assert</span>\Length("min"=5)
     *<span class="hljs-phpdoc"> @var</span> string
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$reference</span>;

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @Assert</span>\Valid
     *<span class="hljs-phpdoc"> @var</span> Brand
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$brand</span>;

    <span class="hljs-comment">/**
     *<span class="hljs-phpdoc"> @Assert</span>\Length("min"=4, "max"=4)
     *<span class="hljs-phpdoc"> @var</span> string
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$buildYear</span>;
}</code></pre>

    <p><i>DTO = Data Transfer Object, ce n‚Äôest qu‚Äôun nommage appelez √ßa comme vous voulez</i></p>

    <p>On voit ici que le <abbr title="Data Transfer Object" lang="en">DTO</abbr> contient nos r√®gles de validation. On peut appliquer ce principe r√©cursivement √† nos ‚Äúsous-classes‚Äù de formulaire. <br>
        Form va donc valider que le DTO est valide, et on pourra setter nos propri√©t√©s de champ manuellement.</p>

    <p>Dans notre formulaire, aucune mention n‚Äôest faite d‚Äôaucune entit√©.</p>



    <pre class="prettyprint"><code class="language-php hljs "><span class="hljs-preprocessor">&lt;?php</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeavyTruckType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractType</span>
{</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildForm</span><span class="hljs-params">(FormBuilderInterface <span class="hljs-variable">$builder</span>, array <span class="hljs-variable">$options</span>)</span>
    {</span>
        <span class="hljs-variable">$builder</span>
            -&gt;add(<span class="hljs-string">'reference'</span>)
            -&gt;add(<span class="hljs-string">'brand'</span>)
            -&gt;add(<span class="hljs-string">'buildYear'</span>)
            -&gt;add(<span class="hljs-string">'kilometers'</span>)
        ;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configureOptions</span><span class="hljs-params">(OptionsResolver <span class="hljs-variable">$resolver</span>)</span>
    {</span>
        <span class="hljs-variable">$resolver</span>-&gt;setDefaults([
            <span class="hljs-string">'data_class'</span> =&gt; ChangeTruckDetailsDTO::<span class="hljs-class"><span class="hljs-keyword">class</span>,
        ]);
    }
}</span></code></pre>

    <p>Il est ok selon moi d‚Äôimpl√©menter une m√©thode qui permet d'hydrater le DTO avec les donn√©es de l‚Äôentit√©, ce qui est bien pratique dans un formulaire de modification, exemple :</p>



    <pre class="prettyprint"><code class="language-php hljs ">
<span class="hljs-preprocessor">&lt;?php</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChangeTruckDetailsDTO</span>
{</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createFromEntity</span><span class="hljs-params">(HeavyTruck <span class="hljs-variable">$entity</span>)</span>
    {</span>
        <span class="hljs-variable">$truck</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>;

        <span class="hljs-variable">$truck</span>-&gt;reference = <span class="hljs-variable">$entity</span>-&gt;getReference();
        <span class="hljs-variable">$truck</span>-&gt;brand = <span class="hljs-variable">$entity</span>-&gt;getBrand();
        <span class="hljs-variable">$truck</span>-&gt;buildYear = <span class="hljs-variable">$entity</span>-&gt;getBuildYear();

        <span class="hljs-keyword">return</span> <span class="hljs-variable">$truck</span>;
    }
}</code></pre>

    <p>Et on peut ainsi avoir notre formulaire d√©coupl√© de l‚Äôentit√© !</p>



    <pre class="prettyprint"><code class="language-php hljs "><span class="hljs-preprocessor">&lt;?php</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TruckController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractController</span>
{</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">editAction</span><span class="hljs-params">(Request <span class="hljs-variable">$request</span>, HeavyTruck <span class="hljs-variable">$truck</span>)</span>
    {</span>
        <span class="hljs-variable">$dto</span> = ChangeTruckDetailsDTO::createFromEntity(<span class="hljs-variable">$truck</span>);
        <span class="hljs-variable">$form</span> = <span class="hljs-variable">$this</span>-&gt;formFactory-&gt;createForm(ChangeTruckDetailsDTO::<span class="hljs-class"><span class="hljs-keyword">class</span>, $<span class="hljs-title">dto</span>);

        <span class="hljs-title">if</span> ($<span class="hljs-title">form</span>-&gt;<span class="hljs-title">isValid</span>()) {</span>
        <span class="hljs-comment">// on est libre ici, je n'ai pas fait de traitement sp√©cifique mais c'est possible.</span>
            <span class="hljs-variable">$truck</span>-&gt;setReference(<span class="hljs-variable">$dto</span>-&gt;reference);
            <span class="hljs-variable">$truck</span>-&gt;setBrand(<span class="hljs-variable">$dto</span>-&gt;brand);
            <span class="hljs-variable">$truck</span>-&gt;setBuildYear(<span class="hljs-variable">$dto</span>-&gt;buildYear);

            <span class="hljs-variable">$this</span>-&gt;entityManager-&gt;flush();

            <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;templating-&gt;render(<span class="hljs-string">'list'</span>);
        }

        <span class="hljs-comment">// oh un flush perdu, mais cette fois $truck n'est pas modifi√©</span>
        <span class="hljs-variable">$this</span>-&gt;entityManager-&gt;flush();

        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;templating-&gt;render(<span class="hljs-string">'edit'</span>);
    }
}</code></pre>



    <h3 id="probl√®mes-que-cela-pose">Probl√®mes que cela pose :</h3>

    <p>Tout cela est bien beau, mais on se retrouve avec une classe de plus √† g√©rer. <br>
        S'imposer de valider un DTO avant d‚Äôhydrater l‚Äôentit√© correspondante implique une dupliquation des r√®gles de validation, et donc de complexifier leur maintenance. <br>
        Je pense que c'est mauvaise id√©e de mettre ces r√®gles uniquement dans le DTO car il devient alors impossible de valider directement l‚Äôentit√©, on p√©nalise alors tous les autres cas o√π l‚Äôon cr√©e des objets sans passer par le formulaire. <br>
        C‚Äôest pour moi un vrai frein √† cette alternative.</p>

    <p>Le fait est qu‚Äôhonn√™tement, il n‚Äôest pas si courant d‚Äôavoir besoin d‚Äôun mod√®le pour le formulaire qui diff√®re de celui de l‚Äôentit√©. Du coup il semble un peu <i>overkill</i> de cr√©er un DTO puis de setter manuellement les propri√©t√©s alors que Form impl√©mente tout ce qu‚Äôil faut pour √ßa. Et dans le combat conception <i>versus</i> pragmatisme, c‚Äôest souvent le pragmatisme qui l'emporte.</p>

    <p>Martin Fowler est lui m√™me assez mitig√© sur l'utilisation des DTO dans ce genre de contexte : <a href="https://martinfowler.com/bliki/LocalDTO.html">https://martinfowler.com/bliki/LocalDTO.html</a> (en anglais). <br>
        Marco Pivetta (Ocramius), lui, recommande cet usage pour les formulaires.</p>

    <p>Personnellement, je ne recommande pas d‚Äôutiliser cette pratique sur des petites applications qui n‚Äôont pas de gros besoins √©volutifs. <br>
        Cependant je trouve cette approche int√©ressante si vous aimeriez avoir un formulaire qui diff√®re un peu de la fa√ßon dont votre objet m√©tier est fait, et/ou que vous portez beaucoup d‚Äôimportance √† votre conception applicatif et que cela ne vous pose pas de probl√®me d‚Äôy ajouter cette couche.</p>



    <h2 id="pour-r√©sumer">Pour r√©sumer</h2>

    <p>Form excelle pour cr√©er des formulaires complexes pour notre mod√®le, mais pour cela il doit √™tre y √™tre fortement coupl√©, ce qui n‚Äôest pas sans danger pour notre application. On peut ajouter une couche ‚Äútampon‚Äù avec un DTO mais cela alourdit le d√©veloppement des formulaires, qui est pourtant assez orient√© RAD.</p>

    <p>Alors oui, cet article se termine un peu sur un go√ªt amer‚Ä¶ mais cela correspond √† la r√©alit√© !</p>

    <p>Je pense qu‚Äôil serait int√©ressant que ce questionnement ait lieu dans le d√©veloppement du composant Form. Je ferai peut-√™tre une RFC si l‚Äôarticle fait des remous üòõ</p>

    <h2 id="ressources">Ressources - pour aller plus loin</h2>

    <p><a href="http://ocramius.github.io/doctrine-best-practices/#/47" lang="en">"Doctrine Best Practices" par Marco Pivetta</a></p>
    <p><a href="https://www.youtube.com/watch?v=Svndnw8n_SY">"Ne laissez pas les formulaires Symfony influencer votre mod√®le" par Jeremy Barthe</a></p>
    <p><a href="https://stovepipe.systems/post/avoiding-entities-in-forms" lang="en">"Avoiding Entities in Forms" par Iltar van der Berg (en anglais)</a></p>
{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/remi_andrieux.jpg') }}" alt="R√©mi Andrieux" />
{% endblock %}

{% block article_bio %}
    <h2>
        <a href="{% block author_url %}https://twitter.com/pimolo__{% endblock %}" target="_blank">
            {% block article_author %}R√©mi Andieux{% endblock %}
        </a>
    </h2>
    <p>
        D√©veloppeur chez MyLittleBox.
    </p>
{% endblock %}
