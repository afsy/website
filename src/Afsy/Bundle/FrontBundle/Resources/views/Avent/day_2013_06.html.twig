{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2013 %}

{% block article_title "Jour 06 - Best practices pour vos APIs REST HTTP avec Symfony2" %}

{% block article_content %}
<h1>Best practices pour vos APIs REST HTTP avec Symfony2</h1>

<p>
    C'est un exercice assez difficile de faire un nouvel article au sujet de la
    création d'APIs REST, tant ce sujet a déjà été largement traité, que ce soit
    <a href="http://symfpony-project.org">dans</a>
    <a href="https://speakerdeck.com/gordalina/rest-apis-made-easy-with-symfony2">l'écosystème</a>
    <a href="http://williamdurand.fr/2012/08/02/rest-apis-with-symfony2-the-right-way/">Symfony / PHP</a>
    ou <a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api">en dehors</a>.
</p>

<p>
    Néanmoins, il arrive encore trop souvent que, par méconnaissance ou par
    facilité, des développeurs créent des Web Services « pseudo-REST »,
    collectionnant un nombre plus ou moins important de mauvaises pratiques :
    couplage fort à des besoins métiers, manque de formalisation ou de
    consistance, absence de versionning ou mauvaise utilisation des méthodes
    HTTP etc.
</p>

<p>
    Cet article n'a pas pour objectif d'expliquer une nouvelle fois ce qu'est
    REST, mais plutôt de donner les clés des bonnes pratiques REST, et d'amener
    le développeur à se poser les bonnes questions lors de la création de ses
    premiers services : l'avenir lui dira « merci » !
</p>

<p>Avant de commencer, fixons quelques définitions :</p>

<ul>
    <li>
        une <abbr title="Application Programming Interface">API</abbr>
        (<abbr title="also known as">aka</abbr> « Application Programming
        Interface ») est une interface de manipulation à destination des
        machines;
    </li>
    <li>
        Lorsqu'on parle d'une « API REST HTTP », on parle d'une application Web
        proposant un ou plusieurs Web Services respectant le formalisme REST;
    </li>
    <li>
        <abbr title="Representational State Transfer">REST</abbr> est un style
        d'architecture proposant l'exposition de ressources (on parle aussi
        d'entités).
    </li>
</ul>

<p>
    Cet article traite le sujet des APIs REST HTTP selon trois axes principaux :
</p>

<ul>
    <li>accéder à l'API ;</li>
    <li>la formaliser ;</li>
    <li>l'exploiter.</li>
</ul>

<h2>Accéder à l'API</h2>

<h3>Verbes HTTP</h3>

<p>
    Concrètement, une API REST HTTP expose des représentations de ressources
    (des articles, des personnes, des <a href="http://fr.wikipedia.org/wiki/Poney" onclick="cornify_add();cornify_add();cornify_add();this.onclick='';return false;">poneys</a>,
    etc.), et permet de les manipuler (les lister, en créer, en modifier, en
    supprimer, etc.) par le biais de requêtes HTTP.
</p>

<p>
    L'adéquation entre REST et HTTP suggère assez naturellement l'emploi des
    <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9">méthodes HTTP</a>
    pour la réalisation d'opérations courantes :
</p>

<ul>
    <li>lister des entités : <code>GET</code></li>
    <li>créer une entité : <code>POST</code></li>
    <li>modifier une entité : <code>PUT</code> (ou <a href="http://tools.ietf.org/html/rfc5789"><code>PATCH</code></a>, suivant que la mise à jour est complète ou partielle)</li>
    <li>supprimer une entité : <code>DELETE</code></li>
</ul>

<p>
    Concrètement, si votre API permet d'appeler un Web Service
    <code>http://example.tld/creer_article</code> par le biais de la méthode
    <code>GET</code>, il y a de bonnes chances pour que vous soyez dans le faux
    :-)
</p>

<h3>Plan d'adressage</h3>

<p>
    Un second élément marquant d'une API REST HTTP est, évidemment, l'ensemble
    des URLs qui sont exposées (ce que l'on nomme souvent le « <em>plan
    d'adressage</em> » de l'API).
</p>

<p>
    Même si, en soit, REST ne force pas un style d'URIs particulier (rien ne
    vous empêche d'utiliser des noms d'URLs abscons pour exposer vos
    ressources), l'usage et la pratique montrent qu'un plan d'adressage clair,
    lisible et consistant favorisent l'adoption d'une API, sa facilité de
    compréhension et d'utilisation.
</p>

<p>
    Pour exposer des ressources, vous choisirez donc d'exposer des urls courtes,
    nommées suivant le type de ressource exposée :
</p>

<ul>
    <li><code>http://domain.tld/ponies</code></li>
    <li><code>http://domain.tld/ponies/118</code></li>
    <li>etc.</li>
</ul>

<p>
    Suivant le fameux principe « <a href="http://www.w3.org/Provider/Style/URI">Cools URIs don't change</a> »,
    choisissez évidemment des URLs agnostiques du point de vue de la technologie
    (ie., pas de « <code>.php</code> » dans l'url) ou de tout autre élément
    susceptible de changer dans le temps.
</p>

<p>
    Exposer des URLs <em>Restful</em> est une tâche assez aisée, pour peu que
    l'on s'attache à adopter une démarche rigoureuse et consistante. Afin de
    nous aider dans notre quête, le bundle
    <a href="https://github.com/FriendsOfSymfony/FOSRestBundle">FOSRestBundle</a>
    permet d'automatiser un grand nombre de tâches liées à la conception d'APIs
    REST. Un de ses atouts majeurs est qu'il permet de générer des routes
    automatiquement (et les urls associées) à partir de noms d'actions dans les
    contrôleurs.
</p>

<p>
    Pour cela, il suffit de déclarer au routeur de charger des routes de type
    <code>rest</code> depuis le contrôleur de notre API :
</p>

<pre class="language-yaml"><code># le routing.yml de notre bundle
ponies:
    type:     rest
    resource: Pony\ApiBundle\Controller\PoniesController
</code></pre>

<p>
    Et dans le contrôleur correspondant, il suffit juste d'ajouter des
    actions...
</p>

<pre class="language-php"><code>&lt;?php

namespace Pony\ApiBundle\Controller;

class PoniesController
{
    public function getPoniesAction()
    {
    }

    public function postPoniesAction()
    {
    }

    public function getPonyAction($slug)
    {
    }

    public function commentPonyAction($slug)
    {
    }
}
</code></pre>

<p>
    ..., et les routes correspondantes sont automatiquement créées, avec les
    restrictions :
</p>

<ul>
    <li>
        <strong>get_ponies</strong> : <code>GET</code>
        <code>/ponies</code>
    </li>
    <li>
        <strong>post_ponies</strong> : <code>POST</code>
        <code>/ponies</code>
    </li>
    <li>
        <strong>get_pony</strong> : <code>GET</code>
        <code>/ponies/{slug}</code>
    </li>
    <li>
        <strong>comment_pony</strong> : <code>PATCH</code>
        <code>/ponies/{slug}/comment</code>
    </li>
</ul>

<p>
    Il ne reste « plus qu'à » remplir les contrôleurs avec la logique que doit
    suivre l'API \o/
</p>

<h2>Formaliser l'API</h2>

<p>
    Une API REST HTTP permet, comme son nom l'indique, d'accéder à des
    ressources en employant le style d'architecture et en dialoguant par le
    biais du protocole HTTP : le <em>client</em> REST émet donc des requêtes
    HTTP vers le <em>serveur d'API</em>, qui lui répond par le biais de réponses
    HTTP.
</p>

<p>
    Rien de neuf ici, encore une fois, faisons juste un rappel. Une
    <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html">réponse HTTP</a>
    est composée de trois éléments :
</p>

<ul>
    <li>
        un code de statut, qui indique de manière numérique le résultat de la
        tentative de traitement de la requête ;
    </li>
    <li>
        un ensemble d'en-têtes (des « <em>headers</em> »), qui fournissent au
        client des informations supplémentaires ;
    </li>
    <li>le corps de la réponse.</li>
</ul>

<p>
    Définir une API REST HTTP passe donc par la définition du contenu de ces
    trois éléments.
</p>

<h3>Codes de statut</h3>

<p>
    Encore une fois, l'usage de
    <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">codes de statuts HTTP</a>
    adaptés est une bonne pratique pour des APIs RESTful. Si votre API répond
    systématiquement avec un statut HTTP <code>200</code>, qu'il y ait une
    erreur ou pas, il y a un sérieux problème parce que vous sous-utilisez les
    capacités d'HTTP.
</p>

<p>
    En réalité, de nombreux codes HTTP peuvent être employés par des APIs HTTP :
</p>

<ul>
    <li>
        <code>200</code> si la requête a pu être traitée avec succès ;
    </li>
    <li>
        des variantes sont <code>201</code> ou <code>204</code>, suivant
        l'opération qui a été demandée au serveur ;
    </li>
    <li>
        <code>304</code> si le document demandé n'a pas été modifié depuis la
        dernière fois que le client l'a demandé ;
    </li>
    <li>
        <code>400</code>, <code>401</code>, <code>402</code>, <code>403</code>,
        <code>404</code>, <code>406</code>, <code>409</code>, <code>429</code>
        sont des codes d'erreur adaptés à différentes situations d'erreur
        d'utilisation de l'API ;
    </li>
    <li>
        <code>500</code> ou <code>503</code>, suivant que votre application
        subit un problème technique, est indisponible temporairement
        (maintenance).
    </li>
</ul>

<p>
    L'ensemble de ces codes de statut est documenté clairement dans les RFCs.
    Vous pouvez aussi consulter <a href="http://www.restapitutorial.com/httpstatuscodes.html">cette page</a>,
    qui liste l'ensemble des codes de statut que vous êtes susceptibles
    d'employer dans vos APIs.
</p>

<p>
    Symfony est un framework extrêmement flexible de ce point de vue ; on peut
    aisément définir les codes de statut à associer à une réponse HTTP :
</p>

<pre class="language-php"><code>$response-&gt;setStatusCode(Response::HTTP_OK);
</code></pre>

<p>
    Vous pouvez voir l'ensemble des codes de status de la RFC de HTTP dans la
    classe <code>Symfony\Component\HttpFoundation\Response</code>.
</p>

<h3>Contenu et fonctionnalités</h3>

<p>
    Les trois chapitres précédents sont fondamentaux pour la formalisation de
    votre API REST mais, finalement, ils correspondent peu ou prou à ce que vous
    avez déjà pu lire ailleurs au sujet de REST, et ils s'appliquent à toute API
    REST <em>bien faite</em>.
</p>

<p>
    La structure du corps de la réponse, et les fonctionnalités exposées par
    votre API, elles, sont propres à chaque situation. C'est au moment de la
    conception de votre API que vous devrez faire les choix suivants.
</p>

<h4>Nommage</h4>

<p>
    C'est une bonne pratique pour votre code, et c'est également une bonne
    pratique pour les APIs : exposez des urls, des noms de champs ou des
    paramètres en anglais. Cela facilitera l'adoption large de votre API, en ne
    faisant pas de la langue une barrière forte. Mettons les débats de côté - la
    <a href="http://www.francophonie.org/">langue française</a> est
    malheureusement dépassée dans le domaine du développement informatique,
    c'est juste un fait : prenez-en acte.
</p>

<p>
    Le contenu du corps de la réponse sera formaté différemment suivant le
    format de sérialisation adopté (cf. <em>infra</em>). Choisissez néanmoins
    des noms courts, expressifs, non ambigus.
</p>

<h4>Filtres</h4>

<p>
    Dans le cadre de notre API exposant des poneys, il peut être pratique de ne
    vouloir que certains poneys, ceux qui correspondent à certaines contraintes.
    Par exemple, on pourrait choisir de ne sélectionner que les poneys dont le
    type est « <a href="http://fr.wikipedia.org/wiki/Shetland_(cheval)">Shetland</a> »,
    ou ceux mesurant 1 mètre 40.
</p>

<p>
    Afin de permettre ces fonctionnalités de filtrage, il est nécessaire
    d'exposer clairement les filtres disponibles par le biais de l'API :
</p>

<ul>
    <li><code>/ponies?type=shetland</code></li>
    <li><code>/ponies?type=shetland,connemara</code></li>
    <li><code>/ponies?height=140</code></li>
    <li><code>/ponies?type=shetland,connemara&amp;height=140</code></li>
    <li>etc.</li>
</ul>

<p>
    Symfony propose un moyen élégant et simple de répondre à cette question, en
    s'appuyant sur l'annotation <code>@QueryParam</code> fournie par le
    <code>FOSRestBundle</code> :
</p>

<pre class="language-php"><code>/**
 * @QueryParam(name="height", requirements="\d+", description="Height of the pony in cm.")
 * @QueryParam(name="type", description="Type of the pony.")
 */
public function getPoniesAction(ParamFetcher $paramFetcher)
{
    // do something !
}
</code></pre>

<p>
    Les filtres les plus fréquemment employés peuvent être exposés sous la forme
    d'alias. Par exemple, <code>/articles/published</code> est un alias plus
    « <em>user-friendly</em> » que
    <code>/articles?publication_status=published</code>.
</p>

<p>
    Vous pouvez aisément créer des alias dans Symfony en utilisant le mécanisme
    de routage pour déclarer une route manuellement
</p>

<h4>Tri</h4>

<p>
    Dans la même veine, il peut être important de permettre d'ordonner les
    réponses dans un certain ordre. Votre API doit donc permettre d'ordonner les
    résultats, par le biais de paramètres passés au service.
</p>

<p>
    Généralement le tri se fait par le biais d'un paramètre
    « <code>sort</code> », parfois accompagné d'un second paramètre
    « sort_order », ou précédé du symbole « <code>-</code> » pour indiquer que
    le tri doit se faire en ordre inversé :
</p>

<ul>
    <li>
        <code>/ponies?sort=type</code> : par ordre de <code>type</code>
        alphabétique,
    </li>
    <li>
        <code>/ponies?sort=-height</code> : par ordre de <code>taille</code>
        inversé.
    </li>
</ul>

<h4>Pagination</h4>

<p>
    La mise en place d'une pagination est souvent ignorée et, lorsqu'elle est
    traitée, est la plupart du temps assez délicate. Pour reprendre l'exemple de
    l'API de poneys, une requête sur <code>/ponies</code> risque de retourner
    une grande liste de poneys, et donc de produire un corps de réponse trop
    volumineux.
</p>

<p>
    Les APIs ayant des contraintes de performance au même titre que les autres
    applications Web, l'approche la plus traditionnelle consiste à mettre en
    place une pagination, qui permet de limiter le corps de la réponse à un
    certain nombre d'éléments.
</p>

<p>
    Mettre en place une pagination de manière propre ne se fait pas uniquement
    en ajoutant un paramètre <code>page</code> dans l'url. Il faut auparavant
    répondre aux questions suivantes :
</p>

<ul>
    <li>
        est-ce que la taille des pages est paramétrable par l'utilisateur ? Dans
        ce cas il sera nécessaire d'ajouter le support d'un paramètre optionnel
        de type <code>page_size</code>.
    </li>
    <li>
        si oui, y a-t-il une taille de page maximale ? <em>Hint</em> : c'est une
        bonne idée, pour éviter les dérives du type
        <code>?page_size=1000000000</code>
    </li>
    <li>
        à partir d'une page donnée, comment navigue-t-on vers les pages
        précédentes et suivantes ?
    </li>
</ul>

<p>
    Pour cette dernière question, il va être nécessaire de parler un peu de
    navigabilité, c'est-à-dire de la capacité de notre API à être explorée -
    naviguée - par des applications, des programmes.
</p>

<p>
    La manière élégante et respectueuse d'HTTP pour fournir, à partir d'une page
    donnée, les liens vers les pages précédentes et suivantes, consiste à
    ajouter un en-tête de réponse <code>Link</code>. Par exemple, l'en-tête
    <code>Link</code> associée à la page 2 devrait ressembler à :
</p>

<pre class="language-http"><code>Link: &lt;https://api.domain.com/ponies?page=1&amp;per_page=100&gt;; rel="first",
      &lt;https://api.domain.com/ponies?page=1&amp;per_page=100&gt;; rel="prev",
      &lt;https://api.domain.com/ponies?page=3&amp;per_page=100&gt;; rel="next",
      &lt;https://api.domain.com/ponies?page=118&amp;per_page=100&gt;; rel="last"
</code></pre>

<p>
    Il suffit donc seulement d'ajouter des en-têtes à la <code>Response</code>
    pour traiter correctement cette problématique :
</p>

<pre class="language-php"><code>$response-&gt;headers-&gt;set('Link', $links);
</code></pre>

<h3>Sérialisation</h3>

<h4>Formats de sérialisation</h4>

<p>
    Le contenu du corps de la réponse peut être exprimé suivant différents
    formats. Si, pendant longtemps, Web Service a rimé avec
    « <abbr title="Extensible Markup Language">XML</abbr> »
    pour les développeurs, ce n'est heureusement plus le cas : XML n'est pas le
    seul format pour servir de manière pertinente des informations
    structurées.
</p>

<p>
    Dans l'idéal, une API REST HTTP permet d'exposer les données dans trois
    formats :
</p>

<ul>
    <li>
        <a href="http://www.w3.org/XML/">XML</a>, qui a l'avantage d'être une
        syntaxe très formelle, structurante, et extensible, mais est en revanche
        plutôt verbeux (volumineux), et parfois pénible à lire pour le
        développeur ;
    </li>
    <li>
        <a href="http://www.json.org/"><abbr title="JavaScript Object Notation">json</abbr></a>
        qui, outre l'avantage de la concision, est un format aisément
        exploitable en javascript. Attention, certaines distributions ont, pour
        des problèmes de licence, récemment
        <a href="https://bugs.php.net/bug.php?id=63520">retiré l'extension json</a>,
        qui doit désormais être installée séparément (sur Debian, par exemple,
        un <code>$ apt-get install php5-json</code> résoudra le problème) ;
    </li>
    <li>
        <a href="http://msgpack.org/">MessagePack</a>, un format de
        sérialization binaire qui peut permettre de gagner encore quelques bits
        supplémentaires. MessagePack peut être disponible très aisément en PHP,
        en installant le package PECL associé :
    </li>
</ul>

<pre><code>$ pecl install msgpack</code></pre>

<p>Le choix du format de la réponse ne doit pas se faire sur une extension dans l'URL, mais par le biais de l'en-tête de requête <code>Accept</code>, qui permet au client d'indiquer quels sont les types de contenus acceptables en guise de réponse.</p>

<p>
    Si le client indique qu'il souhaite une réponse au format
    <code>application/json</code>, le serveur pourra librement décider d'envoyer
    une réponse en <code>application/json</code>, ou répondre par un code de
    statut HTTP <code>406</code> (<em>Not Acceptable</em>).
</p>

<p>
    Comment tout cela est-il traité avec Symfony ? Encore une fois, le bundle
    <code>FOSRestBundle</code> aide énormément.
</p>

<h4>Suppression des espaces, performance FTW?</h4>

<p>
    Une tentation qui revient fréquemment consiste à vouloir optimiser la taille
    de la réponse en supprimant les espaces non-nécessaires. Par exemple, une
    réponse sérialisée en XML sera moins volumineuse (en octets) si on retire
    tous les sauts de lignes et les caractères d'indentation.
</p>

<p>
    Cette idée est une fausse bonne idée : cela rendra votre API peut aisée à
    explorer et examiner pour les développeurs (même si, certes, il existe des
    outils pour mettre en forme un flux XML ou json), et le gain sera très
    faible, de l'ordre de quelques pour cent seulement. Il vaut mieux placer vos
    efforts dans la bonne compréhension des modules de compression de la réponse
    qui sont disponibles pour
    <a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html">nginx</a>
    ou
    <a href="http://httpd.apache.org/docs/current/mod/mod_deflate.html">Apache</a>
    (et la charge serveur associée sera ainsi bien mieux utilisée) !
</p>

<h3>Navigabilité : <abbr title="Hypermedia as the Engine of Application State">HATEOAS</abbr> or not?</h3>

<p>
    Imaginons que notre API dédiée aux poneys est sensiblement plus complète que
    prévu. Par exemple, nous pourrions aussi exposer un Web Service pour les
    types de poneys, pour la liste des concours de poneys, pour les
    participations de tel ou tel poney à un concours, etc.
</p>

<p>
    Afficher des informations et permettre des interactions en rapport avec un
    poney donné peut se faire par différentes approches :
</p>

<p>
    Une première solution consiste à embarquer toutes les informations
    nécessaires à l'affichage dans un seul service, eg. :
</p>

<pre class="language-json"><code>{
    "poney": {
        "id": 118,
        "name": "Michel",
        "type": {
            "id": 1,
            "name": "Shetland",
            "countries": [{
                "id": 33,
                "name": "France"
            },{
                "id": 44,
                "name": "United Kingdom"
            }]
        },
        "bithdate": "2010-08-23",
        "gender": "male",
        "contests": [{
            "id": 1199,
            "name": "IPC 2013 - International Pony Contest 2013",
            "location": "Munich, Germany",
            "startDate": 2013-10-27,
            "endDate": 2013-10-30,
        }]
    }
}
</code></pre>

<p>
    Corolaire de son avantage, cette solution a évidemment l'inconvénient de
    produire des réponses verbeuses, et forcément centrées sur certains cas
    d'usage. Le risque, avec cette approche, est de concevoir des APIs aux
    réponses plus complexes que nécessaire, et aux performances dégradées par
    rapport aux besoins réels.
</p>

<p>
    Une deuxième approche consiste à choisir de revenir aux sources de REST en
    se concentrant, pour chaque URL, sur la représentation de la ressource
    elle-même, sans se soucier des éléments liés. Dans ce cas, une réponse
    pourrait être :
</p>

<pre class="language-json"><code>{
    "poney": {
        "id": 118,
        "name": "Michel",
        "typeId": 1,
        "bithdate": "2010-08-23",
        "gender": "male",
        "contestIds": [ 1199 ]
    }
}
</code></pre>

<p>
    Cette seconde approche est déjà plus intéressante, dans la mesure où elle
    permet de récupérer des données de manière atomique, sans courir le risque,
    à chaque appel, de récupérer un flux énorme de données.
</p>

<p>Cette approche souffre néanmoins de deux limitations principales :</p>

<ul>
    <li>
        comment un client peut-il savoir quelle est l'URL à laquelle il peut
        trouver la ressource « <code>type</code> » pour le poney
        « <code>Michel</code> » ? Idem pour le contest dont on nous fournit
        l'identifiant 1199 !
    </li>
    <li>
        pour afficher la fiche d'identité complète d'un poney, un client
        devra-t-il donc réaliser <em>n</em> requêtes, en fonction de l'activité
        de ce poney ?
    </li>
</ul>

<p>
    La première question peut être résolue par une approche
    <abbr title="Hypermedia as the Engine of Application State">HATEOAS</abbr>,
    qui permet d'exposer les actions ou transitions possibles à partir de la
    ressource actuellement exposée, par le biais de lien hypermédias.
</p>

<p>La réponse pourrait par exemple devenir :</p>

<pre class="language-json"><code>{
    "poney": {
        "id": 118,
        "name": "Michel",
        "typeId": 1,
        "bithdate": "2010-08-23",
        "gender": "male",
        "contestIds": [ 1199 ],
        "_links": {
            "self": { "href": "/ponies/118" },
            "comments": { "href": "/ponies/118/comments" },
            "contests": { "href": "/ponies/118/contests" },
            "type": { "href": "/types/1" }
        }
    }
}
</code></pre>

<p>
    Pour être plus précis, il existe actuellement plusieurs syntaxes
    (non-normées) pour exprimer des liens entre ressources. Une des plus
    utilisée est <a href="http://stateless.co/hal_specification.html"><abbr title="Hypertext Application Language">HAL</abbr></a>,
    employée pour l'exemple ci-dessous, mais vous pourrez jeter un oeil à
    <a href="https://github.com/collection-json">Collection+JSON</a>,
    <a href="http://json-ld.org/">JSON for Linking Data</a> ou encore
    <a href="http://jsonapi.org/">JSON API</a>, qui proposent des alternatives
    similaires.
</p>

<p>
    Si on utilise bien cette approche sur tous les services exposés par notre
    API, un client qui souhaite en exploiter les données pourra le faire sans
    avoir une connaissance parfaite du plan d'adressage de notre API. Il n'aura
    pas, par exemple, à implémenter la construction de l'URL qui permet
    d'accéder aux commentaires associés au poney « <code>Michel</code> » : ce
    sont les liens qui lui fourniront cette indication.
</p>

<p>
    L'écosystème Symfony2 montre encore une fois, sur ce point, son dynamisme.
    Deux bundles permettent de traiter le problème :
</p>

<ul>
    <li>
        <a href="https://github.com/TheFootballSocialClub/FSCHateoasBundle">FSCHateoasBundle</a>
    </li>
    <li>
        <a href="https://github.com/willdurand/BazingaHateoasBundle">BazingaHateoasBundle</a>
    </li>
</ul>

<p>
    Dans les deux cas, ces bundles procèdent par une association d'annotations
    aux entités, permettant de définir quels sont les liens à retourner dans une
    sérialisation de l'entité. Par exemple, avec
    <code>BazingaHateoasBundle</code> :
</p>

<pre class="language-php"><code>&lt;?php
namespace Pony\ApiBundle\Entity;

use JMS\Serializer\Annotation as Serializer;
use Hateoas\Configuration\Annotation as Hateoas;

/**
 * Run Pony, run
 *
 * @Serializer\XmlRoot("pony")
 * @Hateoas\Relation("self", href = "expr('/ponies/' ~ object.getId())")
 * @Hateoas\Relation("comments", href = "expr('/ponies/' ~ object.getId() ~ '/comments')")
 * @Hateoas\Relation("type", href = "expr('/types/' ~ object.getType())")
 */
class Pony
{
    private $id;
    private $name;
    private $type;
    private $height;
}
</code></pre>

<p>
    Et au moment de la sérialisation de l'entité, ses liens sont automatiquement
    ajoutés :
</p>

<pre class="language-json"><code>{
    "id": 1,
    "name": "John Silver",
    "type": "Connemara",
    "height": 134,
    "_links": {
        "self": {
            "href": "/ponies/178"
        },
        "comments": {
            "href": "/ponies/178/comments"
        },
        "type": {
            "href": "/types/12"
        }
    }
}
</code></pre>

<h3>Versionner son API et anticiper le futur</h3>

<p>
    Une autre problématique fréquente, qui est très souvent oubliée ou négligée,
    concerne la maintenance dans le temps d'une API.
</p>

<p>
    Supposons que, une fois notre API de poneys en ligne, plusieurs développeurs
    décident de créer des applications Web ou mobiles pour en exploiter le
    contenu. Naturellement, ces développeurs vont utiliser l'API dans le
    formalisme qu'elle propose à cet instant là.
</p>

<p>
    Or, pour des raisons métier (on fait évoluer le modèle de données pour gérer
    un plus grand nombre de métadonnées au sujet des poneys) ou simplement pour
    des raisons de refactoring technique, il peut arriver que la structure et le
    format d'une API change. Si les changements sont absolument mineurs,
    l'impact sur les clients d'API reste mesuré. Mais si les modifications sont
    plus profondes, cela peut conduire certains clients à ne plus fonctionner
    correctement.
</p>

<p>
    Pour les applications Web clientes, l'impact reste mesuré : il suffit que
    leurs développeurs fassent l'effort de mettre à jour pour s'adapter à l'API
    modifiée, et tous les utilisateurs finaux ont à nouveau un outil qui
    marche.
</p>

<p>
    En revanche, le cas des applications mobiles natives, installées sur les
    téléphones des utilisateurs, est plus compliqué, puisque rien ne force (en
    tout cas pour le moment) un mobinaute à mettre à jour ses applications. un
    utilisateur lambda peut donc, d'un jour à l'autre, constater que son
    application ne fonctionne plus, et elle ne fonctionnera pas mieux tant
    qu'elle n'aura pas été mise à jour, parce que le format de l'API qu'elle
    consomme a changé.
</p>

<p>
    Avouez que ça fait tâche. En résumé, il est donc nécessaire de versionner
    vos APIs pour éviter ce genre de problème.
</p>

<p>
    Là encore, il y a plusieurs approches : les approches approximatives ou les
    approches plus théoriques et en phase avec HTTP :
</p>

<ul>
    <li>
        passer un numéro de version dans l'URL :
        <code>http://api.domain.com/ponies/118?version=2.1</code> ou
        <code>http://api.domain.com/2.1/ponies/118</code>
    </li>
    <li>
        employer encore une fois l'en-tête <code>Accept</code>, afin de préciser
        un numéro de version d'API à employer:
        <code>Accept: application/json; version=2</code>
    </li>
</ul>

<p>
    L'approche <code>http://api.domain.com/2.1/ponies/118</code> a l'avantage,
    en terme d'architecture, de pouvoir se régler simplement par le déploiement
    de plusieurs versions de votre application. Pour les deux autres, en
    revanche, il est nécessaire de traiter le versionning au sein d'une seule
    instance de votre application. Prévoyez par exemple plusieurs classes de
    contrôleur, et un <code>RequestListener</code> en charge de l'extraction de
    la version de l'API et de la redirection vers le bon contrôleur.
</p>

<p>
    Quelle que soit l'approche choisie, il arrivera un moment où vous ne pourrez
    plus conserver les versions les plus anciennes de vos APIs. Si les
    technologies ou le modèle de données sous-jacent change trop, par exemple,
    vous ne souhaiterez certainement pas faire l'effort d'adaptation des
    anciennes versions de l'API. Ce genre de cas se traite en rendant obsolète
    (ie., plus supportée) les versions les plus anciennes de votre API. Il
    suffit de prévoir cette obsolescence à l'avance, et d'en prévenir les
    utilisateurs afin de leur laisser le temps de migrer sereinement.
</p>

<p>Si c'est possible, vous pouvez aussi choisir de rediriger les requêtes avec un code de statut <code>301</code> vers une version plus récente du même service, ou simplement répondre par un code de statut d'erreur <code>410</code>.</p>

<h2>Héberger, surveiller, encadrer et documenter</h2>

<h3>Give me cache, bitch!</h3>

<p>
    Une bonne API REST respecte un principe d'idempotence : deux requêtes
    successives produisent la même réponse. Sauf changement dans l'intervalle,
    deux appels à l'API avec une même entête <code>Accept</code> pour obtenir la
    fiche du poney <code>Michel</code> devront donc produire le même
    résultat.
</p>

<p>
    Cela signifie notamment qu'une API REST doit être « <em>stateless</em> »,
    c'est-à-dire sans état. Si vous devez gérer des droits d'accès, votre API ne
    doit donc pas réagir aux sessions, mais vous devez à la place fournir un
    jeton à chaque appel de l'api. Encore une fois, deux écoles s'affrontent :
    passer le jeton dans l'URL ou par le biais d'une entête. Et comme toujours,
    utiliser une en-tête est plus <em>smart</em>, mais peut être un problème
    avec certains clients HTTP peu avancés.
</p>

<p>
    Un gros avantage de ce caractère « <em>stateless</em> », c'est qu'il permet
    aisément, du coup, d'associer du cache HTTP à votre API. Suivant les
    contraintes métier, vous pourrez choisir d'en restreindre la durée de vie,
    mais c'est une bonne idée, pour limiter la charge, de toujours mettre une
    durée de cache minimal sur vos APIs. En cas de fort trafic, un cache de 10
    secondes peut réellement faire baisser la charge du serveur d'API.
</p>

<h3>Analyser et grapher les performances</h3>

<p>
    Une API REST HTTP est faite pour être consommée par des clients d'API. Cela
    signifie que des systèmes tiers (les « clients ») sont dépendants du temps
    de réponse de l'API. Si votre API répond en 10s, les clients qui
    l'exploitent souffriront de la latence ainsi introduite, et il y a fort à
    parier qu'au final votre API sera jugée peu satisfaisante.
</p>

<p>
    Il n'y a pas de métrique absolue, mais une API devrait répondre le plus
    rapidement possible, quelle que soit la requête. Un ordre de grandeur de 20
    à 50 ms parait raisonnable.
</p>

<p>
    Mettez en place une suite de tests fonctionnels pour éprouver la solidité de
    votre API et valider en continu son bon fonctionnement, et graphez les
    performances de votre API. Cela vous permettra de détecter les brusques
    ralentissements, ou la lente dégradation des performances au fur et à mesure
    que les fonctionnalités s'enrichissent.
</p>

<h3>Limiter le rythme</h3>

<p>
    Afin de protéger votre API contre les abus - volontaires type
    <a href="http://fr.wikipedia.org/wiki/Attaque_par_d%C3%A9ni_de_service"><abbr title="Deny of Service" lang="en">DoS</abbr></a>
    ou involontaires (un client bogué) - une approche raisonnable peut consister
    à limiter le nombre de requêtes autorisées pour un client dans une durée
    donnée. Par exemple, vous pouvez vouloir limiter un client à 300 requêtes
    par heure.
</p>

<p>Pour cela, plusieurs en-têtes HTTP peuvent aider :</p>

<ul>
    <li>
        <code>X-Rate-Limit-Limit</code> permet d'indiquer le nombre d’appels
        maximal par tranche de temps (par exemple, une heure) ;
    </li>
    <li>
        <code>X-Rate-Limit-Remaining</code> indique le nombre d’appels encore
        disponibles ;
    </li>
    <li>
        <code>X-Rate-Limit-Reset</code> indique l'heure à laquelle les compteurs
        seront ré-initialisés.
    </li>
</ul>

<p>Par exemple :</p>

<pre class="language-http"><code>X-Rate-Limit-Limit: 7500
X-Rate-Limit-Remaining: 7499
X-Rate-Limit-Reset: 1386256560
</code></pre>

<p>
    Il est possible de mettre en place cette protection au niveau de votre
    application - mais cela sera consommateur de ressources - ou directement au
    niveau du serveur. Par exemple, nginx propose le module
    <a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html">ngx_http_limit_req_module</a>.
</p>

<h3>Documenter</h3>

<p>
    C'est le dernier paragraphe de ce (long) article au sujet des APIs REST
    HTTP, mais c'est certainement un de ceux que vous devez lire avec le plus
    d'attention :-)
</p>

<p>
    Un élément essentiel d'une API est sa documentation. Sans documentation
    exhaustive, une API n'a aucune valeur réelle, puisque son utilisation est
    sujette à interprétation. Les développeurs d'APIs disposent depuis longtemps
    d'outils type
    <a href="http://developers.helloreverb.com/swagger/">Swagger</a>,
    qui permettent d'afficher de jolies pages de documentation d'API.
</p>

<p>
    Le bundle
    <a href="https://github.com/nelmio/NelmioApiDocBundle">NelmioAPIDocBundle</a>
    est de ce point de vue un <em>must-have</em> : il permet d'exposer
    facilement, en quelques minutes, ce type de documentation à vos
    utilisateurs. Il suffit d'ajouter une annotation sur les services que vous
    souhaitez documenter, et le bundle s'appuie automatiquement sur l'annotation
    <code>@QueryParam</code> :
</p>

<pre class="language-php"><code>/**
 * @QueryParam(name="height", requirements="\d+", description="Height of the pony in centimeters.")
 * @QueryParam(name="type", description="Type of the pony.")
 *
 * @ApiDoc(resource=true, description="Get all the ponies")
 */
public function getPoniesAction(ParamFetcher $paramFetcher)
{
    // stuff here
}
</code></pre>

<p>
    <img src="{{ asset('bundles/afsyfront/images/avent/06-NelmioApiDocBundle-1.png') }}" alt="" />
</p>

<p>
    Et vous pouvez même disposer d'un bac à sable, permettant la réalisation
    d'opérations sur l'API (tests, etc.) directement depuis la page de
    documentation !
</p>

<p>
    <img src="{{ asset('bundles/afsyfront/images/avent/06-NelmioApiDocBundle-2.png') }}" alt="" />
</p>

<p>
    N'attendez pas la fin de votre projet pour documenter : vous pouvez le faire
    dés le début, et ainsi avancer en parallèle des clients HTTP éventuels,
    quitte à bouchonner à l'aide d'outils tiers comme
    <a href="http://apiary.io/how-it-works">Apiary</a>.
</p>

<p>Bonne <em>APIculture</em> !</p>

<script type="text/javascript" src="https://www.cornify.com/js/cornify.js"></script>
{% endblock %}

{% block article_avatar %}
<img src="{{ asset('bundles/afsyfront/images/avent/xavier-lacot.png') }}" />
{% endblock %}

{% block article_bio %}
<h2>
    <a href="{% block author_url 'http://jolicode.com/equipe/xavier-lacot' %}">{% block article_author 'Xavier Lacot' %}</a>
</h2>

<p>
    Utilisateur et contributeur à Symfony depuis 2005, Xavier a depuis eu
    l'occasion de participer à un nombre important de projets Web, et de
    contribuer plusieurs plugins et bundles pour Symfony. Il est également le
    mainteneur de l’ORM javascript joli.js pour le framework de développement
    mobile <a href="http://www.appcelerator.com/">Appcelerator Titanium</a>.
</p>

<p>
    Traducteur de plusieurs Recommandations du
    <abbr title="World Wide Web Consortium">W3C</abbr>, il a écrit un livre
    blanc sur les frameworks PHP professionnels. En dehors de son investissement
    au sein de l’
    <abbr title="Association Française des Utilisateurs de PHP">AFUP</abbr>,
    dont il a été président en 2012, il s’intéresse aux problématiques
    liées au Web sémantique.
</p>

<p>
    Aujourd'hui, Xavier dirige <a href="http://www.jolicode.com">JoliCode</a>,
    qu'il a co-fondé.
</p>
{% endblock %}
