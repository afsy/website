{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2013 %}

{% block article_title "Jour 9 - symfony 1.5, notre fork de symfony1" %}

{% block article_content %}
<h1>symfony 1.5, notre fork de symfony1</h1>

<p>
    Vous ne rêvez pas, nous allons bien vous parlez de symfony1 dans cet
    article. Nous n'allons pas vous forcer à l'utiliser et encore moins vous
    inciter à commencer un nouveau projet avec. Nous allons vous présenter
    <a href="https://github.com/LExpress/symfony1">notre fork de symfony1</a>
    avec toutes les améliorations que nous y avons apportées (notamment le DIC)
    et que nous avons récemment taggé : <strong>symfony 1.5</strong>.
</p>

<p>
    Vous avez peut-être, comme beaucoup d'autres développeurs, des applications
    en symfony1 à maintenir. Il est souvent complexe de faire une migration vers
    Symfony2 parce qu'il faut tout réécrire ou presque. Des fois même, votre
    applicatif est tellement couplé à certains composants de symfony1 (les
    formulaires, l'admin generator, etc.) qu'il est presque impossible de migrer
    vers Symfony 2.
</p>

<p>
    La liste des nouveautés et corrections est assez longues, et nous en
    parlerons brièvement plus bas, mais voici les deux grandes nouveautés de ce
    fork : le conteneur d'injection de dépendance (<em>DIC</em>) et le support
    de Composer.
</p>

<h2>Le conteneur d'injection de dépendances</h2>

<p>
    Fabien vous a convaincu par son article sur
    <a href="http://fabien.potencier.org/article/11/what-is-dependency-injection">l'injection de dépendance</a> ?
    Mais malheureusement vous êtes restés sur un projet symfony1 avec l'ancêtre
    du conteneur de services : la « <em>factory</em> ».
</p>

<p>
    Tout n'est pas perdu. Nous avons intégré à symfony 1.5 une version basique
    du composant <code>sfServiceContainer</code> développé par Fabien Potencier.
    Son utilisation est très simple (certains diront que c'est trop facile pour
    être vrai), il suffit de définir un fichier <code>config/services.yml</code>
    avec la liste des services à charger :
</p>

<pre class="language-yaml"><code># config/services.yml
all:
  services:
    auth:
      class: myAuthService
      arguments:
       # Exemple d'utilisation d'un paramètre défini dans app.yml
        - %app_auth_host%
      calls:
        # Injection d'un service
        - [ setEventDispatcher, [ @sf_event_dispatcher ] ]

# Surcharge par environnement
test:
  services:
    auth:
      class: myAuthServiceStub
</code></pre>

<p>
    Le service peut alors être appelé depuis différentes sections de votre
    code :
</p>

<p>Dans une action:</p>

<pre class="language-php"><code>class myModuleActions extends sfActions
{
  public function executeIndex()
  {
    $fs = $this-&gt;getService('sf_filesystem');
    $fs-&gt;...
  }
}
</code></pre>

<p>Dans une tâche en ligne de commande :</p>

<pre class="language-php"><code>class myTask extends sfTask
{
  public function run()
  {
    $fs = $this-&gt;getService('sf_filesystem');
    $fs-&gt;...
  }
}
</code></pre>

<p>
    Ou même depuis n'importe où en utilisant le singleton <code>sfContext</code>
    (mais grâce à l'injection de dépendance vous n'aurez bientôt plus besoin de
    faire ça).
</p>

<pre class="language-php"><code>sfContext::getInstance()-&gt;getService('sf_filesystem');
</code></pre>

<p>
    Le framework embarque
    <a href="https://github.com/LExpress/symfony1/blob/master/lib/config/config/services.yml">plusieurs services par défaut</a> :
</p>

<ul>
    <li><code>sf_formatter</code></li>
    <li><code>sf_event_dispatcher</code></li>
    <li><code>sf_logger</code></li>
    <li><code>sf_user</code></li>
    <li><code>sf_filesystem</code></li>
</ul>

<p><strong>Alternative :</strong></p>

<p>
    Pour intégrer le composant <code>DependencyInjection</code> de Symfony2,
    vous pouvez aussi utiliser le plugin
    <a href="https://github.com/issei-m/sfDependencyInjectionPlugin">sfDependencyInjectionPlugin</a>.
    Nous ne l'avons pas testé mais il semble répondre au besoin.
</p>

<h2>Toute la puissance de Composer au service de votre projet</h2>

<h3>Installer symfony 1.5</h3>

<p>
    L'installation de symfony 1.5 via Composer nécessite tout simplement
    d'exécuter successivement les commandes suivantes :
</p>

<pre class="no-highlight"><code>composer init
composer require lexpress/symfony1 v1.5.*
composer install
</code></pre>

<p>
    Ensuite il faut ajouter le script d'auto-chargement des classes de Composer
    dans le fichier <code>config/ProjectConfiguration.class.php</code> :
</p>

<pre class="language-php"><code>&lt;?php
require_once __DIR__.'/../vendor/autoload.php';
</code></pre>

<p>
    Et le tour est joué. Plus besoin de charger explicitement
    <code>sfCoreAutoload</code>, Composer le fait pour vous.
</p>

<h3>Les installateurs de Composer</h3>

<p>
    Grâce à
    <a href="http://composer.github.io/installers/">composer/installers</a>,
    vous pouvez ajouter un plugin à votre projet. Le plugin est un paquet
    Composer comme un autre, à la seule différence que son type est
    « symfony1-plugin » et non « library » par défaut.
</p>

<p>
    Configuration d'un plugin (dans votre fichier <code>composer.json</code>) :
</p>

<pre class="language-json"><code>{
    "name": "vendor/sf-avent-plugin",
    "type": "symfony1-plugin",
    "require": {
        "composer/installers": "~1.0"
    }
}
</code></pre>

<p>Exemples de plugins compatibles :</p>

<ul>
    <li>
        <a href="https://github.com/LExpress/sfDoctrineGuardPlugin">sfDoctrineGuardPlugin</a> :
        <code>lexpress/sf-doctrine-guard-plugin</code>
    </li>
    <li>
        <a href="https://github.com/LExpress/sfWebBrowserPlugin">sfWebBrowserPlugin</a> :
        <code>lexpress/sf-web-browser-plugin</code>
    </li>
    <li>
        <a href="https://github.com/propelorm/sfPropelORMPlugin">sfPropelORMPlugin</a> :
        <code>propelorm/sf-propel-o-r-m-plugin</code>
    </li>
</ul>

<p>
    Vous pouvez ainsi utiliser Composer pour gérer l'installation du framework,
    des plugins et de tous les autres paquetages.
</p>

<h3>Utiliser les espaces de nommage et suivre le standard PSR-0</h3>

<p>
    Ce n'est pas parce que vous faites du symfony1 que vous ne pouvez pas
    utiliser les fonctionnalités des dernières versions de PHP ; en l'occurrence
    les espaces de nommage (« <em>namespaces</em> »).
</p>

<p>
    Configurez votre projet pour indiquer à Composer de charger les classes qui
    se trouvent dans le dossier <code>src</code> en suivant la norme
    <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/fr/PSR-0.md#readme">PSR-0</a> :
</p>

<pre class="language-json"><code>{
    "autoload": {
        "psr-0": {"Acme\\": "src/"}
    }
}
</code></pre>

<h2>Boostez votre symfony1</h2>

<p>
    En dehors du conteneur d'injection de dépendance et du support de Composer,
    des améliorations significatives ont été réalisées sur les performances.
</p>

<h3>Support de PHP 5.5</h3>

<p>Nous avons rendu symfony1 compatible avec PHP 5.5.</p>

<p>
    Cela semble anodin et ce n'est pas une amélioration en soit de symfony1,
    mais le fait de supporter la version 5.5 de PHP,
    <a href="http://www.journaldunet.com/developpeur/php/php-5-5-0613.shtml">augmente considérablement</a>
    les performances. De plus, il donne la possibilité à votre projet d'être
    toujours sur des versions récentes de PHP.
</p>

<h3>Le routage</h3>

<p>
    Le routage a été la couche à subir le plus d'améliorations. Ainsi, les
    routes qui sont définies dans le cache sont désérialisées à la demande.
    Avec l'usage combiné de <code>lookup_cache_dedicated_keys</code> et du
    <code>cache</code>, seules les routes utilisées dans la page seront
    désérialisées et chargées en mémoire :
</p>

<pre class="language-yaml"><code># apps/frontend/config/factories.yml
all:
  routing:
    class: sfPatternRouting
    param:
      cache:
        class: sfAPCCache
      generate_shortest_url:            true
      extra_parameters_as_query_string: true
      lookup_cache_dedicated_keys:      true
</code></pre>

<p>
    Sur une application ayant 700 routes différentes, l'utilisation mémoire à
    chaque requête a été réduit de 10 <abbr title="Megaoctet">Mo</abbr>
    (soit 10% à 20% de mémoire en moins).
</p>

<h3>Optimisation de votre projet</h3>

<p>
    C'est une correction mineure mais maintenant la commande
    <code>project:optimize</code> gère correctement l'environnement utilisé
    ainsi que la génération du cache.
</p>

<h3>Désactiver complètement <code>SwiftMailer</code></h3>

<p>
    <code>SwiftMailer</code> est instancié à chaque requête faite sur votre
    application. Il est maintenant très simple de ne plus l'instancier.
</p>

<p>Dans votre fichier <code>factories.yml</code> :</p>

<pre class="language-yaml"><code>mailer:
  class: sfNoMailer
</code></pre>

<h2>Les autres nouveautés / corrections</h2>

<p>
    Pour une liste complète, il vaut mieux se référer au
    <a href="https://github.com/LExpress/symfony1/blob/master/WHATS_NEW.md" lang="en">WHAT'S NEW</a>,
    mais voilà un rapide résumé.
</p>

<h3>Les formulaires</h3>

<p>
    La majorité des améliorations faites sur les formulaires concerne les
    formulaires imbriqués (les fameux « <em lang="en">embedded forms</em> »). La
    liste est <a href="https://github.com/LExpress/symfony1/blob/master/WHATS_NEW.md#form">assez longue</a>
    puisque plus d'une dizaine de tickets du Trac de symfony ont été
    corrigés.
</p>

<p>
    Mais par exemple, on peut maintenant appeler la méthode
    <code>sfFormObject::updateObject()</code> qui va mettre à jour tous les
    formulaires imbriqués sans pour autant les sauvegarder.
</p>

<p>
    De nouveaux <em>widgets</em> et validateurs ont été aussi ajoutés, dont :
</p>

<ul>
    <li>
        <code>sfWidgetFormInputRead</code> pour afficher un champ en lecture
        seule,
    </li>
    <li>
        <code>sfValidatorIp</code> extrait de Symfony 2.
    </li>
</ul>

<h3>Les tâches en ligne de commande</h3>

<p>
    C'est <a href="https://github.com/LExpress/symfony1/blob/master/lib/task/sfBaseTask.class.php#L439">le petit truc</a>
    qu'on aime bien dans cette version de symfony1 : la possibilité d'afficher
    une barre de progression dans vos tâches (avec une estimation de temps).
    C'est <strong>hyper pratique</strong> pour avoir une idée de l'avancée de
    votre tâche, sans devoir faire un <code>-&gt;logInfo()</code> à chaque tour
    de boucle.
</p>

<p>
    <img src="{{ asset('bundles/afsyfront/images/avent/2013/09/progress-bar.png') }}" class="img-article" alt="Barre de progression" />
</p>

<p>
    L'information n'est pas présente sur la capture d'écran, mais la tâche
    affiche son utilisation mémoire. Très pratique pour savoir s'il y a des
    fuites mémoires.
</p>

<p>
    Il est bon de noter que cette fonctionnalité a depuis été ajoutée à
    Symfony 2. <em>Youhou on était en avance :)</em> Cependant, des
    <em lang="en">pull requests</em> sont en attente pour afficher
    <a href="https://github.com/symfony/symfony/pull/9574">le temps restant</a>
    et la <a href="https://github.com/symfony/symfony/pull/9573">consommation mémoire</a>.
</p>

<h2>Conclusion</h2>

<p>
    On le rappelle encore : il préférable de ne pas utiliser cette version pour
    de nouveaux projets mais d'opter pour Symfony2.
</p>

<p>
    Si par contre, vous devez maintenir un projet existant en symfony1, vous
    pouvez choisir cette version <strong>tout de suite (!)</strong> sans faire
    d'énormes modifications. Lisez attentivement le fichier
    d'<a href="https://github.com/LExpress/symfony1/blob/master/UPGRADE.md" lang="en">UPGRADE</a>
    même s'il concerne majoritairement les formulaires.
</p>

<p>
    Et si vous voulez contribuer à l'amélioration de
    <a href="https://github.com/LExpress/symfony1">ce fork</a>, vous pouvez
    aussi soumettre des <span lang="en">pull requests</span> :)
</p>

<p>
    Merci <a href="https://github.com/LExpress/symfony1/graphs/contributors">aux contributeurs</a>
    et surtout au gros travail de
    <a href="https://twitter.com/jeromemacias">Jérôme Macias</a> sur ce projet !
</p>

{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/jeremy-jerome.png') }}" />
{% endblock %}

{% block article_bio %}
<h2>
    <a href="{% block author_url %}http://github.com/LExpress/symfony1{% endblock %}" target="_blank">{% block article_author %}Jérémy &amp; Jérôme{% endblock %}</a>
</h2>
<p>
    <a href="http://jerome.tamarelle.net">Jérôme</a> et
    <a href="http://www.j0k3r.net">Jérémy</a> sont tous deux leads developpeurs
    Symfony à L'Express. Ils s'amusent avec symfony depuis la fameuse 0.63 et
    jouent maintenant avec Silex et SF2 dans la joie !
</p>
<p>
    Vous pouvez les retrouver sur twitter:
    <a href="https://twitter.com/j0k">@j0k</a>
    &amp; <a href="https://twitter.com/GromNaN">@GromNaN</a>.
</p>
{% endblock %}
