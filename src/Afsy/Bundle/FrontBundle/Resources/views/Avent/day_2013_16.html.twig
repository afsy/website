{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2013 %}

{% block article_title "Jour 16 - Tips & Tricks : Symfony & AngularJS" %}

{% block article_content %}

{% verbatim %}

<h1>Tips &amp; Tricks : AngularJS &amp; Symfony2</h1>

<p>À la lecture des derniers articles, vous avez pu voir les bonnes pratiques pour le déploiement d'une API REST avec Symfony2, et l'utilisation de Symfony2 dans le développement d'applications Javascript.<br />
Aujourd'hui, nous vous proposons de reprendre cette architecture mais "depuis les tranchées" : un premier retour, sous forme de tips, sur nos expériences de déploiement d'une application cliente AngularJS avec une API REST Symfony2.</p>

<p>Cet article n'est pas un tutoriel : nous souhaitons présenter les différentes problématiques rencontrées au jour le jour et quelques pistes pour optimiser le développement et la maintenance d’une telle application.</p>

<p><strong>En vrac, 5 Tips qui pourront (peut-être) vous aider.</strong></p>

<h2>Tip 0 : Organisation</h2>

<p>En fonction de la façon dont vous souhaitez organiser votre code et vos deux applications, on peut envisager plusieurs façons d'utiliser AngularJS :</p>

<ul>
<li>Développer une application indépendante et autonome ("Full AngularJS"). Toute les logiques métiers seront réalisées en Javascript ou via des appels à l'API REST.</li>
<li>De manière localisée dans votre page pour un widget par exemple. Vous aurez donc votre application Symfony et vos templates (Twig?) bootstrapant AngularJS.</li>
</ul>
<p>Par soucis pratique c'est cette dernière solution que nous avons utilisée dans notre application de démo, dispo sur <a href="https://github.com/LaNetscouade/afsy-avent-2013">GitHub</a>.</p>


<h3>API Rest et AngularJs : Mise en place</h3>

<p>Revenons sur les articles précédents :</p>

<p><a href="http://afsy.fr/avent/2013/06-best-practices-pour-vos-apis-rest-http-avec-symfony2">Jour 6</a> : Il y a plusieurs bundles Symfony2 qui vous permettront de développer une API REST rapidement et proprement.</p>

<p>D'ailleurs, si vous utilisez Behat le <a href="https://github.com/Behat/CommonContexts/blob/master/Behat/CommonContexts/WebApiContext.php">WebApiContext</a> peut vous aider à tester votre API.</p>

<p><a href="http://afsy.fr/avent/2013/07-symfony-framework-MVC-javascript">Jour 7</a> : nous avons pu comprendre l'intérêt d'utiliser des frameworks JS full-stack.<br />
Dans notre cas, nous utiliserons AngularJS.</p>

<p>
    <img src="{{ asset('bundles/afsyfront/images/avent/2013/16/AngularJS-large.png') }}" class="img-article" alt="Logo de AngularJs" />
</p>

<p><strong><a href="http://angularjs.org/">AngularJs</a></strong> est un framework Javascript MVC opensource soutenu par Google.<br />
Il permet de manipuler très facilement le DOM d'une page web. Par exemple, il offre la possibilité de synchroniser (de façon transparente) un modèle de données avec le rendu HTML (c’est le paradigme MVVM, pour ModelView - ViewModel).</p>

<p>Parmi les points forts d'AngularJS, nous noterons : sa philosophie "full-stack" (pas ou peu besoin de librairies externes), un système de directives puissant, une documentation très bien fournie, une communauté très active et beaucoup de contributions et ressources.</p>

<p>Pour finir de vous convaincre, vous pouvez lire ce court article sur Sitepoint <a href="http://www.sitepoint.com/10-reasons-use-angularjs/"><em>10 Reasons Why you should use AngularJs</em></a>, ou vous pouvez consulter cette <a href="http://builtwith.angularjs.org/">galerie de projets</a> réalisés avec AngularJs.</p>

<h3>Intégrer AngularJS dans une application Symfony</h3>

<p>Comme dans notre démo, il peut s'avérer intéressant d'inclure AngularJS dans un applicatif Symfony existant (bien que criticable ;p).</p>

<p>Pour l'exemple, si veut simplement ajouter un widget profitant d'AngularJS dans son template Twig, il n'y a qu'à inclure <code>angular.js</code> et ajouter l'attribut <code>ng-app</code> au div qui contiendra le widget :</p>

<pre class="no-highlight"><code>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
{% javascripts
  '@AcmeFooBundle/Resources/public/js/angularjs/1.2.4/angular.min.js'
%}
    &lt;script type="text/javascript" src="{{ asset_url }}"&gt;&lt;/script&gt;
{% endjavascripts %}
&lt;/head&gt;
&lt;body&gt;
&lt;div id="name-widget" ng-app&gt;
  &lt;!-- simple demo http://angularjs.org/#the-basics --&gt;
  &lt;!-- affiche le contenu de l'input dans le h1 --&gt;
  &lt;label&gt;Name:&lt;/label&gt;
  &lt;input type="text" ng-model="yourName" placeholder="Enter a name here"&gt;
    &lt;h1&gt;Hello {{yourName}}!&lt;/h1&gt;

&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Notons que le language de template d'AngularJS et celui de Twig rentrent en conflit avec l'utilisation des <code>{{ }}</code>.<br />
Il est donc important d'isoler votre code Angular dans les templates Twig en utilisant le <a href="http://twig.sensiolabs.org/doc/tags/verbatim.html">tag</a> <code>verbatim</code>.<br />
(Autre solution : remplacer les tags d'interpolation d'AngularJS, <a href="http://stackoverflow.com/questions/13671701/angularjs-twig-conflict-with-double-curly-braces">plus de détails ici</a>)</p>

<h2>Tip 1 : Profiter des outils des devs Frontend</h2>

<p>Les développeurs frontend possèdent de nombreux outils hyper-puissants pour le développement et le déploiement.<br />
Parmi ces outils, on citera :</p>

<ul>
<li><a href="https://github.com/bower/bower">Bower</a><br />
Un outil pour gérer les dépendances et l'installation de composants "Frontend" (une sorte de composer pour le front). Il est possible d'intégrer facilement le gestionnaire Bower dans une application Symfony2 en utilisant, par exemple le bundle <a href="https://github.com/Spea/SpBowerBundle">SpBowerBundle</a>.</li>
<li><a href="http://gruntjs.com/">Grunt</a><br />
    Une boite à outil pour gérer toutes les tâches utiles pour le dev, telles que compiler des fichiers SASS ou minifier les fichiers Javascripts (il y en a beaucoup d'autres !). Sur certains aspects, ça peut ressembler à un Makefile orienté Javascript. Bien que nous ne l'avons pas testé, l'usage de Grunt dans Symfony est envisageable (Adieu Assetic ?!). Cet [article](http://wozbe.com/fr/blog/2013-08-07-integration-grunt-et-bower-au-sein-application-symfony) est un bon point de départ.
    </li>
    </ul>

<p>Vous pouvez voir un exemple d'intégration de Bower dans notre <a href="https://github.com/LaNetscouade/afsy-avent-2013/blob/master/src/LaNetscouade/AngularDemoBundle/Resources/config/bower/bower.json">démo</a></p>

<h2>Tip 2 : Gestion des exceptions "Cross Domain Scripting"</h2>

<p>Pour des raisons de sécurité, les navigateurs web empêchent le code Javascript de faire des requêtes Ajax (XMLHttpRequest) vers d'autres domaines (<a href="http://en.wikipedia.org/wiki/Same-origin_policy">Same-origin policy</a>) .<br />
Un exemple d'exception lancée par le navigateur :</p>

<pre class="no-highlight"><code>    XMLHttpRequest cannot load http://api.mondomaine.com/v1/maressource.json. Invalid HTTP status code 405
</code></pre>

<p>Dans notre cas, <strong>notre application front ne pourra donc pas requêter l'API.</strong></p>

<p>Plusieurs solutions sont possibles :</p>

<h3>Utilisation de JSONP</h3>

<p>JSONP (JSON with padding) est une extension du format JSON. En résumé, il permet d'encapsuler du JSON dans du Javascript :<br />
Requêter une ressource au format JSONP revient à demander au navigateur de récupérer une ressource Javascript, ce qui l'autorisera sans problème.<br />
<a href="https://github.com/FriendsOfSymfony/FOSRestBundle">FOSRestBundle</a> permet d'implémenter rapidement le format JSONP sur notre API.</p>

<p>Attention, il y a plusieurs contraintes dans l'utilisation de JSONP. La plus importante : JSONP est supporté uniquement dans le cadre de requêtes HTTP de type GET.</p>

<h3>Configurer son serveur web (simple &amp; stupid)</h3>

<p>Il suffit de mettre en place les bonnes configurations pour que les deux applications puissent fonctionner sur le même domaine. Avec Apache, on pourra notamment jouer avec les directives <a href="http://httpd.apache.org/docs/current/fr/mod/mod_alias.html">Alias</a>.</p>

<pre class="no-highlight"><code>&lt;VirtualHost *:80&gt;
ServerName mon-appli-angular.com
DocumentRoot /var/www/mon-appli-angular/
Alias /api /var/www/mon-appli-symfony/
    &lt;Directory xxxx&gt;
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>Dans ce cas l'URL http://mon-appli-angular-com/api sera pris en compte par notre API Symfony2.</p>

<h3>Utilisation de CORS</h3>

<p>CORS (Cross-origin resource sharing) est une réponse élégante et standardisée pour autoriser les requêtes Cross-domain.<br />
Attention tout de même, le mécanisme CORS n'est pas supporté par tous les navigateurs (devinez <a href="http://caniuse.com/cors">lesquels</a>) ...</p>

<p>On peut facilement mettre en place le mécanisme CORS dans Symfony2 avec le bundle <a href="https://github.com/nelmio/NelmioCorsBundle">NelmioCORSBundle</a>. Ce bundle va ajouter de façon transparente les entêtes "CORS" dans les requêtes HTTP sortantes de notre applicatif Symfony.</p>

<p>Installez le bundle :</p>

<pre class="language-bash"><code>$ composer require nelmio/cors-bundle:~1.0
</code></pre>

<pre class="language-php"><code>//app/appKernel.php

public function registerBundles()
{
    $bundles = array(
        ...
        new Nelmio\CorsBundle\NelmioCorsBundle(),
        ...
    );
    ...
}
</code></pre>

<p>puis ajoutez ces quelques lignes dans votre config.yml</p>

<pre class="language-yaml"><code>#app/config/config.yml

nelmio_cors:
paths:
  '^/api':
      allow_origin: ['*']
      allow_headers: ['x-requested-with']
      allow_methods: ['POST', 'PUT', 'GET', 'DELETE', 'OPTIONS']
      max_age: 3600
</code></pre>

<h2>Tip 3: Gestion des routes</h2>

<p>Avec nos deux applications, nous aimerions pouvoir travailler sur notre API sans avoir à changer notre application frontend.<br />
La gestion des routes peut être un problème dans ce cas : il faut que nous puissions modifier les routes de l'API (montée de version par exemple), sans avoir à déployer une nouvelle version de notre application frontend.</p>

<p>Dans l'article du <a href="http://afsy.fr/avent/2013/12-et-si-on-mettait-un-peu-de-symfony-dans-javascript">12e jour</a>, vous pouvez voir que le bundle  <a href="https://github.com/FriendsOfSymfony/FOSJsRoutingBundle/blob/master/Resources/doc/README.markdown">FOSJsRoutingBundle</a><br />
répond à nos besoins.</p>

<p>Dans notre cas, nous allons utiliser les routes exposées par le bundle dans l'application Angular via le service <a href="https://github.com/mgonto/restangular">Restangular</a> (Un must-have pour Angular ;) ).<br />
Tous les appels à l'API seront donc configurés via le Routing exposé par FOSJsRoutingBundle.</p>

<p>Côté Symfony, il faut exposer les routes de notre API :</p>

<pre class="language-yaml"><code>#app/config/routing.yml

la_netscouade_api_demo_bundle:
resource: LaNetscouade\ApiDemoBundle\Controller\CocktailController
type:     rest
options:
 expose: true
prefix: api
</code></pre>

<p>Côté application Angular, il faut appeler la librairie Routing, fournie par le bundle</p>

<pre class="language-javascript"><code>/**
* Les ressources javascript de FosJsRoutingBundle doivent être chargées
*/
(function () {
'use strict';

angular.module('cocktails',['restangular']).controller('cocktailsIndexController',function($scope, Restangular){
    $scope.pageTitle     = "Cocktail List";
    $scope.cocktailsList = Restangular.all(getRoute('get_cocktails')).getList();
});

var app = angular.module('demoApp', ['cocktails']);

app.config(function(RestangularProvider) {
    RestangularProvider.setBaseUrl('http://localhost:8000'); //wOOt, ugly ...but that's a demo ;)
    RestangularProvider.setRequestSuffix('.json');
});
/**
 * transform http://localhost:8000//app_dev.php =&gt; http://localhost:8000/app_dev.php
 * as Restangular and Routing components add  '/' to baseUrl, we have to remove it
 * @param routeName
 * @returns {string}
 */
var getRoute = function(routeName){
    return Routing.generate(routeName,{},false).slice(1);
}

})();


</code></pre>

<h2>Tip 4 : Rendre notre application indexable par les moteurs de recherche</h2>

<p>Il est bien connu que les applications full-Javascript ne sont pas indexables par les moteurs de recherche.</p>

<p>Il existe de nombreuses solutions pour rendre son application indexable comme par exemple Prerender.io (présenté par Rémi <a href="http://afsy.fr/avent/2013/07-symfony-framework-MVC-javascript">précédemment</a> ).<br />
On peut envisager une solution plus simple (mais plus compliquée à maintenir). Il s'agit de déléguer le rendu de la partie indexable à Symfony.</p>

<h3>Etape 1 : Le hashbang</h3>

<p>Le hashbang <code>#!</code>, utilisé dans les URLs, permet d'indiquer aux bots qu'il s'agit d'une application "Ajax" <a href="https://developers.google.com/webmasters/ajax-crawling/docs/specification">Google Ajax Crawling Scheme</a>.<br />
Automatiquemnt à la vue de l'URL http://example.com/#!/ma-page, le bot va crawler http://example.com/?<em>escaped_fragment</em>=/ma-page</p>

<p>Sans configuration particulière, cette page n'existe pas !<br />
C'est donc à nous de générer le contenu de chaque page via votre application côté serveur et de faire les redirections correspondantes.</p>

<p>Avec AngularJS, vous pouvez activer simplement le hashbang en ajoutant dans votre <code>app.js</code></p>

<pre class="js"><code>$locationProvider.hashPrefix('!');
</code></pre>

<h3>Etape 2 : Générer les contenus indexables de notre application.</h3>

<p>La méthode la plus simple est d'utiliser les mécanismes de FosRestBundle. Il est possible d'accéder à une ressource de notre API, en requêtant le format HTML.<br />
Par exemple l'URL suivante<br />
http://example.com/api/cocktails.json peut-être aussi consultable en HTML<br />
http://example.com/api/cocktails.html</p>

<p>Tout d'abord activons cette fonctionnalité dans FosRestBundle :</p>

<pre class="no-highlight"><code>#app/config/config.yml
fos_rest:
#...
view:
    templating_formats:
        html: true
        </code>
</pre>


Puis dans le controller, on pourra spécifier le template Twig que nous souhaitons utiliser.

<pre class="language-php">
    <code>
use FOS\RestBundle\Controller\FOSRestController;

class UsersController extends FOSRestController
{
    public function getUsersAction()
    {
        $data = // get data, in this case list of users.
        $view = $this-&gt;view($data, 200)
            -&gt;setTemplate("MyBundle:Users:getUsers.html.twig")
            -&gt;setTemplateVar('users')
        ;

        return $this-&gt;handleView($view);
    }
}
</code></pre>

<h3>Etape 3: Gérer la redirection</h3>

<p>Maintenant que nos pages sont accessibles, il faut que les URLs contenant le paramètre  <code>_escaped_fragment_</code> soit redirigées sur notre API Symfony2.</p>

<p>Ajoutez ces lignes dans votre .htaccess :</p>

<pre class="no-highlight"><code>
RewriteCond %{QUERY_STRING} ^_escaped_fragment_=%2F(.*)$
RewriteRule ^$ api/%1.html [QSA,L]
</code></pre>

<p>Quand le bot arrivera sur http://example.com/#!/ma-page, il consultera maintenant le contenu de http://example.com/seo/ma-page et notre page pourra être référencée.</p>

<p><em>Ca fonctionne aussi pout le crawler de Facebook !</em></p>

<h2>Tip 5 : Gestion des traductions</h2>

<p>AngularJS dispose de son propre système de traduction <a href="http://docs.angularjs.org/guide/i18n">i18n/l10n</a>. Mais Il peut-être intéressant de contrôler et de centraliser ces traductions à partir de votre backend Symfony.</p>

<p>Pour cela, c'est très simple et la manière de faire ressemble beaucoup à la gestion des routes vue précédemment.<br />
Cette fois-ci, on utilise <a href="https://github.com/willdurand/BazingaExposeTranslationBundle">ExposeTranslationBundle</a>.<br />
Reportez vous à l'article du <a href="http://afsy.fr/avent/2013/12-et-si-on-mettait-un-peu-de-symfony-dans-javascript">12 décembre</a> pour son installation.</p>

<p>On pourra alors facilement utiliser l'objet Javascript <code>Translator</code> du bundle dans nos templates AngularJS via un filtre AngularJS.</p>

<pre class="no-highlight"><code>{{'category.list' | trans}}
</code></pre>

<pre class="js"><code>
app.filter('trans', function () {
    return function (input) {
        return Translator.get(input);
    };
});

</code></pre>

<p><strong>Bonus Tip</strong> : <a href="http://jmsyst.com/bundles/JMSTranslationBundle">JMSTranslationBundle</a> pour utiliser une interface de traduction dans Symfony.</p>

<h2>Conclusion</h2>

<p>Voici quelques Tips pour aller plus vite dans l'intégration d'une application AngularJS et d'une API REST en Symfony2.</p>

<p>Les quelques exemples ici sont restés assez simple... Vous l'aurez compris, la séparation de ces deux applications est à réflechir bien en amont. Bien qu'il puisse paraitre plus judicieux de séparer complétement les deux applications, il peut s'avérer intéressant dans certains cas d'avoir plus de souplesse dans cette organisation.</p>
{% endverbatim %}

{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/thibault-maxime.png') }} alt="Avatar Thibault et Maxime" />
{% endblock %}

{% block article_bio %}
<h2>
    <a href="{% block author_url %}http://www.lanetscouade.com{% endblock %}">{% block article_author %}Thibault Pierre et Maxime Teneur{% endblock %}</a>
</h2>
<p>
   <a href="http://www.lanetscouade.com/equipe/thibault-pierre">Thibault</a> et <a href="http://www.lanetscouade.com/equipe/maxime-teneur">Maxime</a> sont développeurs au Lab de l'agence La Netscouade.
   Ils travaillent sur différents types de projets web et mobiles : des dispositifs web de consultation et de débat, aux infographies et webdocumentaires.

   Ils développent et déploient des applications et des API de type REST avec Symfony (...et Drupal, parfois ;p) et les intégrent dans des applications Javascript clientes avec AngularJS.
</p>

{% endblock %}
