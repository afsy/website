{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2013 %}

{% block article_title "Jour 17 - Commencer à adopter la culture Devops sur ses projets Symfony" %}

{% block article_content %}

{% verbatim %}

<h1>Commencer à adopter Devops sur ses projets Symfony</h1>

<p>Devops est le mouvement qui vise à réunir les équipes IT, en particulier les équipes de développement et des opérations, autour d'un objectif commun : améliorer la performance de l'organisation IT au service du métier. Cet article a pour but de démontrer la puissance de ce mouvement et les premières étapes pour adopter la culture Devops sur vos projets Symfony.</p>

<h2>Le besoin d'agilité</h2>

<h3>La vélocité est une nécessité dans le monde du web</h3>

<p>La vitesse est la clef du succès dans l'économie digitale. Ce constat est particulièrement visible dans le monde des Start-ups, où les premiers arrivés sur un marché sont les seuls qui survivent. Mais c'est aussi valable dans les organisations plus traditionnelles où les clients attendent toujours plus de réactivité, portée par les nouvelles technologies. Comme le démontre le livre de Jason Jennings et Laurence Haughton, ce ne sont plus les gros qui mangent les petits mais les rapides qui mangent les lents.<br />
<a href="http://www.amazon.com/gp/aw/d/0066620546"><img src="http://ecx.images-amazon.com/images/I/41OHX-eqG8L.jpg" alt="It is the fast that eat the slow" /></a></p>

<h3>Le goulot d'étranglement est souvent technique</h3>

<p>Souvent le département technique est le goulot d'étranglement qui ralentit l'entreprise : la complexité des projets IT et les risques associés font qu'entre l'idée et son déploiement effectif il peut se passer plusieurs mois. Les méthodes agiles sont une réponse à ce problème. Pour aller plus vite, ces méthodes cherchent à révolutionner l'organisation à l'aide de principes simples :</p>

<ul>
<li>découper les projets en briques minimales utilisables (les user stories),</li>
<li>prioriser chacune de ses briques,</li>
<li>intégrer le porteur du projet dans l'équipe technique pour valider au fur et à mesure,</li>
<li>faire des points réguliers à date fixe (les sprints)</li>
</ul>

<h3>Être agile en développement ne suffit pas</h3>

<p>Mais dans une méthode agile comme Scrum, on peut rapidement se retrouver dans une illusion de vitesse : il ne suffit pas d'itérer vite si ces itérations ne sont pas mises aussi rapidement en production. Et c'est effectivement ce qui se passe dans beaucoup d'organisations, où des équipes de développement qui ont adopté l'agilité se retrouvent à développer très rapidement des évolutions... qui s'empilent devant le département des opérations, ceux qui ont en charge de les mettre en production. En effet, les enjeux sur un projet informatique sont nombreux, et les développeurs oublient souvent ceux qui concernent la production :</p>

<ul>
<li>la disponibilité : backups, monitoring, documentation...</li>
<li>la sécurité</li>
<li>la performance</li>
<li>le cycle de vie : pérennité, scalabilité...</li>
</ul>

<p>Si l'équipe de développement ne s'en est pas préoccupée dans son illusion de rapidité, les évolutions ne peuvent pas aller en production telles quelles et l'organisation peut alors perdre plusieurs mois... C'est ce qu'on constate dans toutes les grandes organisations traditionnelles mais aussi dans beaucoup de startups.</p>

<h2>Le miracle Devops</h2>

<p><img src="/bundles/afsyfront/images/avent/17-devops-logo.png" alt="Logo devops" /></p>

<h3>Devops apporte l'agilité jusqu'à la production</h3>

<p>Le mot Devops est apparu en 2009 sur le blog de <a href="http://www.jedi.be/blog/">Patrick Debois</a> et fédère depuis tous ceux qui s'intéressent à l'agilité au sens large, du développement aux opérations. L'idée principale est que toute l'organisation IT travaille en équipe, en particulier les développeurs avec les opérations, avec un but commun : la performance de l'organisation technique au service du métier. Le mouvement Devops se penche sur trois domaines :</p>

<ul>
<li>les outils, le "comment"</li>
<li>les process, le "quand"</li>
<li>les hommes, le "pourquoi"</li>
</ul>

<p>Devops se retrouve souvent associé à des outils de déploiement continu et de l'approvisionnement (le "provisioning"). Il est impossible pourtant d'être Devops si on ignore la partie humaine qui est au coeur du problème. Les objectifs locaux sont opposés : les équipes de développement doivent apporter rapidement des évolutions alors que les équipes d'opérations doivent garantir la stabilité des systèmes en production. C'est à ce problème que l'on s'attaque, et les outils ne sont qu'une arme parmi d'autres pour réussir à faire travailler ensemble ces équipes naturellement en conflit.</p>

<h3>Des résultats démontrés</h3>

<p>Il est facile aujourd'hui d'avoir des informations sur l'impact qu'a la culture Devops dans les organisations qui l'ont adoptée. On trouve de nombreux témoignages des leaders Devops (Etsy, Flickr, Amazon, Netflix, etc.) sur leurs blogs techniques ou à des conférences comme Velocity. Il existe aussi des études, dont une réalisée en 2013 par PuppetLabs et IT Revolution Press auprès de 4000 ingénieurs devs et ops. Les chiffres sont bluffants ! Les organisations qui disent avoir adopté Devops depuis plus d'un an :</p>

<ul>
<li>ont des temps de déploiement 8000 fois plus courts<br />
<img src="/bundles/afsyfront/images/avent/17-duree.jpg" alt="Temps de déploiement" /></li>
<li>déploient 30 fois plus souvent<br />
<img src="/bundles/afsyfront/images/avent/17-frequence.jpg" alt="Fréquence de déploiement" /></li>
<li>ont 50% de déploiements ratés en moins<br />
<img src="/bundles/afsyfront/images/avent/17-ratages.jpg" alt="Taux d'erreur" /></li>
<li>réagissent 12x plus rapidement en cas de problèmes de déploiement<br />
<img src="/bundles/afsyfront/images/avent/17-resolution.jpg" alt="Temps de résolution" /></li>
</ul>

<p>(Tous les résultats sont dans <a href="http://info.puppetlabs.com/2013-state-of-devops-report.html">l'étude de PuppetLabs</a>)</p>

<p>La question n'est donc pas s'il faut adopter Devops mais comment l'adopter.</p>

<h2>Les 5 étapes pour augmenter son karma Devops sur ses projets Symfony</h2>

<h3>Commencer par l'équipe de dev</h3>

<p>Dans la majorité des organisations IT, même de petite taille, l’équipe de développement est distincte de l’équipe de production et c’est l’équipe de production qui cumule le plus d’expérience.<br />
L’équipe de développement, plus junior en âge et moins aguerrie sur l’ensemble du cycle d’un projet IT, est la moins autonome face aux problèmes inattendus. C’est donc par les devs que nous allons commencer à introduire les bonnes pratiques Devops.</p>

<p>Avant d'introduire des bonnes pratiques ops dans l'équipe de développement, une première étape est déjà d'adopter de bonnes pratiques de développement. Les points suivants sont un pré-requis :</p>

<ul>
<li>environnement de développement Linux</li>
<li>gestion de versions git</li>
<li>gestion de projet agile</li>
<li>tests unitaires et fonctionnels</li>
</ul>

<p>Heureusement dans la communauté Symfony, ces bonnes pratiques de développement sont déjà répandues.<br />
<img src="http://data1.whicdn.com/images/49159051/justin-bieber-40th-anniversary-american-music-awards-07_large.jpg" alt="Un développeur adolescent" /></p>

<p>Attention cependant à ne pas surestimer son niveau : avec ces bonnes pratiques on n'en est encore qu'au stade du développeur adolescent.</p>

<h3>Étape 1 : un bac à sable pour donner aux développeurs l'expérience de la production</h3>

<p>Il est étonnant de constater que la principale différence entre un développeur à l'aise sur la partie opération et un développeur qui en a peur est simplement... l'expérience d'hébergement sur un serveur souvent à titre personnel. Cela peut paraitre évident qu'il faille un terrain de jeu pour apprendre, pourtant beaucoup de développeurs ne possèdent pas de serveur dédié et je n'ai pas rencontré d'organisations qui en fournissait un à titre de bac à sable d'entrainement.</p>

<p>Hors c'est une étape incontournable ! Et il n'est pas très couteux aujourd'hui de s'y mettre. En particulier Amazon propose un <a href="http://aws.amazon.com/free/">serveur EC2 gratuit pendant un an</a> et Online.net un <a href="http://www.online.net/fr/serveur-dedie/dedibox-scg2">serveur dédié à 10€HT par mois</a> donc n'hésitez pas ! Bien sûr on parle ici de serveurs Linux...</p>

<h3>Étape 2 : le déploiement automatisé pour ne pas y passer plus d'une minute</h3>

<p>Une fois qu'on a passé l'étape indispensable d'avoir fait ses armes soit-même sur un serveur Linux, il faut commencer à adopter des bonnes pratiques qui accélèrent le flux des besoins métiers de l'expression à la production.</p>

<p>Les fréquences de déploiement revendiquées par les leaders du mouvement Devops sont beaucoup trop élevées pour permettre plus que quelques minutes d’intervention humaine. Si Netflix ou <a href="https://speakerdeck.com/astanway/bring-the-noise-continuously-deploying-under-a-hailstorm-of-metrics?slide=13">Etsy déploient plus de 30 fois par jour</a>, ou qu’<a href="http://assets.en.oreilly.com/1/event/60/Velocity%20Culture%20Presentation.pdf">Amazon déploie en moyenne toutes les 11 secondes sur des dizaines de milliers de serveur</a>, c’est parce que chaque déploiement est entièrement automatisé.</p>

<p>À l'échelle d'un projet Symfony standard, les deux principaux outils pour automatiser le déploiement sont :</p>

<ul>
<li><a href="http://fabfile.org">Fabric</a></li>
<li><a href="http://capifony.org/">Capifony</a></li>
</ul>

<p>Capifony, comme son nom l'indique est devenu le standard de la communauté Symfony, l'article de demain l'approfondira plus en détails.</p>

<p>Capifony permet d'automatiser très facilement à l'aide d'un fichier de configuration le déploiement. Mais Capifony a l'inconvénient de ses qualités : c'est un outil très magique qui peut devenir une boîte noire pour le développeur junior. C'est sur ce point que Fabric est intéressant car beaucoup plus basique : on se contente ici de scripter les commandes shell qu'on aurait executées sur le serveur. C'est potentiellement plus pédagogique si l'on cherche à diffuser largement le savoir autour des problématiques de production.</p>

<p>Voici un exemple de script de déploiement automatisé Fabric, qui s'exécute avec un simple fab deploy :</p>

<pre class="python"><code>from time import strftime
from fabric.api import *
from fabric.contrib.files import exists

project_name = 'theodo-fr'
env.roledefs = {
    'prod': ['prodserver'],
    'preprod': ['preprodserver']
}

env.use_ssh_config = True

path = {
    'prod': '/theodo/v3.theodo.fr',
    'preprod': '/theodo/preprod.theodo.fr'
}

def theodo(command):
    return sudo(command, user='theodo')

@roles('preprod')
def checkout_project(tag):
    with cd(path[_getrole()]):
        if not exists(path[_getrole()] + '/.git', use_sudo=True):
            theodo('git clone --recursive git@github.com:theodo/theodo-fr.git .')

        theodo('git fetch')
        theodo('git fetch origin --tags')
        theodo('git checkout ' + tag)

@roles('preprod')
def deploy():
    tag = "%s/%s" % (_getrole(), strftime("%Y/%m-%d-%H-%M-%S"))
    local('git tag -a %s -m "%s"' % (tag, _getrole()))
    local('git push --tags')
    checkout_project(tag)

def _getrole():
    for role in env.roledefs:
        if env.host_string in env.roledefs[role]:
            return role

    raise Exception('Role not found')

</code></pre>

<h3>Étape 3 : le monitoring pour détecter instantanément les erreurs en production</h3>

<p>Une fois le déploiement automatisé, il faut réussir à vaincre la peur de déployer très souvent. C'est le rôle du monitoring qui, s'il est bien pensé, vous alertera à la moindre erreur et vous permettra de réagir vite. En effet, le principe "Better ask for forgiveness than permission" accélère beaucoup une organisation... mais n'est durable qu'à condition :</p>

<ul>
<li>de détecter et réparer son erreur rapidement</li>
<li>et d'apprendre pour ne pas la répéter !</li>
</ul>

<p>Ce n'est pas un hasard si StatsD, un outil de monitoring très populaire a été créé par Etsy, l'un des leaders du mouvement Devops. Une <a href="http://www.elao.com/blog/symfony-2/monitor-your-symfony2-application-via-stats-d-and-graphite-22.html">implémentation de Statsd sur un projet Symfony</a> est décrite par Tristan Bessoussa.</p>

<p>Mais il existe encore plus simple aujourd'hui avec des solutions SaaS comme NewRelic et AppsDynamics. <a href="http://blog.newrelic.com/2013/11/18/new-relic-php-agent-now-supports-symfony-2/">NewRelic intègre depuis très récemment un support natif Symfony2</a> encore assez basique mais prometteur.</p>

<p>Ces applications permettent, non seulement d'avoir instantanément des informations critiques de votre application sans effort, mais elles peuvent aussi alerter en cas d'augmentation du nombre d'erreurs. Indispensable pour vérifier que le dernier déploiement n'a pas eu d'impact négatif !</p>

<p><img src="http://newrelic.com/assets/pages/application_monitoring/screens/screen_dashboards-2bd9185b4ba495e9f104b529470ba44f.jpg" alt="Dashboard NewRelic" /></p>

<h3>Étape 4 : l'intégration continue pour détecter les erreurs avant la production</h3>

<p>Bien sûr il est possible de détecter une grande partie des erreurs avant la mise en production. C'est le role de l'intégration continue qui lance l'ensemble des tests unitaires et fonctionnels à chaque commit.</p>

<p>Le pré-requis, comme annoncé précédemment, est l'écriture de tests unitaires et fonctionnels. À titre d'exemple <a href="http://codeascraft.com/2011/04/20/divide-and-concur/">Etsy avait en 2011 plus de 7000 tests</a>. Un bon départ pour commencer est <a href="http://symfony.com/doc/current/book/testing.html">le chapitre sur les tests de la documentation Symfony</a>. Pour aller plus loin, deux sujets souvent épineux quand on commence à faire beaucoup de tests unitaires et fonctionnels :</p>

<ul>
<li><a href="http://www.theodo.fr/blog/2013/08/managing-fixtures/">la gestion des données de tests appelées "fixtures"</a> dont l'absence est souvent le frein à la rédaction de tests utiles</li>
<li>partager les tests entre les équipes de développement, qualité et métier. C'est ce que Behat peut permettre d'atteindre :<br />
<br />
<ul>
<li><a href="http://www.theodo.fr/blog/2013/04/first-steps-with-behat/">comment démarrer l'écriture de tests Behat</a> par Benjmain</li>
<li><a href="{{ url('avent_day', {year: 2013, slug: '15-etendre-behat-pour-y-mettre-son-metier') }}}">comment étendre Behat pour y mettre son métier</a></li>
</ul></li>
</ul>

<p>Pour mettre en place un système d'intégration continue et automatiser le lancement des tests, <a href="http://jenkins-ci.org/">Jenkins</a> est l'outil standard. Il permet d'avoir un tableau de bord très complet sur les métriques du projet :</p>

<p><img src="http://blog.lazycloud.net/wp-content/uploads/2013/03/jenkinsglobal-1024x881.png" alt="Tableau de bord Jenkins" /></p>

<p>Un article de blog assez complet détaille la <a href="http://blog.lazycloud.net/utiliser-jenkins-pour-un-projet-symfony2/">configuration de Jenkins pour un projet Symfony</a>.</p>

<p>Des solutions alternatives existent en SaaS qui permettent d'éviter toutes les étapes d'installation. L'un des premiers est <a href="http://about.travis-ci.org/docs/user/languages/php/">Travis-CI, qui s'est rapidement rapproché de la communauté Symfony</a>. Travis peut s'intégrer avec <a href="https://coveralls.io/docs/supported_continuous_integration">CoverAlls</a> pour offrir en plus la couverture de code.</p>

<p>Le point à retenir est que le bon fonctionnement de l'intégration continue doit être la responsabilité des développeurs. L'existence de solutions SaaS qui rendent la maintenance de l'"usine de développement" triviale ne laisse plus d'excuses.</p>

<h3>Étape 5 : Vagrant pour éviter les incohérences systèmes</h3>

<p>Un dernier élément important pour diminuer les risques est la normalisation des environnements systèmes. Développer, tester et mettre en production sur 3 environnements identiques est la meilleure façon d'éviter les bugs inexpliqués et donc les maux de tête horribles. PHP est un langage heureusement très cohérent entre les différentes plateformes, mais on est jamais à l'abri d'un <a href="https://bugs.php.net/bug.php?id=53632">bug qui n'existe qu'en 32 bits</a> par exemple. Il n'y a aucune raison que le temps passé par l'application en développement, en testing et en recette soit dans un environnement qui ne garantisse pas la reproductibilité des erreurs.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Vagrant.png/197px-Vagrant.png" alt="Logo Vagrant" /></p>

<p>Pour cela la solution standard est <a href="http://www.vagrantup.com/">Vagrant</a>. C'est un outil qui permet de gérer très facilement la configuration d'une machine virtuelle propre à son projet. Paul Seiffert maintient une <a href="https://github.com/seiffert/default-vagrant">configuration Vagrant qu'il utilise sur ses projets PHP</a> qui est un bon départ pour démarrer son utilisation de Vagrant.</p>

<p>Un point important, pour ne pas être déçu par les performances de Vagrant, est d'<a href="http://www.whitewashing.de/2013/08/19/speedup_symfony2_on_vagrant_boxes.html">optimiser son projet Symfony2 pour Vagrant</a>. Les quelques astuces décrites par Benjamin Eberlei sur son blog permettent de gagner un facteur 5 sur des requêtes Symfony2 en environnement de développement. Indispensables !</p>

<h2>Devops au-delà de Symfony</h2>

<p>Automatiser le déploiement permet d'accélérer techniquement la mise en production. Le monitoring, l'intégration continue et la normalisation des environnements permettent de diminuer les risques et donc d'accélérer concrètement dans une organisation les étapes du besoin jusqu'à la production.</p>

<p>Les étapes abordées ne concernent cependant que l'équipe de développement pour l'instant. La culture Devops s'étend bien au-delà et beaucoup d'autres étapes sont nécessaires, dont beaucoup à présent côté équipe de production. Ces étapes concernent tous les projets webs et sont agnostiques de l'utilisation de Symfony ou non :</p>

<ul>
<li>Automatiser la configuration de l'infrastructure (Provisioning)</li>
<li>Permettre le self-service dans l'infrastructure (IaaS)</li>
<li>Faciliter les backups</li>
<li>Permettre le self-service sur les tests de montée en charge</li>
<li>Introduire le pair-devopsing entre devs et ops</li>
<li>S'inspirer des méthodes lean et généraliser le management visuel</li>
<li>Intégrer les développeurs dans l'escalade des astreintes</li>
</ul>

<p>Et l'adoption Devops ne s'arrête pas là, car avant toute chose, l'amélioration continue est un pilier de la culture Devops. Toutes ces étapes doivent être suivies dans cette logique, c'est à dire :</p>

<ul>
<li>avec des mesures quantitatives partout où c'est possible et même là où ça ne le semble pas à première vue</li>
<li>en attaquant les problèmes prioritaires, identifiés grâce à l'analyse des mesures obtenues</li>
<li>en testant des hypothèses de résolution</li>
<li>et en itérant ainsi en continu</li>
</ul>

<p>Pour aller plus loin, cet article est issu de ma conférence <a href="http://joind.in/talk/view/9426">The Devops Wonder</a> au Symfony Live Berlin. La présentation approfondit les étapes évoquées en conclusion.</p>

<p>Ensuite le plus efficace pour explorer ce sujet encore très jeune est d'échanger avec les passionnés de Devops.<br />
<img src="http://devopsdays.org/events/2013-paris/paris-love-devops.png" alt="DevopsDays Paris" /></p>

<p>Vous nous retrouverez dans des meetups comme le <a href="http://parisdevops.fr/">meetup Paris Devops</a>, lors des conférences <a href="http://devopsdays.org/">DevopsDays</a> organisées partout dans le monde ou à la <a href="http://velocityconf.com/">Velocity Conference</a>. J'espère vous y rencontrer nombreux !</p>

{% endverbatim %}

{% endblock %}
{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/17-fabrice.png') }}" alt="Avatar Fabrice" />
{% endblock %}
{% block article_bio %}
<h2>
    <a href="{% block author_url %}http://www.theodo.fr{% endblock %}">{% block article_author %}Fabrice Bernhard{% endblock %}</a>
</h2>
<p>
   <a href="http://twitter.com/theodo">Fabrice</a> est co-fondateur et directeur technique de
   <a href="http://www.theodo.fr">Theodo</a>, une équipe de développement agile spécialisée sur Symfony2 et Node.js.
   Il est aussi directeur technique d'<a href="http://www.allomatch.com">Allomatch</a>,
   le moteur de recherche des matchs diffusés dans les bars.
   Cette double-casquette a permis d'acquérir une expérience unique dans la maintenance et l'évolution d'applications
   PHP à grande échelle, qui a été la clef dans son implication dans le mouvement Devops dès 2010.
</p>

{% endblock %}
