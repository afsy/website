{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 20 - Intégrer Elasticsearch 6 dans votre application Symfony 4" %}

{% block article_content %}
    <style type="text/css">
        em {
            font-family: sans-serif;
        }
    </style>

    <h1>Intégrer Elasticsearch 6 dans votre application Symfony 4</h1>

    <p>Depuis <a href='https://afsy.fr/avent/2013/20-elasticsearch-dans-votre-Symfony2'>l&#39;article du même nom écrit en
            2013</a>, beaucoup de choses ont bougé dans l&#39;écosystème, aussi bien côté Elasticsearch que Symfony.</p>
    <p>Aujourd&#39;hui Elasticsearch est très utilisé en stockage de log, monitoring et analyses statistiques, et toujours
        bien sûr en outil de <strong>recherche <span lang="en">full-text</span></strong>. Mais attention, il n&#39;est qu&#39;un outil et sans
        maîtrise, sa puissance n&#39;est rien ©.</p>
    <p>Cet article s&#39;adresse à vous si vous avez fait le choix d&#39;Elastic et que vous souhaitez partir du bon pied ou
        valider son implémentation dans une application Symfony 4.</p>

    <p>
        <img src="{{ asset('bundles/afsyfront/images/avent/2017/20/elastic-symfony-love.png') }}"
             alt="Symfony et Elasticsearch = Love" />
    </p>

    <h2>Elasticsearch ? Jamais entendu parlé !</h2>

    <p><em>Cette section s&#39;adresse aux lecteurs qui ne connaissent pas le moteur !</em></p>
    <p>Elasticsearch est un index de recherche gratuit et <span lang="en">Open Source</span> développé Java.
        Semblable à une base de données <abbr title="Not Only SQL" lang="en">NoSQL</abbr>, il a la
        particularité d&#39;indexer toutes les données de vos documents, via Lucene. Un document y est représenté en
        <strong><abbr title="JavaScript Object Notation" lang="en">JSON</abbr></strong>, et la communication entre le moteur et votre application se fait en <strong><abbr title="HyperText Transfer Protocol" lang="en">HTTP</abbr></strong>, ce
        qui le rend compatible avec n&#39;importe quelle infrastructure.</p>
    <p>Les recherches se font avec un <strong>Query <abbr title="Domain Specific Language" lang="en">DSL</abbr></strong> lui aussi en JSON.
        Il permet de réaliser des recherches complexes, imbriquées, scriptées et toutes sortes d&#39;opérations classiques : pagination, <span lang="en">highlight</span>, statistiques etc.
    </p>
    <p>Son intérêt est d&#39;être très rapide et d&#39;être très facilement distribuable sur plusieurs machines. Il est
        aussi capable de calculer des statistiques, et dispose de toute une suite logicielle complémentaire (tableaux de bord,
        <span lang="en">machine learning</span>, hébergement…).</p>
    <p>Aujourd&#39;hui il est mis en place dans de très nombreux projets Web, car sa souplesse permet d&#39;implémenter
        pratiquement tout.</p>

    <h2>Quelle librairie PHP choisir ?</h2>

    <p>Il existe de nombreuses librairies et <span lang="en">bundles</span> pour intégrer Elasticsearch dans Symfony. Il y a 4 ans je recommandais
        <strong>FOSElasticaBundle</strong>, le choix n&#39;est plus aussi simple aujourd&#39;hui.</p>
    <ul>
        <li>
            <a href='https://packagist.org/packages/elasticsearch/elasticsearch'>elasticsearch/elasticsearch</a> : Le client
            PHP officiel, développé par les équipes d&#39;Elastic. Il est bas niveau, c&#39;est-à-dire qu&#39;il va très
            bien gérer l&#39;ensemble des <abbr title="Application Programming Interface">API</abbr> et des appels HTTP mais vous devez produire les JSON de recherche vous même.
            Son gros point fort c&#39;est <a
                    href='https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html'>sa documentation</a>
            qui est la seule à être complète. C&#39;est aussi la seule librairie qui est compatible à 100% avec
            Elasticsearch 6<sup><a href='#dfref-footnote-1' name='ref-footnote-1'>1</a></sup> ;
        </li>

        <li>
            <a href='https://packagist.org/packages/ruflin/elastica'>ruflin/elastica</a> : Librairie d&#39;abstraction objet
            pour l&#39;ensemble des API et requêtes d&#39;Elasticsearch. Elle permet de manipuler des objets PHP plutôt que
            des tableaux pour créer les requêtes de recherche en JSON. Elle s&#39;occupe aussi de communiquer avec le client
            officiel (même si ce n&#39;est <a href="https://github.com/ruflin/Elastica/pull/989">pas encore parfait</a>) ;
        </li>
        <li>
            <a href='https://packagist.org/packages/ongr/elasticsearch-dsl'>ongr/elasticsearch-dsl</a> : Cette librairie est
            proche d&#39;Elastica, elle modélise l&#39;ensemble des clauses du Query DSL et utilise la librairie officielle
            comme support HTTP. Sa <a href='http://docs.ongr.io/ElasticsearchDSL'>documentation</a> est très complète et un
            <a href='https://github.com/ongr-io/ElasticsearchBundle'><span lang="en">bundle</span></a> est aussi disponible. L&#39;interface est
            différente et nécessite de passer par des constructeurs et des méthodes très génériques
            (<code>addParameter</code>), ce qui la place en dessous d&#39;Elastica dans mon c&oelig;ur ;
        </li>
        <li>
            <a href='https://packagist.org/packages/friendsofsymfony/elastica-bundle'>friendsofsymfony/elastica-bundle</a> :
            il s&#39;agit du <span lang="en">bundle</span> le plus connu, il embarque Elastica et y ajoute toute la glue pour Symfony : écouteurs d'événements,
            commandes de gestion, <span lang="en">repositories</span>, configuration et support complet de Doctrine. Par contre il n&#39;est pas
            parfait : accumulation de gros retards sur Elastica, très peu de versions publiées (La <a
                    href='https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/master/CHANGELOG-5.0.md'>version 5 du
                <span lang="en">bundle</span></a> vient enfin de sortir, <a href='https://twitter.com/TobiasSchultze/status/942813412853198849'>merci
                Tobion</a> !), tentative de valider la <a
                    href='https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/master/src/DependencyInjection/Configuration.php#L103'>configuration d&#39;Elasticsearch</a> vaine et source d&#39;incompatibilité…
            Il s&#39;agit d&#39;un <span lang="en">bundle</span> très pratique pour débuter et pour les projets de taille modeste. Sa compatibilité
            transparente avec Doctrine permet de récupérer des entités plutôt que les JSON du moteur, et de pousser
            automatiquement les modifications de votre base de données dans le moteur. Sur des projets plus gros ou
            contraignants il est cependant préférable de ne pas utiliser ces fonctionnalités pour des raisons de performances et
            de charge - elle font la promotion de mauvaises pratiques. Implémenter soit même Elasticsearch permet de mieux
            coller aux spécificités de votre projet.
        </li>
    </ul>
    <p>Vous l&#39;aurez compris, <strong>Elastica</strong> est une référence. Il est simple, plutôt complet et ne va pas
        nous limiter dans nos actions. Il existe des <a href='https://packagist.org/?q=elastic&amp;p=0'>centaines de paquets</a>
        pour communiquer avec Elasticsearch, mais souvenez-vous qu&#39;à la fin il ne s&#39;agit que d&#39;une API HTTP.
        Nous allons étudier dans cet article l&#39;implémentation idéale pour une application de type blog, mais vous
        pourrez l&#39;adapter simplement pour d&#39;autres besoins.</p>

    <h2>Exemple d&#39;implémentation</h2>

    <h3>Installer la <abbr title="démonstration">démo</abbr> de Symfony 4 et Elastica</h3>

    <p>Pour notre exemple nous utiliserons l&#39;application <a href='https://github.com/symfony/demo'>démo de
            Symfony</a> : il s&#39;agit d&#39;un blog avec interface d'administration, commentaires et <strong>recherche</strong>&nbsp;! Nous installons aussi les dépendances de base :</p>

    <pre><code class="language-bash">$ composer create-project symfony/symfony-demo
$ composer require maker
$ composer require ruflin/elastica</code></pre>

    <p>
        <img src="{{ asset('bundles/afsyfront/images/avent/2017/20/demo-symfony.png') }}" alt="Démo de Symfony 4" />
    </p>

    <p>Cette application expose une page de recherche fonctionnant avec une requête SQL
        classique en <strong lang="en">LIKE</strong> dans les titres de page :</p>

    <pre><code class="language-php">/**
 * @Route(&quot;/search&quot;, name=&quot;blog_search&quot;)
 * @Method(&quot;GET&quot;)
 */
public function search(Request $request, PostRepository $posts): Response
{
    // ...
    $foundPosts = $posts-&gt;findBySearchQuery($query, $limit);

    $results = [];
    foreach ($foundPosts as $post) {
        $results[] = [
            &#39;title&#39; =&gt; htmlspecialchars($post-&gt;getTitle()),
            &#39;date&#39; =&gt; $post-&gt;getPublishedAt()-&gt;format(&#39;M d, Y&#39;),
            &#39;author&#39; =&gt; htmlspecialchars($post-&gt;getAuthor()-&gt;getFullName()),
            &#39;summary&#39; =&gt; htmlspecialchars($post-&gt;getSummary()),
            &#39;url&#39; =&gt; $this-&gt;generateUrl(&#39;blog_post&#39;, [&#39;slug&#39; =&gt; $post-&gt;getSlug()]),
        ];
    }

    return $this-&gt;json($results);
}

// PostRepository.php

foreach ($searchTerms as $key =&gt; $term) {
    $queryBuilder
        -&gt;orWhere(&#39;p.title LIKE :t_&#39;.$key)
        -&gt;setParameter(&#39;t_&#39;.$key, &#39;%&#39;.$term.&#39;%&#39;)
    ;
}</code></pre>

    <p>Le code fait actuellement appel à la base de donnée via <code>PostRepository::findBySearchQuery</code>, nous allons
        utiliser Elasticsearch à la place !</p>
    <ul>
        <li>
            Les temps de réponse ne seront plus proportionnels à la quantité d&#39;articles ;
        </li>
        <li>
            La recherche sera plus fine, avec support des pluriels, des racines de mot, etc. ;
        </li>
        <li>
            Nous pourrons trier les réponses par pertinence contrairement à la requête SQL.
        </li>
    </ul>
    <h3>Installer Elasticsearch</h3>
    <p>Je ne ferai ici pas mieux que la <a
                href='https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html'>documentation
            officielle</a> d&#39;Elastic. Mais si vous voulez allez vite :</p>

    <pre><code class="language-yaml">version: &#39;2&#39;
services:
    # Blablabla, ngnix et PHP si vous voulez

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.0.1
        environment:
           - cluster.name=demo
           - bootstrap.memory_lock=true
           - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
            - 9200:9200

    kibana:
        image: docker.elastic.co/kibana/kibana:6.0.1
        links:
            - elasticsearch
        ports:
            - 5601:5601</code></pre>
    <p>​Rien de plus simple qu&#39;un petit <code>docker-compose up</code> 😜 !</p>
    <h3>Créer l&#39;index et le <em lang="en">mapping</em></h3>
    <p>Avant de pouvoir faire des recherches, nous devrons indexer les articles. Cela implique aussi de créer un index
        et de déclarer un <span lang="en">mapping</span> (<em>le moteur permet de se passer de
            la création de l&#39;index, grace à son <span lang="en">mapping</span>
            automatique, que je vous recommande fortement de désactiver !</em>).</p>
    <p>Un <span lang="en">mapping</span> est simplement la déclaration des champs de votre document JSON - est-ce du texte, du booléen... - et la
        configuration de l&#39;index inversé : souhaitez-vous analyser ce texte ? Cette date ? Ce slug ? Pour chaque champ
        vous devez prendre une décision en fonction de vos besoins :</p>
    <ul>
        <li>
            Allez-vous faire des recherches dans ce champ ?
        </li>
        <li>
            Allez-vous faire des statistiques ? Des recherches binaires ?
        </li>
        <li>
            Connaissez-vous la langue du contenu ?
        </li>
    </ul>
    <p>Ce <span lang="en">mapping</span> doit être déclaré à la création de l&#39;index et il s&#39;envoie sous la forme d&#39;un JSON à
        Elasticsearch ; je déconseille cependant de stocker ce <span lang="en">mapping</span> au format JSON dans votre code :</p>
    <ul>
        <li>
            Vous ne pourrez pas le rendre dynamique ;
        </li>
        <li>
            Vous ne pouvez pas y mettre de commentaires ;
        </li>
        <li>
            Ce n&#39;est pas une syntaxe faite pour être écrite à la main !
        </li>
    </ul>
    <p>Préfèrez donc le <abbr title="Yet Another Markup Language">YAML</abbr> ou le PHP pour configurer votre <span lang="en">mapping</span>. Nous allons utiliser cette configuration :</p>

    <pre><code class="language-yaml">settings:
    index:
        # single node, no sharding
        number_of_shards: 1
        number_of_replicas: 0
mappings:
    articles:
        dynamic: false # disable dynamic mapping
        properties:
            title: &amp;en_text
                type: text
                analyzer: english
            summary: *en_text
            author: *en_text
            content: *en_text</code></pre>

    <p>Vous trouvez ici la configuration de l&#39;index et la déclaration du <span lang="en">mapping</span> de notre &quot;article&quot;. Remarquez
        <strong>l&#39;utilisation d&#39;ancre YAML</strong>, bien pratique pour ne pas dupliquer une déclaration ! Nous
        précisions à Elasticsearch qu&#39;il faut utiliser l&#39;<span lang="en">analyzer</span>
        <strong lang="en">english</strong> sur les champs <strong lang="en">title</strong>,
        <strong lang="en">summary</strong>, <strong lang="en">author</strong> et <strong lang="en">content</strong>.
        Tous les autres champs seront ignorés grace à l&#39;option <strong lang="en">dynamic</strong>.</p>
    <p>Exploiter ce document pour créer l&#39;index se fait très simplement avec une classe dédiée à la construction d&#39;Index&nbsp;:</p>

    <pre><code class="language-php">namespace App\Elasticsearch;

use Elastica\Client;
use Symfony\Component\Yaml\Yaml;

class IndexBuilder
{
    private $client;

    public function __construct(Client $client)
    {
        $this-&gt;client = $client;
    }

    public function create()
    {
        // We name our index &quot;blog&quot;
        $index = $this-&gt;client-&gt;getIndex(&#39;blog&#39;);

        $settings = Yaml::parse(
          file_get_contents(
            __DIR__.&#39;/../../config/elasticsearch_index_blog.yaml&#39;
          )
        );

        // We build our index settings and mapping
        $index-&gt;create($settings, true);

        return $index;
    }
}</code></pre>

    <p>Pour que notre classe <code>Client</code> soit injectée nous l&#39;avons déclarée manuellement :</p>

    <pre><code class="language-yaml">services:
    Elastica\Client:
        $config:
            host: &#39;elasticsearch&#39; # ou 127.0.0.1</code></pre>

    <h3>Indexer les articles</h3>
    <p>Avec Elastica, nous devrons créer des <code>Elastica\Document</code> et les envoyer dans notre <code>Elastica\Index</code>.
        Pour ce faire nous utiliserons la méthode <code>addDocuments</code> et non pas <code>addDocument</code> ; la
        différence est de taille, car la première exploite la <a
                href='https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html'>BULK API</a> pour
        envoyer tous vos documents en un seul appel HTTP, alors que la seconde fera un appel par document et donc être
        beaucoup plus longue.</p>
    <p>L&#39;autre point d&#39;importance concernant vos <code>Document</code> est l&#39;ID : il est facultatif dans Elasticsearch mais
        si vous voulez retrouver vos articles de blog un jour pour les mettre à jour... Définisez-le à la main !</p>

    <pre><code class="language-php">namespace App\Elasticsearch;

use App\Entity\Post;
use App\Repository\PostRepository;
use Elastica\Client;
use Elastica\Document;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

class ArticleIndexer
{
    private $client;
    private $postRepository;
    private $router;

    public function __construct(Client $client, PostRepository $postRepository, UrlGeneratorInterface $router)
    {
        $this-&gt;client = $client;
        $this-&gt;postRepository = $postRepository;
        $this-&gt;router = $router;
    }

    public function buildDocument(Post $post)
    {
        return new Document(
            $post-&gt;getId(), // Manualy defined ID
            [
                &#39;title&#39; =&gt; $post-&gt;getTitle(),
                &#39;summary&#39; =&gt; $post-&gt;getSummary(),
                &#39;author&#39; =&gt; $post-&gt;getAuthor()-&gt;getFullName(),
                &#39;content&#39; =&gt; $post-&gt;getContent(),

                // Not indexed but needed for display
                &#39;url&#39; =&gt; $this-&gt;router-&gt;generate(&#39;blog_post&#39;, [&#39;slug&#39; =&gt; $post-&gt;getSlug()], UrlGeneratorInterface::ABSOLUTE_PATH),
                &#39;date&#39; =&gt; $post-&gt;getPublishedAt()-&gt;format(&#39;M d, Y&#39;),
            ],
            &quot;article&quot; // Types are deprecrated, to be removed in Elastic 7
        );
    }

    public function indexAllDocuments($indexName)
    {
        $allPosts = $this-&gt;postRepository-&gt;findAll();
        $index = $this-&gt;client-&gt;getIndex($indexName);

        $documents = [];
        foreach ($allPosts as $post) {
            $documents[] = $this-&gt;buildDocument($post);
        }

        $index-&gt;addDocuments($documents);
        $index-&gt;refresh();
    }
}</code></pre>

    <p>Vous remarquerez que <code>indexAllDocuments</code> accepte un <code>$indexName</code> : il est très important
        pour la suite, quand vous aurez plusieurs versions de votre index simultanément en production !</p>
    <p>Remarquez aussi que nous envoyons dans l&#39;index <strong>des champs non indexés</strong> (car non présents dans le
        <span lang="en">mapping</span>), c&#39;est voulu ! Ils seront nécessaires pour l&#39;affichage de nos résultats mais pas pour nos recherches. Sentez-vous libre d&#39;ajouter autant de champs que vous le voulez s'ils ne sont pas indexés.</p>
    <p>⚠️ : Cet indexeur ne gère pas les erreurs et le <code>refresh_interval</code> ! Voir à la fin de l&#39;article.</p>
    <h3>Un peu de glue !</h3>
    <p>Nous allons développer une commande Symfony qui crée l&#39;index et l'alimenter avec Elastica (bien sûr on se fait aider par <code>MakerBundle</code> !).</p>

    <pre><code class="language-bash">$ ./bin/console make:command elastic:reindex</code></pre>

    <pre><code class="language-php">namespace App\Command;

use App\Elasticsearch\ArticleIndexer;
use App\Elasticsearch\IndexBuilder;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

class ElasticReindexCommand extends Command
{
    protected static $defaultName = &#39;elastic:reindex&#39;;

    private $indexBuilder;
    private $articleIndexer;

    public function __construct(IndexBuilder $indexBuilder, ArticleIndexer $articleIndexer)
    {
        $this-&gt;indexBuilder = $indexBuilder;
        $this-&gt;articleIndexer = $articleIndexer;

        parent::__construct();
    }

    protected function configure()
    {
        $this
            -&gt;setDescription(&#39;Rebuild the Index and populate it.&#39;)
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $io = new SymfonyStyle($input, $output);

        $index = $this-&gt;indexBuilder-&gt;create();

        $io-&gt;success(&#39;Index created!&#39;);

        $this-&gt;articleIndexer-&gt;indexAllDocuments($index-&gt;getName());

        $io-&gt;success(&#39;Index populated and ready!&#39;);
    }
}</code></pre>
    <p>Tout est prêt, nous créons l&#39;index avec notre <code>IndexBuilder</code>, puis nous y envoyons tous les articles
        via <code>ArticleIndexer</code> :</p>

    <pre><code class="language-bash">$ ./bin/console elastic:reindex</code></pre>
    <p>Vous pouvez vous rendre dans Kibana et vérifier que tout est en ordre :</p>

    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/20/kibana6-devtools.png') }}" alt='Kibana Dev Tools'/></p>

    <p>Nos documents Elasticsearch ressemblent à cela :</p>

    <pre><code class="language-json">{
  &quot;_index&quot;: &quot;blog&quot;,
  &quot;_type&quot;: &quot;article&quot;,
  &quot;_id&quot;: &quot;13&quot;,
  &quot;_source&quot;: {
    &quot;title&quot;: &quot;Sed varius a risus eget aliquam&quot;,
    &quot;summary&quot;: &quot;Ut suscipit posuere justo at ...&quot;,
    &quot;author&quot;: &quot;Tom Doe&quot;,
    &quot;content&quot;: &quot;Lorem ipsum dolor sit amet consectetur...&quot;,
    &quot;url&quot;: &quot;/en/blog/posts/aliquam-sodales-odio-id-eleifend-tristique&quot;,
    &quot;date&quot;: &quot;Nov 27, 2017&quot;
  }
}</code></pre>

    <p>Le <code>_source</code> contient l&#39;ensemble des champs envoyés, même si seuls les 4 premiers champs sont
        mappés et indexés.</p>
    <h3>Rechercher dans les articles</h3>
    <p>Avec l&#39;aide de la console Kibana, nous allons maintenant créer notre requête de recherche. Il n&#39;existe pas de
        requête parfaite et l&#39;exercice est toujours délicat, mais essayez toujours d&#39;avoir un bon compromis entre
        collecte et pertinence :</p>
    <ul>
        <li>
            Avoir un maximum de documents (être très permissif sur les coquilles...) ;
        </li>
        <li>
            Ajouter des critères de pertinence pour que les premiers résultats soient les plus précis.
        </li>
    </ul>
    <p>Nous n&#39;avons pas la place aujourd&#39;hui d&#39;approfondir ces sujets, et je vous renvoie donc vers cet article :
        <a href='https://jolicode.com/blog/construire-un-bon-analyzer-francais-pour-elasticsearch'>construire un <code>analyzer</code> Français</a>.</p>
    <p>Ici la requête sera toute simple ! Nous souhaitons rechecher dans les champs textuels et donner un peu plus de poids au
        titre de l&#39;article.</p>

    <pre><code class="language-json">GET blog/_search
{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;multi_match&quot;: {
            &quot;query&quot;: &quot;Aliquam erat volutpat&quot;,
            &quot;fields&quot;: [
              &quot;title^4&quot;,
              &quot;summary&quot;,
              &quot;content&quot;,
              &quot;author&quot;
            ]
          }
        }
      ]
    }
  }
}</code></pre>

    <p>Pour traduire cette recherche Elasticsearch en objet Elastica, la technique est d&#39;aller de droite à gauche dans l&#39;imbrication.
        Nous commençons par une clause <code>MultiMatch</code>, que nous passons à l&#39;option <code>must</code> de la
        clause <code>Bool</code>, que nous passons à l&#39;objet <code>Query</code>. Ce qui donne :</p>

<pre><code class="language-php">use Elastica\Query;
use Elastica\Query\BoolQuery;
use Elastica\Query\MultiMatch;

$match = new MultiMatch();
$match-&gt;setQuery($query);
$match-&gt;setFields([&quot;title^4&quot;, &quot;summary&quot;, &quot;content&quot;, &quot;author&quot;]);

$bool = new BoolQuery();
$bool-&gt;addMust($match);

$elasticaQuery = new Query($bool);</code></pre>
    <p>Pour lancer cette recherche dans Elasticsearch nous réécrivons donc une partie du contrôleur étudié dans l'introduction&nbsp;:</p>
<pre><code class="language-php">$elasticaQuery-&gt;setSize($limit);
$foundPosts = $client-&gt;getIndex(&#39;blog&#39;)-&gt;search($elasticaQuery);
$results = [];
foreach ($foundPosts as $post) {
    $results[] = $post-&gt;getSource();
}</code></pre>

    <p>L&#39;action complète :</p>

<pre><code class="language-php">/**
 * @Route(&quot;/search&quot;, name=&quot;blog_search&quot;)
 * @Method(&quot;GET&quot;)
 */
public function search(Request $request, Client $client): Response
{
    if (!$request-&gt;isXmlHttpRequest()) {
        return $this-&gt;render(&#39;blog/search.html.twig&#39;);
    }

    $query = $request-&gt;query-&gt;get(&#39;q&#39;, &#39;&#39;);
    $limit = $request-&gt;query-&gt;get(&#39;l&#39;, 10);

    $match = new MultiMatch();
    $match-&gt;setQuery($query);
    $match-&gt;setFields([&quot;title^4&quot;, &quot;summary&quot;, &quot;content&quot;, &quot;author&quot;]);

    $bool = new BoolQuery();
    $bool-&gt;addMust($match);

    $elasticaQuery = new Query($bool);
    $elasticaQuery-&gt;setSize($limit);

    $foundPosts = $client-&gt;getIndex(&#39;blog&#39;)-&gt;search($elasticaQuery);
    $results = [];
    foreach ($foundPosts as $post) {
        $results[] = $post-&gt;getSource();
    }

    return $this-&gt;json($results);
}</code></pre>

    <p>Bien sûr dans un projet plus complet vous voudrez mutualiser les clauses de recherche, vous pouvez vous inspirer
        des repository Doctrine.</p>
    <p>Et voilà notre recherche branchée sur Elasticsearch :</p>

    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/20/demo-search.gif') }}" alt='Démo recherche dans Symfony'/></p>

    <h2>L&#39;outillage et les améliorations nécessaires</h2>
    <p>Pour les besoins de l&#39;article notre <strong>Indexer</strong> est volontairement simplifié ; mais dans le monde
        réel vous devrez gérer plusieurs choses&nbsp;:</p>
    <ul>
        <li>
            Réduire le <code>refresh_interval</code> lors d&#39;une indexation massive (<code>$index-&gt;getSettings()-&gt;setRefreshInterval(&#39;60s&#39;);</code>)
            ;
        </li>
        <li>
            Gérer les bulks plus finement pour envoyer des paquets de taille ajustable, et gérer les opérations de
            suppression ;
        </li>
        <li>
            Gérer les erreurs des requêtes <code>_bulk</code>&nbsp;: l&#39;API répond toujours 200 sur ce endpoint et c&#39;est à vous de lire
            la réponse...
        </li>
    </ul>
    <p>En production vous devrez aussi gérer les <strong>mises à jour de <span lang="en">mapping</span></strong>. Pour ce faire vous aurez besoin de <strong>versionner vos index</strong> et d&#39;utiliser des alias pour faire pointer votre applicatif vers le bon
        index.</p>
    <p>Mettre à jour le <span lang="en">mapping</span> signifie aussi ré-indexer vos contenus ! Si vos JSON ne changent pas, automatisez le tout
        avec la <strong><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0/docs-reindex.html">Reindex API</a></strong> :</p>

<pre><code class="language-php">$indexManager-&gt;slowDownRefresh($newIndex);

$reindex = new Reindex($oldIndex, $newIndex, [
  &#39;wait_for_completion&#39; =&gt; true,
  &#39;timeout&#39; =&gt; &#39;30s&#39;,
]);
$reindex-&gt;run();

$newIndex-&gt;refresh();
$indexManager-&gt;speedUpRefresh($newIndex);</code></pre>

    <p>Ce code permet d&#39;envoyer tous les documents d&#39;un index se faire indexer dans un autre index, vous
        économiserez tout le temps que prendrait votre applicatif à re-générer les documents !</p>
    <p>Une fois ce nouvel index alimenté vous devrez <strong>déplacer un alias sans interruption</strong>, comme ceci :</p>


    <pre><code class="language-php">$data = [&#39;actions&#39; =&gt; []];
$data[&#39;actions&#39;][] = [&#39;remove&#39; =&gt; [&#39;index&#39; =&gt; &#39;*&#39;, &#39;alias&#39; =&gt; &#39;blog_search&#39;]];
$data[&#39;actions&#39;][] = [&#39;add&#39; =&gt; [&#39;index&#39; =&gt; &#39;blog_v7&#39;, &#39;alias&#39; =&gt; &#39;blog_search&#39;]];

return $this-&gt;client-&gt;request(&#39;_aliases&#39;, Request::POST, $data);</code></pre>


    <p>La gestion d&#39;index par alias est un <span lang="en">must-have</span> en production, je vous invite à lire <a
                href='https://www.elastic.co/guide/en/elasticsearch/guide/current/index-aliases.html'>cette documentation pour
            en apprendre davantage</a>.</p>
    <p><strong>Outillez votre infrastructure</strong> : j&#39;ai vu trop de développeurs écrire leurs requêtes
        dans Postman, Sense ou Curl ! Installez Kibana et vous ne le regretterez pas. Profitez-en pour <a
                href='https://github.com/lmenezes/cerebro'>installer Cerebro</a>, qui remplace Kopf, Head et tous les
        plugins &quot;sites&quot; qui ont disparu d&#39;Elasticsearch en version 5.</p>
    <p>Pour finir, ne réinventez plus la roue, il est inutile de créer des dizaines de commandes Symfony pour gérer
        votre <span lang="en">cluster</span>, je vous recommande plutôt de <strong>prendre en main <a href='https://github.com/elastic/curator'>Curator</a></strong>,
        qui est un outil officiel !</p>
    <p>J&#39;espère que cet article vous aura aidé à y voir plus clair sur les tenants et aboutissants de l&#39;utilisation
        d&#39;Elasticsearch dans vos projets, et je terminerai en vous souhaitant de bonnes fêtes !</p>

    <div class="footnotes">
        <hr />
        <ol>
            <li id="fn:1">
                <p>
                    Les <a href='https://jolicode.com/blog/devez-vous-migrer-vers-elasticsearch-6'>nouveautés d&#39;Elasticsearch 6</a> en français<a name='dfref-footnote-1' href='#ref-footnote-1' title='back to document' class='reversefootnote'>↩</a>
                </p>
            </li>

        </ol>
    </div>
{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/damien-alexandre.png') }}" alt="Damien ALEXANDRE"/>
{% endblock %}

{% block article_bio %}
    <h2><a href="{% block author_url 'https://twitter.com/damienalexandre' %}" target="_blank">
            {% block article_author 'Damien Alexandre' %}</a></h2>

    <p>Damien est consultant senior chez <a href='https://jolicode.com'>JoliCode</a> à Paris ; où il met ses
        années d&#39;expérience sur Elastic et PHP au service des clients. <a href='https://damienalexandre.fr/'>Orateur à
            de nombreux évenements</a> il aime partager la connaissance et dispense aussi des <a
                href='https://jolicampus.com/formations/elasticsearch'>formations et expertises Elasticsearch</a>. Suivez le à <a
                href='https://twitter.com/damienalexandre'>@damienalexandre</a>.</p>

{% endblock %}
