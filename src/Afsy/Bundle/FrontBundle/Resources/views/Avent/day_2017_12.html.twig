{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 12 - Serverless, PHP et Symfony" %}

{% block article_content %}
    <style type="text/css">
        em {
            font-family: sans-serif;
        }
    </style>
    <h1 id="serverless-php-et-symfony">Serverless, PHP et Symfony</h1>

    <p>
        Depuis une dizaine d’années, le monde du déploiement et de l’hébergement
        d’applications web change à une vitesse phénoménale. L’arrivée de
        <abbr title="Amazon Web Services" lang="en">AWS</abbr> et
        de leurs <abbr title="Virtual Machine" lang="en">VM</abbr>s en deux
        clics, puis l’arrivée de <abbr title="Platform as a Service" lang="en">PaaS</abbr>
        comme Heroku (d'ailleurs, consultez
        <a href="https://afsy.fr/avent/2017/03-deployer-un-projet-symfony-flex-sur-heroku">l'article d'Alex sur Symfony &amp; Heroku</a>
        si vous ne l'avez pas encore lu !), puis l’arrivée des conteneurs
        (ou <em lang="en">containers</em>). Dans le viseur aujourd’hui, ce sont
        les <abbr title="Functions as a Service" lang="en">Faas</abbr> ou
        « <span lang="en">serverless</span> ».
    </p>

    <p>
        Aujourd’hui, nous étudierons en quoi ces nouvelles offres
        « <span lang="en">serverless</span> » ont un intérêt pour nous,
        utilisateurs et créateurs d’applications web. Nous verrons également
        comment utiliser ces offres pour votre application Symfony.
    </p>

    <h2 id="quest-ce-que-serverless">Qu’est-ce que serverless</h2>

    <p>
        D’après le nom, en francais « sans-serveur », on peut comprendre l’idée :
        il n’y a pas de serveur à gérer. Cela veut dire pas de machine dédiée
        chez OVH, pas de EC2 chez AWS ou encore pas de dyno chez Heroku.
    </p>

    <p>
        C’est tout simplement un PaaS donc ? Ou bien un hébergement mutualisé à
        l’ancienne ? Eh bien… non plus. On peut résumer les « FaaS » par les
        points suivants :
    </p>

    <ol>
        <li>
            <span lang="en"></span><strong>Pay-as-you <em>really</em> go</strong></span>.
            Toutes les autres alternatives, à ma connaissance, facturent un
            prix de base par mois, qui inclut une certaine quantité de
            trafic et/ou de ressources utilisables. Pour ces offres là, vous
            ne payez qu’au nombre d’exécutions.
            <br/>
            C’est-à-dire : 0 requêtes = 0 €.
        </li>
        <li>
            <strong lang="en">Stateless</strong>.
            Chaque exécution de notre fonction est indépendante. Typiquement,
            on ne pourra pas écrire sur le disque dur pour la prochaine
            requête. Il faut aussi imaginer que notre fonction sera exécutée
            quelque part, mais nous n’avons aucun contrôle sur l’endroit.
        </li>
        <li>
            <strong lang="en">Scalable</strong>. Il n’y a plus de serveur (à votre
            connaissance). Ces fonctions sont des processus <em lang="en">stateless</em>
            exécutés pour quelques  millisecondes, voire quelques secondes. Ces
            contraintes leur permettent d’être exécutées sur une quantité très
            importante de machines, en parallèle, et donc de répondre à des pics
            de demande extrêmement importants.
        </li>
    </ol>

    <p>
        Cela nous donne une solution qui ne coûte rien lorsqu'elle n'est pas
        utilisée, mais qui permet une mise à l'échelle (ou de répondre à de gros
        pics de trafic) en quelques secondes. Un bon exemple pour prouver
        l’intérêt de telles infrastructures est <a href="http://www.bbc.co.uk/blogs/internet/entries/683c2e2a-c1ee-490b-9a97-23214505aba4">la BBC</a> :
        ils utilisent <a href="https://aws.amazon.com/fr/lambda/details/">AWS Lambda</a>
        pour faire du rendu de <span lang="en">frames</span> vidéos en temps
        réel. Lorsqu'aucun rendu n’est à effectuer, cela ne leur coute rien,
        mais ils peuvent absorber une grande quantité d’exécutions, sans rien
        changer à leur infrastructure.
    </p>

    <h2 id="qui-sont-les-principaux-acteurs-dans-ce-domaine">Qui sont les principaux acteurs dans ce domaine ?</h2>

    <p>
        Vous l’aurez sans doute compris, Amazon Web Services a un FaaS nommé
        <a href="http://docs.aws.amazon.com/lambda/latest/dg/welcome.html">"AWS Lamba”</a>,
        Google Cloud a les <a href="https://cloud.google.com/functions/">"Google Cloud Functions”</a>,
        Azure… <a href="https://azure.microsoft.com/en-gb/services/functions/">"Functions”</a>.
        Ces trois offres sont complètes et extrêmement bien intégrées aux
        différentes plateformes, mais elles sont aussi propriétaires. Puisque
        nous parlons de Symfony, il me semble important de souligner les
        alternatives Open-Source, que sont :
    </p>

    <ol>
        <li>
            <a href="https://openwhisk.apache.org">OpenWhisk</a>, un projet de
            la fondation Apache. Il est important de noter que OpenWhisk est
            disponible en version gérée par <abbr title="International Business Machines Corporation" lang="en">IBM</abbr>.
            Ce sont les <a href="https://console.bluemix.net/openwhisk/">IBM Cloud Functions</a>.
        </li>
        <li>
            <a href="https://github.com/openfaas/faas">OpenFaaS</a> et
            <a href="https://github.com/fission/fission">Fission</a> sont tous
            les deux basés sur l’utilisation de conteneurs Docker. Il vous
            « suffit » d’un <a href="https://kubernetes.io/">cluster Kubernetes</a>
            pour faire tourner ces deux plateformes.
        </li>
    </ol>

    <h2 id="php-dans-tout-ça">PHP dans tout ça ?</h2>

    <p>
        Mises à part les alternatives Open-Source, PHP n’est pas vraiment l’ami
        des trois gros « <em lang="en">clouds</em> ». Node.js et Go sont les
        grands gagnants, PHP n’est même pas officiellement supporté par l’un
        d’entre eux. La seule façon de lancer du PHP dans ces nuages consiste à
        utiliser « <em lang="en">shim</em>.
        <a href="https://aws.amazon.com/blogs/compute/scripting-languages-for-aws-lambda-running-php-ruby-and-go/">On package le binaire de PHP dans la fonction, et on demande à un petit script Node de lancer le PHP</a>
        (je vous assure, c’est même dans leurs documentations officielles !).
    </p>

    <p>
        <em>
            Pourtant… PHP est fait pour ça ! PHP est fait pour lancer des scripts
            très courts. Alors que de l’autre côté de la barrière, Node et Go ont
            été conçus pour les scripts longs. Je n’ai pas la réponse au « pourquoi »
            mais je trouve ça très étonnant.
        </em>
    </p>

    <h2 id="deployer-notre-application-symfony">Deployer notre application Symfony</h2>

    <p>
        Nous créerons et déployerons notre application Symfony 4 dans une
        fonction OpenWhisk. Nous utilisons cette plateforme pour 3 raisons :
    </p>

    <ul>
        <li>C’est une plateforme de FaaS Open-Source,</li>
        <li>Elle supporte nativement PHP,</li>
        <li>Elle dispose d’une version pilotée sur le Cloud d’IBM.</li>
    </ul>

    <p>
        Je vous encourage vivement à l'essayer par vous même avec IBM Cloud Functions.
        C’est en effet gratuit pour les premiers 400,000 GB-seconds, ce qui est
        bien plus qu’il n'en faut pour votre « <em lang="en">side project</em> » !.
    </p>

    <ol>
        <li>
            <strong>Configurer <code class="language-none">wsk</code>, le client OpenWhisk</strong>
            <p>
                Si vous suivez mon conseil, créez votre compte IBM Cloud et suivez
                <a href="https://console.bluemix.net/openwhisk/learn/cli">la documentation pour configurer "wsk”</a>.
                Sinon, configurez "wsk” par vous meme :)
            </p>
        </li>
        <li>
            <strong>Créer une application Symfony</strong>
            <p>
                Vous avez probablement lu <a href="https://afsy.fr/avent/2017/02-la-nouvelle-configuration-par-defaut-de-symfony4">le post de Nicolas</a>,
                et savez donc que l’on démarre une application Symfony 4 avec
                <code class="language-none">composer</code> :
            </p>
            <pre><code class="language-none">$ composer create-project symfony/skeleton my-app &amp;&amp; cd my-app</code></pre>
        </li>
        <li>
            <strong>Installer le « <span lang="en">bridge</span> OpenWhisk</strong>
            <pre><code class="language-none">$ composer req sroze/openwhisk-bundle</code></pre>
        </li>
        <li>
            <strong>Préparer l’archive de l'application</strong>
            <pre><code class="language-none">$ zip -X -r ../my-app.zip * .env*</code></pre>
        </li>
        <li>
            <strong>Créer ou mettre à jour la fonction</strong>
            <pre><code class="language-none">$ wsk action update skeleton-symfony --kind php:7.1 skeleton-symfony.zip --web true</code></pre>
        </li>
        <li>
            <strong>Récupérer l’<abbr title="Uniform Resource Location" lang="en">URL</abbr> de la fonction</strong>
            <pre><code class="language-none">$ wsk action get skeleton-symfony --url&lt;/td&gt;</code></pre>
            <p>Ouvrez la fonction et vous devriez avoir l’application !</p>
        </li>
    </ol>


    <h2 id="que-cest-il-passé">Que s’est-il passé ?</h2>

    <p>
        Ces quelques étapes très simples pour déployer votre application Symfony
        peuvent être troublantes. Détaillons ce qu’il s’est passé.
    </p>

    <ol>
        <li>
            Vous avez configuré votre environnement local afin de parler au
            serveur OpenWhisk. Rien de magique là dedans.
        </li>
        <li>
            Vous avez créé une application Symfony. C’est très simple, c’est le
            tout nouveau squelette Symfony. Je vous recommande
            <a href="https://afsy.fr/avent/2017/02-la-nouvelle-configuration-par-defaut-de-symfony4">l’article de Nicolas pour en savoir plus sur Symfony 4</a>.
        </li>
        <li>
            Vous avez installé le pont OpenWhisk pour votre application Symfony.
            C’est <a href="https://github.com/sroze/openwhisk-bundle">un paquet</a>
            et avant tout <a href="https://github.com/symfony/recipes-contrib/tree/master/sroze/openwhisk-bundle/0.2">une recette pour Symfony Flex</a>,
            le nouveau système de gestion de configuration de Symfony. Cette
            recette a créé <a href="https://github.com/symfony/recipes-contrib/blob/master/sroze/openwhisk-bundle/0.2/index.php#L33">un nouveau contrôleur frontral</a>
            (remplaçant votre <code class="language-none">public/index.php</code>)
            qui sera exécuté lorsque la fonction est invoquée dans le « <em lang="en">cloud</em> ».
            Ce contrôleur frontral transforme la requête de type
            <a href="https://console.bluemix.net/docs/openwhisk/openwhisk_webactions.html">OpenWhisk Web Action</a>
            en objet
            <a href="https://symfony.com/doc/3.3/components/http_foundation.html#request">HttpFoundation Request</a>,
            puis il réalise l'opération inverse pour la réponse.
        </li>
        <li>
            Puisqu’une application Symfony est un ensemble de fichiers, nous
            devons utiliser une application de type <em lang="en">package</em>.
            Ce type d’application est tout simplement un fichier ZIP de votre
            dossier.
        </li>
        <li>
            Vous avez créé la fonction dans OpenWhisk. Typiquement, le fichier ZIP
            a été téléchargé quelque part et rendu accessible aux conteneurs qui
            lancent ensuite vos fichiers PHP. Vous avez également utilisé l'option
            <code class="language-none">--web</code> qui précise à OpenWhisk de
            faire en sorte que cette fonction soit accessible « depuis le web ».
        </li>
        <li>
            Une fois la fonction créée, il ne vous reste plus qu’a récupérer
            l’URL de la fonction pour l’exécuter.
        </li>
    </ol>

    <h2 id="serverless-le-framework">« serverless », le framework</h2>

    <p>
        En général, vous ne déployez pas une seule fonction mais plusieurs. Vous
        n'utiliserez pas que HTTP comme déclencheur de fonction mais aussi un
        système de file (<em lang="en">queue</em>), un événement dans une base
        de données, etc.
    </p>

    <p>
        Gérer « manuellement » tous ces cas peut s'avérer être beaucoup de
        travail, à la fois très répétitif et difficile à maintenir. C’est la
        raison pour laquelle <a href="https://serverless.com">"serverless”</a>
        existe. Il s'agit d'un framework écrit en Node qui simplifie la gestion
        de nos fonctions. Il fait aussi office de couche d'abstraction avec
        OpenWhisk, AWS Lamba et toutes ces plateformes.
    </p>

    <p>
        Installez <em lang="en">serverless</em> et son extension pour OpenWhisk,
        puis créez le fichier <code class="language-none">serverless.yml</code>
        dans le dossier parent de l’application <code>my-app</code> que avons
        créé plus tôt :
    </p>

    <pre><code class="language-yaml">service: my-project

provider:
  name: openwhisk
  runtime: php

package:
  individually: true

functions:
  first-app:
    handler: my-app/index.main
  2nd-app:
    handler: 2nd-app/index.main

plugins:
  - serverless-openwhisk</code></pre>

    <p>Déployez !</p>

    <pre><code class="language-none">$ serverless deploy</code></pre>

    <h2 id="conclusion">Conclusion</h2>

    <p>
        J’espère que cet article vous a permis d’en savoir plus à propos de ces
        « <em lang="en">functions as a service</em> ». Il est clair que ce
        nouveau genre d’offre constitue un futur encore plus simple et moins
        coûteux pour expérimenter diverses idées, tout en créant des
        architectures dimensionnables naturellement. Les outils sont toujours
        relativement expérimentaux et rares, mais je n’ai aucun doute
        qu’ensemble nous pouvons améliorer les outils pour Symfony !
    </p>

    <p>Happy serverlessing 😁</p>

{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/samuel-roze.jpeg') }}" alt="Samuel Roze" />
{% endblock %}

{% block article_bio %}
<h2><a href="{% block author_url %}https://twitter.com/samuelroze?lang=fr{% endblock %}" target="_blank">{% block article_author %}Samuel Roze{% endblock %}</a></h2>
<p>
    Samuel a créé et continue de maintenir <a href="https://continuouspipe.io/">ContinuousPipe</a>,
    un outil de deployment pour les applications « <em>containeurisées</em> »,
    basé sur Kubernetes. Mainteneur de ApiPlatform et contributeur à de nombreux
    projects Open-Source dont Symfony, il aide de multiples startups à prototyper
    et concevoir leur architecture technique pour Kamet Ventures, un incubateur
    londonnien.
</p>
{% endblock %}
