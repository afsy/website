{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 8 - Symfony Flex : la nouvelle fa√ßon de d√©velopper avec Symfony" %}

{% block article_content %}
    <style type="text/css">
        i {
            font-family: sans-serif;
        }
    </style>
    <h1 id="symfony-flex-la-nouvelle-fa√ßon-de-d√©velopper-avec-symfony">Symfony Flex : la nouvelle fa√ßon de d√©velopper avec Symfony</h1>

    <p>Les versions de Symfony 3.4 et 4.0 viennent tout juste de sortir et avec elles vient une nouvelle fa√ßon de d√©velopper des applications Symfony. D√Ætes adieu √† la <a href="https://github.com/symfony/symfony-standard">Standard Edition</a> et bonjour aux tout nouveaux <code>symfony/skeleton</code>, Symfony Flex et les recettes qui vont avec.</p>



    <h2 id="vous-avez-dit-flex">Vous avez dit Flex ?</h2>

    <p>D‚Äôun point de vue technique, <a href="https://github.com/symfony/flex">Symfony Flex</a> est juste un plugin Composer. Il se branche sur les √©v√©nements Composer d√®s lors que vous lancez une commande qui installe, met √† jour ou supprime un paquet PHP ou bundle Symfony. Son but ? <strong>Automatiser l‚Äôinstallation et la suppression de vos d√©pendances</strong> en fournissant une <strong>configuration par d√©faut</strong> sans avoir √† aller lire la doc pour trouver quelle configuration √©crire, quelles routes charger ou autre t√¢che r√©barbative √† effectuer. Et d√®s Symfony 4.0, Flex sera le moyen par d√©faut pour d√©velopper une application Symfony.</p>

    <p>Il para√Æt qu‚Äôun bon exemple vaut mieux qu‚Äôun long discours. Alors imaginons que vous ayez une application existante en Symfony 3.3 (parce que vous √™tes un dev cool et avez effectu√© les migrations vers les derni√®res versions de Symfony au fur et √† mesure üí™). Vous voulez y ajouter une API en installant api-platform. Vous allez donc effectuer les t√¢ches suivantes :</p>

    <ul style="margin-left: 0">
        <li>
            Installation du package
            <pre class="language-bash"><code>composer require api-platform</code></pre>
            <br />
        </li>
        <li>
            Mise √† jour du kernel pour instancier et enregistrer le bundle
            <pre class="language-php"><code>// app/AppKernel.php

public function registerBundles()
{
    $bundles = [
        // ...
        new ApiPlatform\Core\Bridge\Symfony\Bundle\ApiPlatformBundle(),
    ];
    // ...
}</code></pre>
            <br />
        </li>
        <li>
            Import du routing fourni par le bundle
            <pre class="language-yaml"><code># app/config/routing.yml
api:
    resource: '.'
    type: 'api_platform'
    prefix: '/api' # Optional</code></pre>
            <br />
        </li>
        <li>Configuration du bundle dans <code>config.yml</code></li>
    </ul>

    <p>Rien d‚Äôinsurmontable me direz-vous. Mais rappelez-vous qu‚Äôil est n√©cessaire de <strong>faire ces manipulations pour chaque bundle</strong> que vous ajoutez dans votre application (sans parler des autres t√¢ches comme cr√©er des entit√©s Doctrine requises par certains bundles, lancer des commandes CLI, etc). C‚Äôest encore pire si nous tombons sur un bundle qui aurait des d√©pendances sur plusieurs autres bundles (coucou Sonata üëã). Et c‚Äôest tout de suite moins sympathique. üò¨</p>

    <p>Imaginons maintenant le futur. Vous √™tes d√©sormais l‚Äôheureux propri√©taire d‚Äôune application en Symfony 4. Et surtout, vous r√™vez toujours d‚Äôinstaller une API REST (puisque sans √ßa, mon exemple n‚Äôaurait plus beaucoup d‚Äôint√©r√™t, avouons-le). Vous lancez donc la commande suivante :</p>



    <pre class="language-bash"><code>composer require api</code></pre>

    <p>Et c‚Äôest tout. Oui, vous avez bien lu, c‚Äôest tout. Flex va se charger lui-m√™me d‚Äôenregistrer le bundle dans le kernel de Symfony, de fournir une configuration par d√©faut, de charger les routes n√©cessaires, etc. Une seule commande Composer vous aura suffi pour mettre en place une API REST fonctionnelle et sa documentation swagger/openapi.</p>



    <h2 id="sous-le-capot">Sous le capot</h2>

    <p>Au c≈ìur de tout ce syst√®me d‚Äôautomatisation se trouvent les <strong>recipes</strong> - ou recettes dans la langue de notre bon vieux Moli√®re. Les recettes, h√©berg√©es sur un d√©p√¥t open source disponibles <a href="https://github.com/symfony/recipes">ici pour les officielles</a> (comprendre celles approuv√©es et maintenues par la core team) et <a href="https://github.com/symfony/recipes-contrib">ici pour celles de la communaut√©</a>, contiennent des instructions pour indiquer √† Flex ce qu‚Äôil doit faire pour chaque paquet.</p>

    <p>Ainsi, une recette d√©finit plusieurs informations, la premi√®re √©tant les alias. </p>



    <h3 id="les-aliases">Les aliases</h3>

    <p>Vous vous souvenez de l‚Äôexemple pr√©c√©dent ?</p>



    <pre class="language-bash"><code>composer require api</code></pre>

    <p>Le package <code>api</code> n‚Äôexiste pas pour Composer. Mais Flex intervient pour d√©tecter si le nom de package demand√© correspond √† un alias, et si c‚Äôest le cas, fait en sorte que Composer installe le paquet correspondant.</p>

    <p>Il existe d√©j√† tout un tas d‚Äôalias (<code>admin</code>, <code>log</code>, <code>orm</code>, etc) et ils seront forc√©ment non objectifs puisque que d√©finis par la core team (les alias sont uniquement disponibles pour les recettes officielles). L√† encore, cela simplifie un peu le d√©veloppement Symfony en mettant plus en avant des packages de qualit√©, test√©s et maintenus.</p>

    <p>Mais ce qui fait r√©ellement l‚Äôint√©r√™t des recettes, c‚Äôest la partie <code>configurator</code>.</p>



    <h3 id="les-configurateurs">Les configurateurs</h3>

    <p>Il existe actuellement 8 types de configurateurs disponibles pour les recettes Flex. Chaque type permet au plugin de configurer une partie de votre application. En voici la liste :</p>

    <ul>
        <li><code>bundles</code> permet de conna√Ætre les bundles √† instancier suivant l‚Äôenvironnement ;</li>
        <li><code>container</code> donne les param√®tres √† ajouter dans votre DIC ;</li>
        <li><code>copy-from-package</code> indique les fichiers √† copier du paquet Composer vers votre application Symfony ;</li>
        <li><code>copy-from-recipe</code> indique les fichiers √† copier de la recette vers votre application Symfony ;</li>
        <li><code>env</code> donne les variables d‚Äôenvironnement √† ajouter dans les fichiers <code>.env.dist</code> et <code>.env</code> de l‚Äôapplication ;</li>
        <li><code>composer-scripts</code> liste les commandes √† ajouter dans la section <code>scripts</code> de votre <code>composer.json</code> pour qu‚Äôelles soient lanc√©es √† la fin des commandes <code>install</code> et <code>update</code> ;</li>
        <li><code>gitignore</code> donne les entr√©es √† ajouter √† votre <code>.gitignore</code> ;</li>
        <li><code>post-install-output</code> permet d‚Äôafficher du texte lorsque l‚Äôinstallation par Composer se termine.</li>
    </ul>

    <p>Flex est suffisamment intelligent pour √©galement supprimer ce qui a √©t√© ajout√© par une recette lorsque vous supprimez le paquet associ√©.</p>

    <p>Pour terminer sur le fonctionnement interne de Flex, prenons rapidement l‚Äôexemple du <code>manifest.json</code> pr√©sent dans la recette du <em>BazingaJsTranslationBundle</em> (bundle permettant d‚Äôexposer les traductions du site √† votre JavaScript) :</p>



    <pre class="language-json"><code>{
    "bundles": {
        "Bazinga\\Bundle\\JsTranslationBundle\\BazingaJsTranslationBundle": ["all"]
    },
    "copy-from-recipe": {
        "config/": "%CONFIG_DIR%/"
    },
    "aliases": ["js-translation", "js-translator"]
}</code></pre>

    <p>Nous constatons qu‚Äôil existe 2 alias disponibles pour ce bundle, qu‚Äôil y a un bundle √† instancier (pour tous les environnements, pas uniquement <code>prod</code> ou <code>dev</code> par exemple) et qu‚Äôil faut copier le contenu du dossier <code>config/</code> provenant du recipe dans le dossier de configuration de votre application Symfony.</p>

    <p>Pour plus d‚Äôinformations sur les recettes, n‚Äôh√©sitez pas √† aller lire le README tr√®s complet du d√©p√¥t <a href="https://github.com/symfony/recipes">symfony/recipes</a>.</p>

    <p>Vous en savez maintenant un peu plus sur Symfony Flex (et son fonctionnement interne). Vous √™tes convaincu de ses bienfaits ? Alors regardons comment migrer votre application.</p>



    <h2 id="les-pr√©-requis">Les pr√©-requis</h2>

    <p>Avant de d√©marrer, il est √† noter que Symfony Flex requiert notamment 2 choses. La premi√®re, c‚Äôest PHP 7 : les premi√®res versions de Flex √©taient m√™me compatibles uniquement PHP 7.1+ mais la d√©pendance a √©t√© abaiss√©e √† PHP 7.0 r√©cemment afin de faciliter la migration pour un maximum de gens.</p>

    <p>La deuxi√®me contrainte pour utiliser Flex est d‚Äôutiliser la structure d‚Äôapplication qui sera celle de Symfony 4.0. En effet, tout comme Symfony 3 en son temps, Symfony 4 apporte quelques changements dans l‚Äôarborescence par d√©faut :</p>

    <ul>
        <li>le kernel est d√©plac√© de <code>app/AppKernel.php</code> vers <code>src/Kernel.php</code> ;</li>
        <li>le dossier <code>app/config/</code> est d√©plac√© √† la racine <code>config/</code> (les param√®tres sp√©cifiques √† votre infrastructure pourront d‚Äôailleurs √™tre d√©finis en variables d‚Äôenvironnement, dans un <code>.env</code> pour les environnements de d√©veloppement) ;</li>
        <li>les dossiers <code>assets/</code> et <code>translations/</code> dans <code>app/Resources/</code> sont √©galement d√©plac√©s √† la racine ;</li>
        <li><code>app/Resources/views/</code> est d√©plac√© √† la racine et est renomm√© <code>templates/</code> ;</li>
        <li>plus de notion de bundle dans votre code applicatif, donc le contenu <code>src/{App, ...}Bundle/</code> est d√©plac√© directement dans <code>src/</code> ;</li>
        <li><code>web/</code> devient <code>public/</code> et nous nous retrouvons avec un unique contr√¥leur frontal <code>index.php</code> √† la place des anciens <code>app_dev.php</code> et <code>app.php</code>. D√©sormais, l‚Äôenvironnement sera pilot√© uniquement par une variable d‚Äôenvironnement <code>APP_ENV</code> ;</li>
        <li>tous les fichiers YAML utilisent maintenant l‚Äôextension officielle, √† savoir <code>.yaml</code> au lieu de <code>.yml</code>.</li>
    </ul>

    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/08/arborescence.png') }}" alt="Exemple de la nouvelle arborescence avec Symfony 4"></p>

    <p>Nous pouvons noter dans ces changements une r√©elle volont√© de <a href="https://github.com/symfony/flex/issues/56#issuecomment-312575740">se rapprocher des standards du march√©</a>, employ√©s par <a href="https://github.com/php-pds/skeleton_research#conclusion">les autres frameworks et langages</a>. Et ce n‚Äôest pas pour nous d√©plaire. ‚ú®</p>



    <h2 id="migrer-une-application-existante">Migrer une application existante</h2>

    <p>Flex fonctionnait d√®s Symfony 3.3, mais en version alpha. Cela a permis √† de nombreuses personnes de tester Flex au plus t√¥t. Plein de suggestions ont ainsi pu √™tre apport√©es par la communaut√© et la core team en a profit√© pour faire plusieurs ajustements. D√©sormais, Symfony Flex est consid√©r√© comme stable depuis Symfony 3.4 et 4.0.</p>

    <p>Malheureusement, <strong>il n‚Äôexiste pas d‚Äôoutils pour automatiser la migration</strong> vers Symfony Flex. Et non, il ne suffit pas simplement de lancer un <code>composer require symfony/flex</code>. Non, le plus simple est de d√©marrer une nouvelle application √† c√¥t√© et de rapatrier votre code et configuration de l‚Äôancienne vers la nouvelle application. C‚Äôest ce que nous allons voir dans la suite, √©tape par √©tape. Cette migration permettra d‚Äôailleurs de mieux comprendre les choix techniques qui ont conduit √† tous ces changements dans l‚Äôarborescence.</p>



    <h3 id="cr√©er-la-nouvelle-application">Cr√©er la nouvelle application</h3>

    <p>Comme je l‚Äôai dit, pour simplifier la migration, nous devrons cr√©er une toute nouvelle application. Vous avez le choix entre d√©marrer en Symfony 3.4 ou 4.0. Gardez √† l‚Äôesprit que la nouvelle version majeure est encore jeune et tout l‚Äô√©co-syst√®me n‚Äôest pas encore compatible, ce qui risque de vous poser probl√®me. Dans le doute, nous allons d√©marrer en 3.4 pour profiter de la long√©vit√© de cette version LTS.</p>

    <p>Symfony Flex rend l‚Äô<a href="https://github.com/symfony/symfony-installer">installateur officiel</a> obsol√®te. En effet, nous retrouvons √† nouveau une initialisation classique via Composer :</p>



    <pre class="language-bash"><code>composer create-project symfony/skeleton:3.4 ma-nouvelle-app</code></pre>

    <p>Si vous regardez le <a href="https://github.com/symfony/skeleton">repository du squelette</a>, vous constaterez qu‚Äôil s‚Äôagit d‚Äôun unique <code>composer.json</code> avec des d√©pendances notamment sur <code>symfony/flex</code>, <code>symfony/framework-bundle</code>. Oui, tout ce que vous trouvez d‚Äôautre dans <code>ma-nouvelle-app/</code> a √©t√© g√©n√©r√© par Flex : la console dans <code>bin/</code>, le <code>public/index.php</code>, le kernel dans <code>src/</code> ou encore toute la configuration dans <code>config/</code>. Nous reviendrons notamment sur le contenu de dossier de <code>config/</code> dans la suite.</p>



    <h3 id="r√©installer-vos-d√©pendances">R√©installer vos d√©pendances</h3>

    <p>Apr√®s avoir initialis√© votre toute nouvelle application, vous allez pouvoir rapatrier vos anciennes d√©pendances. Pour √ßa, r√©cup√©rez la liste des packages pr√©sents dans les sections <code>require</code> et <code>require-dev</code> de votre ancien <code>composer.json</code> et copiez les dans votre nouveau <code>composer.json</code>.</p>

    <p>On lance l‚Äôinstallation avec la commande suivante :</p>



    <pre class="language-bash"><code>composer update</code></pre>

    <p>Par d√©faut, le squelette est configur√© pour ne pas autoriser les recettes qui viennent du d√©p√¥t <code>contrib</code>. Si c‚Äôest le cas pour un ou plusieurs de vos packets, Flex va vous demander interactivement ce que vous voulez faire :</p>

    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/08/interactive-contrib-recipe.png') }}" alt="Flex demandant s'il faut autoriser une recette contrib"></p>

    <p>Libre √† vous de toujours accepter une recette contribu√©e par la communaut√© ou d‚Äôaccepter au cas par cas. Il n‚Äôy a pas √©norm√©ment de risques de les accepter les yeux ferm√©s mais il faut tout de m√™me garder √† l‚Äôesprit que ces recettes ne sont pas n√©cessairement valid√©es par des membres de la core team.</p>

    <p>Il y a des risques que la commande Composer √©choue au moment o√π elle lance le script qui va nettoyer le cache (la commande <code>cache:clear</code> de Symfony). En effet, certains bundles de vos d√©pendances n‚Äôont peut-√™tre pas encore de recettes Flex pour g√©n√©rer une configuration par d√©faut. Que ce soit le cas ou pas, pas d‚Äôinqui√©tude, nous nous en occupons dans la suite.</p>

    <p>Attention ! Il ne faut pas oublier que Flex apporte une nouvelle fa√ßon de penser le d√©veloppement Symfony. Puisque nous n‚Äôavons plus de d√©pendance sur le framework full-stack (c‚Äôest-√†-dire le paquet symfony/symfony), nous n‚Äôavons plus acc√®s aux logs <em>Monolog</em>, la fonction <code>dump()</code> du composant <em>VarDumper</em> ou encore au web profiler. Il va donc va falloir ajouter √† nouveau ces outils bien pratiques lors du d√©veloppement. Heureusement, <a href="https://github.com/symfony?q=pack">Symfony nous propose des <em>pack</em></a>, c‚Äôest-√†-dire des m√©ta-packages Composer qui nous permettent d‚Äôinstaller tous ces outils rapidement :</p>



    <pre class="language-bash"><code>composer require symfony/profiler-pack symfony/debug-pack</code></pre>

    <p>Et c‚Äôest la m√™me chose si votre application utilise des formulaires, de la traduction ou toute autre fonctionnalit√© de Symfony qui ne serait plus incluse par d√©faut. üòâ</p>



    <h3 id="r√©int√©grer-la-configuration">R√©int√©grer la configuration</h3>

    <p>Il est temps de nous int√©resser √† la partie configuration de vos d√©pendances et de tout ce qui se trouve dans le dossier <code>config/</code>. Dans ce dernier, nous allons avoir le contenu suivant :</p>

    <ul>
        <li><code>bundles.php</code></li>
        <li><code>packages/</code></li>
        <li><code>routes/</code></li>
        <li><code>routes.yaml</code></li>
        <li><code>services.yaml</code></li>
    </ul>

    <p><code>bundles.php</code> contient la liste des bundles. Mis √† jour par Flex √©videmment, ce fichier PHP sera import√© par notre tout nouveau Kernel pour lire les bundles √† instancier pour l‚Äôenvironnement actuel.</p>

    <p><code>packages/</code> et <code>routes/</code> contiennent respectivement la configuration de vos d√©pendances et leurs routing √† importer. Ils fonctionnent de la m√™me mani√®re : chaque fichier dedans concerne un seul paquet. Plus simple √† comprendre et moins fourre-tout que ce que nous avions pr√©c√©demment dans nos <code>app/config/config.yml</code>. En bonus, tous les fichiers <code>.php</code>, <code>.yaml</code> et <code>.xml</code> pr√©sents dans ces dossiers seront automatiquement import√©s, c‚Äôest-√†-dire que vous n‚Äôavez plus √† d√©finir manuellement les <code>import</code> pour chacun.</p>

    <p>Par exemple, la configuration du FrameworkBundle (sous la clef <code>framework</code> dans le <code>app/config/config.yml</code>) trouvera sa place dans <code>config/packages/framework.yaml</code>. De m√™me pour le TwigBundle (clef <code>twig</code>) dans <code>config/packages/twig.yaml</code>. Vous aviez de la configuration ou du routing sp√©cifique √† un environnement (comme dans <code>app/config/config_dev.yml</code> par exemple) ? Pas de soucis, si dans les dossiers <code>config/{packages ou routes}/</code> se trouve un dossier du nom d‚Äôun environnement (par exemple <code>config/packages/dev/</code>, alors son contenu ne sera charg√© que pour l‚Äôenvironnement associ√©. Malin !</p>

    <p><code>routes.yaml</code> contiendra les routes de votre application. Mis √† part le nom du fichier (anciennement <code>routing.yml</code>) qui change, il ne devrait pas y avoir de gros changements.</p>

    <p><code>services.yaml</code> contient la d√©finition des services et param√®tres de votre application. Gr√¢ce √† l‚Äô<strong>autowiring</strong> et l‚Äô<strong>autoconfigure</strong>, ce fichier risque de ne pas grossir tr√®s vite. Je vous laisse relire <a href="http://www.afsy.fr/avent/2017/02-la-nouvelle-configuration-par-defaut-de-symfony4">l‚Äôarticle de Nicolas Grekas pour ce calendrier de l‚ÄôAvent</a> √† ce sujet. Pour avoir d√©j√† d√©velopp√©/migr√© plusieurs applications avec Flex, je vous assure que ne plus avoir √† enregistrer ses services est devenu un vrai confort de d√©veloppement, sans aucune contrepartie.</p>

    <p>√âtant donn√© que la plupart de la configuration est g√©n√©r√©e par Flex et ses recettes, il ne faut pas h√©siter √† la v√©rifier soi-m√™me pour s‚Äôassurer qu‚Äôelle est adapt√©e √† votre application. La migration de configuration, en plus d‚Äô√™tre la partie la moins agr√©able et la plus longue, est probablement celle o√π le risque d‚Äôerreurs est le plus important. Soyez vigilant.</p>

    <p>√Ä ce stade, il ne devrait vous rester que les param√®tres √† migrer pour en terminer avec la configuration. Dans la nouvelle arborescence, Symfony ne nous propose plus de fichiers <code>parameters.yml</code> (et son <code>parameters.yml.dist</code> associ√©) comme nous en avions l‚Äôhabitude. Les param√®tres propres √† votre infrastructure (comme les acc√®s √† votre base de donn√©es, au serveur de mail) ou les param√®tres qui doivent pouvoir changer sans r√©initialiser le cache (comme une clef d‚ÄôAPI) pourront √™tre d√©finis en variable d‚Äôenvironnement (dans le <code>.env</code> en local et en v√©ritable variable d‚Äôenvironnement en production). Pour rappel, voici un exemple pour r√©f√©rencer une variable d‚Äôenvironnement en YAML :</p>



    <pre class="language-yaml"><code>services:
    App\\MyService:
        arguments:
            $myParameter: '%env(MY_ENV_VAR)%'</code></pre>

    <p>Pour les autres param√®tres qui d√©pendent uniquement de votre application (comme la locale), ils peuvent √™tre d√©finis dans le <code>config/services.yaml</code>. Si vous avez tout de m√™me besoin de d√©finir des param√®tres non versionn√©s en YAML, vous √™tes libres de rajouter un <code>config/packages/parameters.yaml</code> que vous prendrez soin de rajouter dans le <code>.gitignore</code>.</p>



    <h3 id="r√©importer-votre-code">R√©importer votre code</h3>

    <p>Derni√®re √©tape, vous pouvez maintenant r√©cup√©rer votre code. Rappelez-vous, nous n‚Äôavons plus de bundle applicatif (bye bye le AppBundle), donc vous aurez certainement le namespace √† changer dans toutes vos classes PHP. N‚Äôh√©sitez pas utiliser les outils de refactorisation de votre IDE pour vous facilitez la tache.</p>

    <p>Si vous avez des modifications √† faire dans le <em>Conteneur d‚ÄôInjection de D√©pendances</em>, il n‚Äôest plus obligatoire de devoir le faire dans une <em>Extension</em> ou une <em>CompilerPass</em>. N‚Äôh√©sitez pas √† les faire directement dans le Kernel se trouvant dans <code>src/</code>.</p>

    <p>Vous allez maintenant pouvoir rapatrier le reste de votre application (templates, traductions, assets ou encore tests) en d√©pla√ßant tout ce petit monde √† la racine de votre projet.</p>

    <p>Voil√†, la migration est d√©sormais termin√©e. üéâ N‚Äôh√©sitez pas √† bien tester votre application pour vous assurer que tout est bien op√©rationnel.</p>



    <h3 id="informations-additionnelles">Informations additionnelles</h3>

    <p>Pour terminer, voici quelques petis tips pour vous aider dans la migration :</p>

    <ul>
        <li>La surcharge de templates se fait d√©sormais dans <code>templates/bundles/{Nom du bundle}/{chemin/vers/le/template.html.twig}</code>. Ainsi, les templates d‚Äôerreurs Twig peuvent √™tre modifi√©s en les surchargeant dans le dossier <code>templates/bundles/TwigBundle/Exception/</code> ;</li>
        <li>Versionner le <code>symfony.lock</code>. Ajout√© il y a quelques semaines seulement dans Flex, ce fichier permet d‚Äôaider Flex √† se rappeler des recettes qu‚Äôil a d√©j√† appliqu√©es. Ainsi, gr√¢ce au lock, si vous supprimez un fichier g√©n√©r√© par une recette, Flex ne cherchera pas √† le recr√©er au prochain <code>install</code> / <code>update</code> ;</li>
        <li>Si vous avez une erreur qui ressemble √† <code>Invalid type for path "swarrot.connections.rabbitmq.port". Expected int, but got string.</code>, l‚Äôerreur est probablement li√©e √† une limitation de Symfony. En effet, il n‚Äôest pas encore possible de passer des variables d‚Äôenvironnement √† n‚Äôimporte quelle configuration d‚Äôun bundle. Le probl√®me est d√ª √† Symfony qui ne r√©soud pas la valeur d‚Äôune variable d‚Äôenvironnement au moment de la validation de la configuration (une <a href="https://github.com/symfony/symfony/pull/23888">PR</a> est en cours pour r√©parer √ßa). En attendant, vous devrez donc passer par un param√®tre interm√©diaire dans le DIC (perdant au passage un des int√©r√™ts principaux d‚Äôune variable d‚Äôenvironnement, √† savoir la modification au runtime, sans avoir √† effacer le cache) que vous injecterez dans la configuration √† la place de la variable d‚Äôenvironnement ;</li>
        <li>N‚Äôoubliez pas de r√©appliquer les √©ventuelles modifications que vous auriez pu apporter √† vos contr√¥leurs front (<code>app_*.php</code>) vers le nouveau <code>public/index.php</code> si n√©cessaire ;</li>
    </ul>



    <h2 id="conclusion">Conclusion</h2>

    <p>Symfony Flex apporte une toute nouvelle approche pour d√©velopper une application Symfony. En plus de se rapprocher des standards industriels, cette nouvelle fa√ßon de faire simplifie l‚Äôexp√©rience d√©veloppeur (DX) en automatisant tout ce qui peut l‚Äô√™tre.</p>

    <p>Nous sommes forc√©s de prendre conscience et d‚Äôexpliciter nos d√©pendances. En effet, nous n‚Äôutilisons plus une ‚Äúdistribution‚Äù classique avec tout activ√© par d√©faut. Au contraire, termin√©e la d√©pendance au framework full-stack ! Nous d√©marrons d√©sormais avec une base de code ultra-minimaliste et nous allons venir ajouter nous-m√™me les composants Symfony dont nous aurons r√©ellement besoin. Ce changement de paradigme permettra peut-√™tre de mettre un terme (ou pas) √† la r√©putation de framework plus lourd et moins rapide que se tra√Æne parfois (et souvent √† tort) Symfony.</p>

    <p>Et l√† o√π Symfony se d√©brouille souvent tr√®s bien d‚Äôapr√®s moi, c‚Äôest que toutes ces nouveaut√©s et changements ne sont jamais obligatoires. Il vous sera toujours possible de d√©velopper comme vous le souhaitez, quitte √† vous passer de Flex si n√©cessaire.</p>
{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/loick-piera.png') }}" alt="Lo√Øck Piera" />
{% endblock %}

{% block article_bio %}
    <h2>
        <a href="{% block author_url %}https://twitter.com/pyrech{% endblock %}" target="_blank">
            {% block article_author %}Loick Piera{% endblock %}
        </a>
    </h2>
    <p>
        D√©veloppeur chez JoliCode et expert trottinette de bureau.
    </p>
{% endblock %}
