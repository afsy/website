{% extends 'avent/day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 1 - EasyAdminBundle : l'arri√®re-guichet easy peasy" %}

{% block article_content %}
    <h1>EasyAdminBundle : l'arri√®re-guichet easy peasy</h1>
    <p>
        Le back office (ou arri√®re-guichet‚úåÔ∏è) est cette zone secr√®te de notre site, astucieusement dissimul√©e sous l'url <code>/admin</code>. Une fois la porte pouss√©e s'ouvre alors un monde de formulaires, de processus et de r√®gles de gestion, excitant ! Non pas trop.
    </p>
    <p>
        Pour que cette porte ne soit pas semblable √† celle de Rodin, jetons-nous corps et √¢mes dans le bundle EasyAdmin afin que votre back office soit aussi cool qu'un speakeasy ! üçª
    </p>
    <h2>Hello EasyAdminBundle üëã</h2>
    <p>
        <a href="https://github.com/javiereguiluz/EasyAdminBundle" target="_blank">EasyAdmin</a> est un bundle permettant de mettre en place un back-office d'administration. Il est assez jeune au regard de Symfony, janvier 2015 marque <a target="_blank" href="https://github.com/javiereguiluz/EasyAdminBundle/releases/tag/v1.0.0">sa premi√®re release</a>.
    </p>
    <p>C'est aujourd'hui le bundle d'admin mis en avant par Symfony :</p>
    <ul>
        <li><a target="_blank" href="https://symfony.com/doc/current/bundles/EasyAdminBundle/index.html">Documentation</a> disponible sur la doc officielle de Symfony ;</li>
        <li>Bundle par d√©faut sur <a target="_blank" href="https://github.com/symfony/recipes/blob/master/javiereguiluz/easyadmin-bundle/1.17/manifest.json#L8">l'alias "admin"</a> avec Flex (Symfony 4).</li>
    </ul>
    <p>
        Il mise sur la simplicit√© : il ne vous faudra que quelques lignes de code pour avoir une interface d'administration de vos entit√©s (gestion CRUD, recherche, pagination, template responsive) cl√© en main.
    </p>
    <p>
        Cette simplicit√© n'est pas d√ª au hasard : c'est une vraie volont√© insuffl√©e par <a target="_blank" href="https://github.com/javiereguiluz">@javiereguiluz</a>, cr√©ateur du bundle et accessoirement membre de la Core Team Symfony. Javier p√®se soigneusement l'int√©r√™t des √©volutions propos√©es et n'h√©site pas √† les refuser si elles sortent d'un cas d'utilisation g√©n√©ral.
    </p>
    <h2>Sonata ou EasyAdmin ? ü§î</h2>
    <p>
        Pendant longtemps Sonata Admin a √©t√© le bundle de r√©f√©rence au sein des projets Symfony, √† juste titre car il √©tait le plus complet et document√© de l'√©cosyst√®me. Cependant Sonata Admin est complexe, il comporte de nombreuses d√©pendances rendant les mises √† jour laborieuses. Sur ma derni√®re migration (admin peu complexe) de Sonata vers EasyAdmin, le gain de code a √©t√© assez significatif :
    </p>
    <p>
        <img src="{{ asset('bundles/afsyfront/images/avent/2017/01/banner-pr.png') }}" alt="PR EasyAdminBundle" />
    </p>
    <p>
        Avec en prime une cure d'amincissement de bundles :
    </p>
    <pre class="language-git"><code>+  new EasyCorp\Bundle\EasyAdminBundle\EasyAdminBundle(),

-  new Sonata\CoreBundle\SonataCoreBundle(),
-  new Sonata\BlockBundle\SonataBlockBundle(),
-  new Sonata\AdminBundle\SonataAdminBundle(),
-  new Sonata\DoctrineORMAdminBundle\SonataDoctrineORMAdminBundle(),
-  new Knp\Bundle\MenuBundle\KnpMenuBundle(),
-  new App\AdminBundle\AdminBundle(),</code></pre>
    <p>
        La courbe d'apprentissage de Sonata Admin est √©galement assez √©lev√©e : difficile d'√™tre autonome sans avoir sa documentation sous la main, le bundle a une logique propre et demande une bonne exp√©rience pour √™tre √† l'aise dessus. N'√©tant pas expert Sonata, je me suis trop souvent retrouv√© en train de batailler pour impl√©menter une feature pourtant simple.
    </p>
    <p>
        √Ä l'inverse, EasyAdmin repose sur des concepts standards de Symfony, et c'est pour moi l'un de ses principaux atouts : pour ajouter une fonctionnalit√© (CMS, gestion de m√©dia‚Ä¶), il suffit de cr√©er un contr√¥leur et passer sur du code Symfony standard.
    </p>
    <p>
        Ceci dit, EasyAdmin apporte moins de fonctionnalit√©s que Sonata, il ne g√®re pas la s√©curit√© (filtre selon les r√¥les), ni une gestion des m√©dias et g√®re moins bien les relations complexes entre entit√©s. Mais c'est le postulat d'EasyAdmin qui se veut le MVP du back office et offre une grande flexibilit√© pour d√©velopper des fonctionnalit√©s plus complexes.
    </p>
    <p>
        √Ä l'utilisation, il existe une grosse diff√©rence au niveau de la configuration des bundles :
    </p>
    <ul>
        <li>Sonata privil√©gie une configuration par classes/services assez verbeuse;</li>
        <li>EasyAdmin offre une configuration par fichier YAML, verbeuse aussi mais plus simple et <em>human-friendly</em>.</li>
    </ul>
    <h2>EasyAdminBundle, Symfony 4 et Flex ‚ú®</h2>
    <p>
        Vous l'avez peut-√™tre vu passer : la 4√®me version de Symfony a √©t√© publi√©e hier ! L'occasion parfaite pour voir ensemble l'int√©gration du bundle avec Symfony 4. Je n'entrerai pas dans le d√©tail des nouveaut√©s : d'autres articles du calendrier s'en chargeront dans les jours √† venir.
    </p>
    <p>‚ö†Ô∏è Dans cet article, les exemples et configs sont donn√©s au format Symfony 4, la structure a sensiblement chang√© !</p>
    <h3>Installation de Symfony 4</h3>
    <p>
        Commencez par r√©cup√©rer la base de votre projet Symfony gr√¢ce au <a target="_blank" href="https://github.com/symfony/skeleton">nouveau d√©p√¥t skeleton</a> :
    </p>
    <pre class="language-bash"><code>composer create-project symfony/skeleton beerfactory</code></pre>
    <h3>Ajout d'EasyAdminBundle</h3>
    <p>Ajoutez-y votre bundle d'admin pr√©f√©r√© (spoil : EasyAdminBundle) gr√¢ce aux recettes apport√©e par Flex :</p>
    <pre class="language-bash"><code>composer req admin</code></pre>

    <p>Flex a automatiquement ajout√© EasyAdminBundle (configur√© sur l'alias admin) et cr√©√© les fichiers de configuration n√©cessaires :</p>
    <ul>
        <li>config/packages/routes/easy_admin.yaml</li>
        <li>config/packages/easy_admin.yaml :</li>
    </ul>
    <pre class="language-yaml"><code># easy_admin:
#    entities:
#        # List the entity class name you want to manage
#        - App\Entity\Product
#        - App\Entity\Category
#        - App\Entity\User</code></pre>
    <p>C'est dans ce fichier que vous allez renseigner les entit√©s g√©r√©es par EasyAdmin.</p>
    <h3>Ajout des entit√©s</h3>
    <p>R√©cup√©rez <a target="_blank" href="http://symfony.com/blog/introducing-the-symfony-maker-bundle">le bundle Maker</a>  pour pouvoir g√©n√©rer vos entit√©s (bye bye SensioGeneratorBundle üíã) :</p>
    <pre class="language-bash"><code>composer req maker</code></pre>
    <p>Cr√©ez votre entit√© :</p>
    <pre class="language-bash"><code>bin/console make:entity Beer</code></pre>
    <p>Renseignez son namespace complet dans le fichier de config <code>config/packages/easy_admin.yaml</code>, afin de l'activer dans EasyAdmin :</p>
    <pre class="language-bash"><code>easy_admin:
    entities:
        - App\Entity\Beer
</code></pre>
    <h3>Branchement de la base de donn√©es</h3>
    <p>On dit √©galement bye bye au <code>parameters.yml</code> dans Symfony 4 üíã, on utilise d√©sormais les variables d'environnement, plus standards. Modifiez la variable <code>DATABASE_URL</code> avec les infos de votre base de donn√©es dans votre fichier <code>.env</code> (situ√© √† la racine du projet), puis cr√©ez votre base de donn√©es :</p>
    <pre class="language-bash"><code>bin/console doctrine:database:create --if-not-exists
bin/console doctrine:schema:update --force
</code></pre>
    <p>Il ne vous reste plus qu'√† lancer le serveur et √† vous rendre sur <a href="http://127.0.0.1:8000/admin">http://127.0.0.1:8000/admin</a> ‚ú®</p>
    <pre class="language-bash"><code>php -S 127.0.0.1:8000 -t public</code></pre>
    <p>
        <img src="{{ asset('bundles/afsyfront/images/avent/2017/01/screen-easyadmin-1.png') }}" alt="EasyAdminBundle screen" />
    </p>
    <p>Hello EasyAdminBundle, easy peasy ! üèÑ</p>
    <h3>Affiner son admin</h3>
    <p>
        Par d√©faut, EasyAdminBundle offre une configuration CRUD assez basique, vous allez devoir l'affiner pour r√©pondre au mieux √† votre besoin m√©tier. Voici les types de d√©veloppement que vous allez rencontrer :
        <ul>
            <li>La phase simple qui consiste √† modifier la config YAML pour affiner l'affichage (champs, actions, menu, design‚Ä¶);</li>
            <li>La phase plus complexe pour ajouter de la logique personnalis√©e (en √©tendant <a target="_blank" href="https://symfony.com/doc/current/bundles/EasyAdminBundle/book/complex-dynamic-backends.html#customization-based-on-overriding-the-default-admincontroller">le contr√¥leur d'EasyAdminBundle</a> ou se brancher sur <a href="https://symfony.com/doc/current/bundles/EasyAdminBundle/book/complex-dynamic-backends.html#customization-based-on-symfony-events">les √©v√©nements</a>)</li>
        </ul>
    </p>
    <p>Plut√¥t qu'expliquer √©tape par √©tape la configuration du bundle (<a target="_blank" href="https://symfony.com/doc/current/bundles/EasyAdminBundle/index.html">la documentation</a> du bundle est tr√®s compl√®te), je vais vous donner quelques astuces li√©es √† EasyAdminBundle qui je l'esp√®re vous seront utiles une fois les bases assimil√©es.</p>
    <h2>12 tips sur EasyAdminBundle üç≠</h2>

    <h3>1 - Bien g√©rer sa configuration d'admin</h3>

    <p>Comme √©voqu√© pr√©c√©demment, la configuration du bundle repose essentiellement sur des fichiers YAML. Afin de retrouver vos petits, √©vitez de tout mettre dans le fichier <code>config/package/easy_admin.yaml</code> : il deviendra vite √©norme et les conflits git seront r√©currents.</p>

    <p>Cr√©ez plut√¥t un dossier <code>admin</code> avec des sous fichiers :</p>

    <pre class="language-bash"><code>config/
    ‚îú‚îÄ‚îÄ package/
    ‚îÇ   ‚îú‚îÄ‚îÄ easy_admin.yaml
    ‚îÇ   ‚îú‚îÄ‚îÄ admin/
    ‚îÇ       ‚îú‚îÄ‚îÄ menu.yaml
    ‚îÇ       ‚îú‚îÄ‚îÄ config.yaml
    ‚îÇ       ‚îú‚îÄ‚îÄ entities/
    ‚îÇ           ‚îú‚îÄ‚îÄ beer.yaml
    ‚îÇ           ‚îî‚îÄ‚îÄ category.yaml</code></pre>

    <p>puis importez le tout depuis <code>easy_admin.yaml</code> : </p>

    <pre class="language-yaml"><code>imports:
        # Depuis Symfony 2.8
        - { resource: admin/ }</code></pre>

    <h3>2 - Utiliser des constantes en YAML</h3>

    <p>Avec une administration complexe, vous allez s√ªrement devoir appeler des constantes PHP depuis votre YAML, c'est possible depuis <a href="https://symfony.com/blog/new-in-symfony-3-2-php-constants-in-yaml-files">la version 3.2 de Symfony</a> :</p>

    <pre class="language-yaml"><code>!php/const AppBundle\Entity\Beer::ONLINE_STATE</code></pre>

    <h3>3 - Utiliser des filtres DQL</h3>

    <p>Vous pourriez avoir besoin de s√©parer une entit√© en plusieurs sous-entit√©s refl√©tant mieux votre m√©tier. Dans mon cas, je veux s√©parer les bi√®res organiques (naturelles, sans ajout d'ingr√©dients superflus) des autres, je peux utiliser l'option <code>dql_filter</code> dans laquelle je peux mettre une expression DQL :</p>

    <pre class="language-yaml"><code>easy_admin:
        entities:
            Beer:
                class: App\Entity\Beer
                list:
                    dql_filter: "entity.isOrganic = false"
                    fields:
                        - { property: 'name' }
                        - { property: 'description' }
                        - { property: 'labelThumbnail' }
            OrganicBeer:
                class: App\Entity\Beer
                list:
                    dql_filter: "entity.isOrganic = true"
                    fields:
                        - { property: 'name' }
                        - { property: 'description' }
                        - { property: 'labelThumbnail' }</code></pre>

    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/01/screen-easyadmin-2.png') }}" alt="EasyAdminBundle screen" /></p>

    <p>Vous pouvez aussi injecter vos variables d'environnement :</p>

    <pre class="language-yaml"><code>dql_filter: "entity.roles LIKE '%%env(ROLE_ADMIN)%%'"</code></pre>

    <p>
        Dans cet exemple, on liste les utilisateurs avec le r√¥le %ROLE_ADMIN% (on utilise LIKE ainsi que les % en d√©but et fin pour rechercher dans le tableau s√©rialis√©).
    </p>

    <h3>4 - Mutualiser sa configuration YAML</h3>
    <p>Dans l'exemple pr√©c√©dent nous avons dupliqu√© la configuration pour la liste, elle est ici assez concise, mais cela peut devenir probl√©matique sur des configurations plus complexes. Ainsi, vous pouvez utiliser les ancres YAML <code>&amp;</code> et <code>*</code> pour mutualiser :</p>

<pre class="language-yaml"><code>easy_admin:
    entities:
        Beer:
            class: App\Entity\Beer
            list:
                dql_filter: "entity.isOrganic = false"
                fields: &beerListFields
                    - { property: 'name' }
                    - { property: 'description' }
                    - { property: 'labelThumbnail' }
        OrganicBeer:
            class: App\Entity\Beer
            list:
                dql_filter: "entity.isOrganic = true"
                fields: *beerListFields
</code></pre>

    <p>C'est mieux ! Mais si l'on veut ajouter un champ uniquement pour les bi√®res organiques ? Nous pouvons utiliser l'op√©rateur <code><</code> :</p>
<pre class="language-yaml"><code>easy_admin:
    entities:
        Beer:
            class: App\Entity\Beer
            list:
                dql_filter: "entity.isOrganic = false"
                fields: &beerListFields
                    - { property: 'name' }
                    - { property: 'description' }
                    - { property: 'labelThumbnail' }
        OrganicBeer:
            class: App\Entity\Beer
            list:
                dql_filter: "entity.isOrganic = true"
                fields:
                    <<: *beerListFields
                    <<: { property: 'abv' } # alcohol by volume
    </code></pre>
    <p>Vous voil√† YAML master ‚úåÔ∏è</p>
    <h3>5 - Activer le toggle pour des propri√©t√©s non bool√©ennes</h3>
    <p>Vous l'avez remarqu√©, EasyAdmin affiche un √©l√©gant switch dans la liste lorsque la propri√©t√© affich√©e est une bool√©enne. Mais que faire si vous avez une propri√©t√© non bool√©enne <code>status</code> qui peut avoir comme √©tat <code>ONLINE</code> et <code>OFFLINE</code> ? L'astuce est de passer par une propri√©t√© virtuelle dans votre entit√© :</p>
    <pre class="language-php"><code>public function getIsOnline()
{
    return $this-&gt;status === self::ONLINE_STATUS;
}

public function setIsOnline($isOnline)
{
    $this-&gt;setStatus($isOnline ? self::ONLINE_STATUS : self::OFFLINE_STATUS);
}
</code></pre>

    <p>puis dans votre config utilisez le type <code>toggle</code> sur votre propri√©t√© virtuelle :</p>
    <pre class="language-yaml"><code>- { property: 'isOnline', type: 'toggle' }</code></pre>

    <h3>6 - Bien g√©rer son menu</h3>
    <p>Le menu est le point central de votre admin : soignez-le ! Vous pouvez le rendre clair en utilisant des s√©parateurs, des sous-menus et des ic√¥nes (http://fontawesome.io/icons/) :</p>
    <pre class="language-yaml"><code># config/packages/admin/menu.yaml

easy_admin:
    design:
        menu:
            - label: 'Manager'
            - label: 'Beers'
              icon: 'beer'
              children:
                  - { entity: 'Beer', icon: 'thermometer-2', label: 'Classic beers'}
                  - { entity: 'OrganicBeer', icon: 'leaf', label: 'Organic beers'}
            - { entity: 'Category', icon: 'th-list', label: 'Categories' }
            - label: 'Env: %env(APP_ENV)%'
</code></pre>

    <p>Vous pouvez aussi afficher vos variables d'environnement avec <code>%env(APP_ENV)%</code> dans vos labels.</p>
    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/01/screen-easyadmin-3.png') }}" alt="EasyAdminBundle screen" /></p>

    <h3>7 - Utiliser le markup du th√®me AdminLTE</h3>
    <p>EasyAdminBundle utilise <a target="_blank" href="https://adminlte.io/themes/AdminLTE">le th√®me AdminLTE</a> en coulisse, vous pouvez donc utiliser la majorit√© du markup des widgets pr√©sent dans la d√©mo, le css √©tant d√©j√† embarqu√© dans EasyAdmin. Cela peut √™tre utile pour vos pages personnalis√©es au sein de votre admin.</p>
    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/01/screen-easyadmin-4.png') }}" alt="EasyAdminBundle screen" /></p>
    <h3>8 - Ajouter un dashboard</h3>
    <p>Par d√©faut, la page d'accueil est la premi√®re entit√© configur√©e : g√©n√©ralement nous avons besoin d'un dashboard servant de page d'accueil. Vous pouvez en ajouter une en cr√©ant un contr√¥leur √©tendant celui d'EasyAdmin : </p>
    <pre class="language-bash"><code>bin/console make:controller AdminController</code></pre>
    <pre class="language-php"><code>namespace App\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AdminController as BaseAdminController;

class AdminController extends BaseAdminController
{
    /**
     * @Route("/dashboard", name="admin_dashboard")
     */
    public function dashboard()
    {
        return $this-&gt;render('admin/dashboard.html.twig');
    }
}
</code></pre>

    <p>Cr√©ez le template √©tendant celui d'EasyAdmin : </p>
    <pre class="language-twig"><code>{% verbatim %}{% extends '@EasyAdmin/default/layout.html.twig' %}

{% block main %}
    Dashboard
{% endblock %}
{% endverbatim %}</code></pre>

    <p>Modifiez votre route dans <code>config/routes/easy_admin.yaml</code> pour passer par votre contr√¥leur:</p>

    <pre><code class="language-yaml">easy_admin_bundle:
    resource: 'Controller/AdminController.php'
    prefix: /admin
    type: annotation</code></pre>

    <p>Enfin, ajoutez √† votre menu le dashboard avec la propri√©t√© <code>default: true</code></p>
    <pre><code class="language-yaml">easy_admin:
    design:
        menu:
            - label: Dashboard
              icon: dashboard
              route: admin_dashboard
              default: true
</code></pre>

    <p>Il ne vous manque plus qu'√† le construire (pensez au widget du th√®me AdminLTE). G√©n√©ralement, vous proc√©derez toujours de cette mani√®re pour ajouter des sections personnalis√©es dans votre admin.</p>
    <h3>9 - Surcharger le template d'un champ</h3>
    <p>Un besoin r√©current est d'avoir un template personnalis√© pour un champ (au niveau de la vue liste). Dans notre exemple, nous voulons afficher l'indice <a target="_blank" href="https://fr.wikipedia.org/wiki/International_Bitterness_Unit">IBU</a> (International Bitterness Unit) de nos bi√®res sous forme de barre de pourcentage. </p>
    <p>Commencez par cr√©er un template dans <code>templates/EasyAdmin/Beer/fields/ibu.html.twig</code> : </p>

    <pre><code class="language-twig">{% verbatim %}&lt;div class="progress-group"&gt;
    &lt;span class="progress-text"&gt;IBU&lt;/span&gt;
    &lt;span class="progress-number"&gt;&lt;b&gt;{{ value }}&lt;/b&gt;/120&lt;/span&gt;

    &lt;div class="progress sm"&gt;
        &lt;div class="progress-bar progress-bar-aqua" style="width: {{ (100 * value / 120) }}%"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
{% endverbatim %}</code></pre>

    <p>Au sein du template, vous pouvez acc√©der √† la valeur courante gr√¢ce √† <code>value</code> et √† l'entit√© avec <code>item</code>. Comme √©voqu√© pr√©c√©demment le markup de la barre de progression vient d'AdminLTE : pas besoin d'ajouter du CSS !</p>
    <p>Enfin, indiquez quel template doit utiliser EasyAdmin dans la config de votre entit√© Beer :</p>
    <pre><code class="language-yaml">- { property: 'ibu', template: 'EasyAdmin/Beer/fields/ibu.html.twig' }</code></pre>

    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/01/screen-easyadmin-5.png') }}" alt="EasyAdminBundle screen" /></p>

    <h3>10 - Surcharger le template d'√©dition d'une entit√©</h3>
    <p>Il existe 3 √©crans principaux dans EasyAdmin : <code>view</code>, <code>edit</code> et <code>list</code>. Vous pouvez les surcharger en cr√©ant un template avec le nom de l'action dans le r√©pertoire portant le nom de l'entit√©. Pour surcharger le template d'√©dition d'une bi√®re, nous allons donc cr√©er le fichier <code>templates/easy_admin/Beer/edit.html.twig</code> :</p>
    <pre><code class="language-twig">{% verbatim %}{% extends '@EasyAdmin/default/edit.html.twig' %}

{% block main %}

    {# Ajouter votre logique ici #}

    {% block entity_form %}
        {{ form(form) }}
    {% endblock entity_form %}
{% endblock %}
{% endverbatim %}</code></pre>

    <p>De mani√®re g√©n√©rale, vous pouvez surcharger tous les templates du bundle <a target="_blank" href="https://github.com/javiereguiluz/EasyAdminBundle/tree/master/src/Resources/views/default">list√©s ici</a> (paginator, menu, etc‚Ä¶).</p>
    <h3>11 - Filtrer les actions selon les r√¥les utilisateurs</h3>
    <p>Comme √©voqu√© en d√©but d'article, EasyAdmin ne permet pas de filtrer des actions en fonction des r√¥les de l'utilisateur courant. Je ne vais pas d√©tailler comment l'impl√©menter mais plut√¥t vous rediriger vers cet article l'expliquant tr√®s bien : </p>
    <p><a href="https://leanpub.com/practicalsymfony3/read#leanpub-auto-adding-simple-access-control-to-easyadminbundle" target="_blank">https://leanpub.com/practicalsymfony3/read#leanpub-auto-adding-simple-access-control-to-easyadminbundle</a></p>

    <h3>12 - √âtendre la recherche</h3>

    <p>EasyAdmin fait une recherche "full text" dans toutes les propri√©t√©s de votre entit√© mais il ne prend pas en compte les relations. Dans mon cas, j'ai une entit√© <code>Beer</code> li√©e √† une entit√© <code>Category</code>, par d√©faut, il est impossible de remonter une bi√®re en faisant une recherche sur le nom de cat√©gorie.</p>
    <p>Pour y rem√©dier, vous pouvez modifier la requ√™te DQL afin d'ajouter des champs. Dans votre <code>AdminController</code> (cf. tips 8), surchargez la m√©thode <code>createSearchQueryBuilder()</code> :</p>
    <pre><code class="language-php">protected function createSearchQueryBuilder($entityClass, $searchQuery, array $searchableFields, $sortField = null, $sortDirection = null, $dqlFilter = null)
{
    // R√©cup√©ration du query builder parent
    $qb = parent::createSearchQueryBuilder($entityClass, $searchQuery, $searchableFields, $sortField, $sortDirection, $dqlFilter);

    // Si entit√© Beer, prise en charge du nom de la cat√©gorie
    if ($entityClass === Beer::class) {
        $qb-&gt;innerJoin('entity.category', 'c')
            -&gt;orWhere('LOWER(c.name) LIKE :category_name')
            -&gt;setParameter('category_name', '%'.$searchQuery.'%')
        ;
    }

    return $qb;
}
</code></pre>

    <p><img src="{{ asset('bundles/afsyfront/images/avent/2017/01/screen-easyadmin-6.png') }}" alt="EasyAdminBundle screen" /></p>

    <h2>Pour conclure üíã</h2>
    <p>Au premier regard, EasyAdminBundle semble √™tre limit√© pour d√©velopper des back offices complexes : il offre par d√©faut des fonctionnalit√©s r√©duites au regard de Sonata. </p>
    <p>En r√©alit√©, il est tr√®s facile de d√©velopper et d'int√©grer des fonctionnalit√©s avanc√©es au sein d'EasyAdminBundle. Ce dernier s'apparente √† une belle pierre d'argile facilement fa√ßonnable permettant d'int√©grer au mieux ses processus m√©tiers. Chez JoliCode, nous l'utilisons d√©sormais sur de nombreux projets, nous n'avons pas eu de mal √† int√©grer un CMS complexe. N'h√©sitez pas √† sauter le pas !  </p>
    <p>EasyAdmin est un bundle qui √©volue assez vite avec des releases fr√©quentes. Voici quelques fonctionnalit√©s qui verront s√ªrement le jour dans les prochaines releases :</p>
    <ul>
        <li>Recherche par filtres</li>
        <li>Actions de masse</li>
        <li>Export en CSV, JSON, Excel et PDF</li>
        <li>Meilleur gestion de la s√©curit√© </li>
    </ul>

    <p>Vous pouvez retrouver le suivi de ces fonctionnalit√©s dans <a target="_blank" href="https://github.com/javiereguiluz/EasyAdminBundle/projects/1">la board "Future Features" du projet GitHub</a>. Encore une fois, je ne peux que vous recommander de lire <a href="https://symfony.com/doc/current/bundles/EasyAdminBundle/index.html">la documentation</a> ü§ì pour connaitre chaque recoin du bundle. </p>

    <p>√Ä vos arri√®res-guichets ! üöÄüöÄ</p>
{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/baptiste-adrien.png') }}" alt="Baptiste adrien" />
{% endblock %}

{% block article_bio %}
<h2><a href="{% block author_url %}https://twitter.com/shinework{% endblock %}" target="_blank">{% block article_author %}Baptiste Adrien{% endblock %}</a></h2>
<p>
    Web d√©veloppeur chez JoliCode ‚ù§Ô∏è
</p>
{% endblock %}
