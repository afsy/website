{% extends 'avent/day.html.twig' %}

{% set year = 2013 %}

{% block article_title "Jour 2 - Votre code est STUPID ? Rendez le SOLID !" %}

{% block article_content %}
<h1>Votre code est STUPID ? Rendez le SOLID !</h1>

<p>
    En dépit de son titre provocateur, cet article s'intéresse à deux grands
    principes de la programmation orientée objet : <em>STUPID</em> et
    <em>SOLID</em>. Ces deux acronymes représentent respectivement une série de
    mauvaises et de bonnes pratiques de développement orientée objet.
</p>

<p>
    Savoir identifier rapidement et formellement les indices qui montrent qu'un
    code est « <em>STUPID</em> », c'est aussi comprendre les conséquences
    nuisibles à la qualité générale de ce dernier. En revanche, savoir appliquer
    les principes de <em>SOLID</em> à son code, c'est faire un premier pas vers
    un code robuste et résistant aux changements.
</p>

<h2>Le principe STUPID</h2>

<p>
    <em>STUPID</em> est l'acronyme pour <em>Singleton</em>,
    <em>Tight Coupling</em>, <em>Untestability</em>,
    <em>Premature Optimizations</em>, <em>Indescriptive Naming</em> et
    <em>Duplication</em>. En français, ces six expressions se traduisent
    respectivement par <em>instances uniques</em>, <em>couplage fort</em>,
    <em>non testabilité</em>, <em>optimisations prématurées</em>,
    <em>nommage indéchiffrable</em> et <em>duplications</em>.
</p>

<p>
    C'est sans aucun doute que le lecteur aura compris que les six principes de
    <em>STUPID</em> portent un jugement de valeur négatif sur le code. Qu'on se
    rassure, personne n'est parfait et n'importe quel développeur écrit du code
    « <em>STUPID</em> » à un moment ou à un autre. Après tout, chaque
    développeur cherche avant tout à faire fonctionner ses applications... et
    parfois à n'importe quel prix ! Quitte à en dégrader la qualité du code.
</p>

<p>
    Cependant, il est quand même préférable de savoir reconnaître facilement ces
    mauvaises pratiques pour mieux les corriger et les éviter dans les
    prochaines applications. La qualité du code n'en sera qu'améliorée.
</p>

<h3>Instance unique</h3>

<p>
    Les « <em>singletons</em> », ou les instances uniques de classe, sont très
    largement appréciés et utilisés des développeurs. Ils sont devenus
    populaires grâce notamment aux membres du GoF (<em>Gang of Four</em>) qui
    l'ont formalisé en tant que patron de conception (<em>design pattern</em> en
    anglais).
</p>

<p>
    Au début des années 2000, les frameworks PHP tels que symfony et Zend
    Framework utilisaient de nombreux objets uniques. On se souvient par exemple
    de ces bons vieux <code>sfContext</code> et
    <code>Zend_Controller_Front</code> accessibles par l'intermédiaire de leur
    méthode statique <code>getInstance</code>. Le code suivant montre un exemple
    d'implémentation classique d'un patron de conception singleton.
</p>

<pre class="language-php"><code>&lt;?php

class Database
{
    const DB_DSN  = 'mysql:host=localhost;port=3306;dbname=afsy';
    const DB_USER = 'root';
    const DB_PWD  = 'root';

    private $dbh;
    static private $instance;

    private function __construct()
    {

    }

    private function __clone()
    {

    }

    private function connect()
    {
        if ($this-&gt;dbh instanceOf PDO) {
            return;
        }

        $this-&gt;dbh = new PDO(self::DB_DSN, self::DB_USER, self::DB_PWD, array(
            PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_AUTOCOMMIT =&gt; false,
            PDO::MYSQL_ATTR_INIT_COMMAND =&gt; "SET NAMES 'UTF8'",
        ));
    }

    public function execute($sql, array $data)
    {
        $this-&gt;connect();

        $stmt = $this-&gt;dbh-&gt;prepare($sql);
        $stmt-&gt;execute($data);

        return $stmt-&gt;rowCount();
    }

    public function query($sql)
    {
        $this-&gt;connect();

        return $this-&gt;dbh-&gt;query($sql);
    }

    public static function getInstance()
    {
        if (null !== self::$instance) {
            return self::$instance;
        }

        self::$instance = new self();

        return self::$instance;
    }
}
</code></pre>

<p>
    Ce code est l'illustration typique d'une classe capable de servir une seule
    et unique même instance. En effet, toutes les caractéristiques techniques
    d'implémentation d'un singleton sont ici réunies :
</p>

<ul>
    <li>
        Une propriété statique privée <code>$instance</code> qui stocke une
        référence à l'instance unique de cette classe,
    </li>
    <li>
        Un constructeur privé afin d'empêcher la création de plusieurs instances
        par instanciation directe avec le mot clé <code>new</code>,
    </li>
    <li>
        Une méthode <code>__clone</code> privée afin d'empêcher la création de
        plusieurs instances par clonage de l'instance unique avec le mot clé
        <code>clone</code>,
    </li>
    <li>
        Une méthode statique <code>getInstance</code> qui crée qu'une seule et
        unique instance de cette classe.
    </li>
</ul>

<p>
    Mais alors en quoi cela pose-t-il problème d'utiliser un singleton lorsque
    le code a besoin que d'une et une seule instance d'une même classe ? A
    première vue, il semble n'y avoir que des avantages comme le montre la
    classe ci-après :
</p>

<pre class="language-php"><code>&lt;?php

class UserGateway
{
    public function insert($username, $password)
    {
        $db = Database::getInstance();
        $db-&gt;execute(
            'INSERT INTO `user` (`username`, `password`) VALUES (?,?)',
            array($username, $password)
        );
    }

    public function update($id, $username, $password)
    {
        $db = Database::getInstance();
        $db-&gt;execute(
            'UPDATE `user` SET `username` = ?, `password` = ? WHERE `id` = ?',
            array($username, $password, $id)
        );
    }
}
</code></pre>

<p>
    La connexion à la base de données est récupérée grâce à la méthode statique
    <code>getInstance</code> de la classe <code>Database</code>. A première vue,
    c'est extrêmement pratique mais en réalité l'usage de ce singleton pose
    plusieurs problèmes majeurs.
</p>

<p>
    Bien que ce soit le but premier du patron singleton que de contrôler qu'il
    existe qu'une seule et unique instance de la classe, il s'agit aussi d'une
    sévère limitation. En effet, il se pourrait qu'un jour l'application doive
    interagir avec plusieurs bases de données grâce aux mécanismes de
    réplication des données. Dans ce cas, les requêtes SQL de type
    <code>INSERT</code>, <code>UPDATE</code> et <code>DELETE</code> devront être
    dirigées sur la connexion maître tandis que les requêtes de type
    <code>SELECT</code> seront quant à elles exécutées sur les bases de données
    configurées comme esclaves.
</p>

<p>
    Le patron de conception singleton ne facilite pas non plus la configuration
    des objets. Dans notre exemple, la connexion à la base de données est
    configurée par l'intermédiaire de constantes de classe. Avec cette
    implémentation, il est impossible de changer aisément les identifiants
    d'accès à la base de données sans devoir toucher au code. Une solution
    consisterait à passer des arguments à la méthode <code>getInstance</code>
    mais cela impliquerait de changer tous les appels à cette méthode partout
    dans le code. Un tel changement induirait de nombreuses duplications de
    code.
</p>

<p>
    Il faut aussi savoir que les singletons sont comparables à des variables
    globales de l'application. En effet, un singleton est accessible depuis
    n'importe où et à n'importe quel moment dans le code. Si l'état d'un
    singleton est modifiable à tout moment, par l'intermédiaire de mutateurs
    (<em>setters</em>) par exemple, alors n'importe quelle ligne de code de
    l'application pourrait modifier cet objet. Une autre instruction de
    l'application exécutée plus tard recevrait alors un singleton avec un état
    inattendu, ce qui pourrait avoir des conséquences nuisibles.
</p>

<p>
    Enfin, les singletons introduisent des <strong>couplages forts</strong>
    entre les objets. Dans l'exemple de cet article, la classe
    <code>UserGateway</code> est très fortement liée à la classe concrète
    <code>Database</code> en raison de l'appel statique. Ce couplage fort a pour
    conséquence directe d'empêcher le changement de cette dépendance par une
    autre, notamment à l'occasion de l'écriture de tests unitaires. En effet,
    tester unitairement la classe <code>UserGateway</code> oblige forcément de
    se connecter à une base de données réelle. Il est ici impossible de se
    connecter à une base de données de tests dediée ou de simuler une connexion
    à une base de données.
</p>

<p>
    En somme, les singletons ne facilitent ni l'extensibilité du code, ni le
    découplage des composants, ni la configurabilité des modules et encore moins
    les tests unitaires. Autant de raisons pour inciter les développeurs à ne
    surtout pas les utiliser.
</p>

<h3>Couplage fort</h3>

<p>
    Le couplage se traduit par les dépendances qui existent entre plusieurs
    modules. Dans l'exemple de la classe <code>UserGateway</code>, on repère
    très clairement le couplage de celle-ci avec le composant
    <code>Database</code>. Cela signifie que si l'on doit modifier la classe
    <code>Database</code>, alors il y aura un risque que ce changement impacte
    la classe <code>UserGateway</code>... et réciproquement.
</p>

<p>
    Ce couplage est d'ailleurs d'autant plus fort du fait de l'utilisation du
    singleton. Il empêche complètement d'utiliser une autre instance de la
    classe <code>Database</code> dans la classe <code>UserGateway</code>. Les
    tests unitaires seront donc par exemple particulièrement difficiles à mettre
    en oeuvre avec ce type de code.
</p>

<h3>Incapacité à tester le code</h3>

<p>
    Les deux sections précédentes ont montré comment l'utilisation de singletons
    ainsi qu'un fort couplage entre les composants ont des incidences sur la
    testabilité du code. Un code fortement couplé sera difficilement testable,
    voire dans certains cas, intestable !
</p>

<p>
    Il est important de tester unitairement le code afin de garantir qu'il
    fonctionne et prévenir aussi les éventuels bogues, cas limites et
    régressions. Un code bien testé est en effet plus robuste aux changements
    pendant tout son cycle de vie (développement, maintenance, évolution,
    déploiement...). Les tests unitaires facilitent la vie du développeur et
    permettent de détecter de nombreux problèmes en amont, bien avant qu'ils se
    produisent.
</p>

<p>
    Pour être testé, le code doit bien sûr être <em>testable</em>. Par
    conséquent, cela implique de suivre un certain nombre de bonnes pratiques
    pour y parvenir. Le principe <em>SOLID</em> présenté dans la suite de cet
    article est un moyen efficace pour rendre son code testable.
</p>

<h3>Optimisations prématurées</h3>

<p>
    Optimiser le code trop tôt dans un but hypothétique de le rendre plus
    performant ou parfois plus concis est toujours un effort vain. En effet, les
    optimisations prématurées du code rendent la lecture et la compréhension de
    ce dernier plus difficiles.
</p>

<p>
    Il est souvent plus sage de sacrifier ces optimisations pour sauver
    d'hypothétiques millisecondes au profit d'un code clair et compréhensible.
    Il convient d'optimiser au moment opportun lorsque ce besoin se fait
    réellement sentir. Des outils de profilage avancés comme
    <a href="http://xdebug.org/">xdebug</a> ou
    <a href="http://pecl.php.net/package/xhprof">xhprof</a> aident à identifier
    précisément les zones du code les plus propices à d'éventuelles
    optimisations.
</p>

<h3>Nommage indéchiffrable</h3>

<p>
    Un nommage simple et compréhensible du code, et c'est un temps précieux de
    gagner lorsqu'il s'agit de le relire, le maintenir ou le faire évoluer. Cela
    semble évident mais c'est sans doute l'une des tâches des plus compliquées
    pour un développeur.
</p>

<p>
    Savoir nommer correctement une variable, une fonction, une méthode, une
    classe ou encore un espace de nommage n'est pas toujours facile. Encore
    moins quand on ne maîtrise pas le métier de l'application que l'on
    développe. Et pourtant, un bon nommage apporte la sémantique au code. Enfin,
    il est fortement déconseillé de faire usage d'abréviations ou d'acronymes
    dans le code car tout le monde ne connaît pas forcément le sens exact de ces
    derniers.
</p>

<p>
    Symfony est un très bel exemple de logiciel dans lequel les développeurs
    s'appliquent à nommer correctement les choses. Beaucoup d'utilisateurs du
    framework ne le savent pas mais le choix définitif des noms
    <code>Symfony\Bridge</code>, <code>OptionsResolver</code> ou encore
    <code>ExpressionLanguage</code> ont nécessité des moments de brainstorming
    participatif avec la communauté des développeurs.
</p>

<h3>Duplications</h3>

<p>
    Que dire sur ce principe tellement il semble évident ? Il s'agit de garder
    le code <em>KISS</em> (<em>Keep It Simple Stupid</em>) et <em>DRY</em>
    (<em>Don't Repeat Yourself</em>). Les duplications de code à travers le code
    augmentent le temps de maintenance et les risques de bogues. Des lignes de
    code dupliquées et c'est de la dette technique qui s'ajoute encore à votre
    application. Une modification du code nécessite de répercuter le changement
    à plusieurs endroits.
</p>

<p>
    Des méthodes simples existent pour réduire les duplications du code. Dans un
    ensemble de classes, il s'agit par exemple de profiter de l'héritage ou de
    la composition en isolant les redondances dans des classes, traits et
    méthodes. Dans une vue Twig, il convient par exemple de s'appuyer sur les
    macros ou bien les marqueurs <code>include</code> et <code>embed</code> en
    isolant les bouts de code dupliqués dans des templates.
</p>

<p>
    Des outils comme <em>PHP Copy Paste Detector</em>
    (<a href="http://github.com/sebastianbergmann/phpcpd">PHPCPD</a>) ou
    <a href="http://sonarsource.org">SonarSource</a> automatisent la détection
    de duplications de code. Enfin l'utilisation de bibliothèques tierces
    écrites par d'autres sont un bon moyen de remplacer de réutiliser du code et
    factoriser certaines parties redondantes d'un code. Avec
    <a href="http://getcomposer.org">Composer</a> et
    <a href="https://packagist.org">Packagist</a>, il est devenu aujourd'hui très
    facile de trouver et d'installer des bibliothèques de code réutilisables
    éprouvées.
</p>

<h2>Le principe SOLID</h2>

<p><em>SOLID</em> est l'acronyme pour les cinq principes suivants :</p>

<ul>
    <li>
        Principe de responsabilité unique
        (<em>Single Responsability Principle</em>),
    </li>
    <li>
       Principe ouvert / fermé
       (<em>Open Close Principle</em>),
    </li>
    <li>
        Principe de substitution de Liskov
        (<em>Liskov Substitution Principle</em>),
    </li>
    <li>
        Principe de ségrégation d'interfaces
        (<em>Interface Segregation Principle</em>),
    </li>
    <li>
        Principe d'injection de dépendance
        (<em>Dependency Injection Principle</em>).
    </li>
</ul>

<p>
    Ce grand principe de la programmation orientée objet a été inventé par
    Michael Feathers et <a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">Robert C. Martin</a>
    (<abbr lang="en" title="As Known As">aka</abbr> <em>Uncle Bob</em>) au début des années 2000. <em>SOLID</em> définit
    cinq bonnes pratiques orientées objet à appliquer au code afin d'en
    simplifier la maintenance, la testabilité et les évolutions futures.
</p>

<h3>Principe de responsabilité unique (<em>SRP</em>)</h3>

<blockquote>
    <p>
        <em>A class should have one, and only one, reason to change.</em>
        <br />
        Robert C. Martin.
    </p>
</blockquote>

<p>
    D'après Robert C. Martin, le principe de responsabilité unique stipule
    qu'une classe doit avoir <em>une et une seule raison de changer</em>. En
    d'autres termes, une classe doit remplir un rôle précis. C'est exactement
    comme dans une entreprise où les tâches sont réparties entre chaque employé
    en fonction de leur expertise respective.
</p>

<pre class="language-php"><code>&lt;?php

class CsvDataImporter
{
    public function import($file)
    {
        $records = $this-&gt;loadFile($file);

        $this-&gt;importData($records);
    }

    private function loadFile($file)
    {
        $records = array();
        if (false !== $handle = fopen($file, 'r')) {
            while ($record = fgetcsv($handle)) {
                $records[] = $record;
            }
        }
        fclose($handle);

        return $records;
    }

    private function importData(array $records)
    {
        try {
            $this-&gt;db-&gt;beginTransaction();
            foreach ($records as $record) {
                $stmt = $this-&gt;db-&gt;prepare('INSERT INTO ...');
                $stmt-&gt;execute($record);
            }
            $this-&gt;db-&gt;commit();
        } catch (PDOException $e) {
            $this-&gt;db-&gt;rollback();
            throw $e;
        }
    }
}
</code></pre>

<p>
    Dans cet exemple, la classe <code>CsvDataImporter</code> a pour rôle
    d'importer des données issues d'un fichier au format CSV. Au premier abord,
    cette classe semble tout à fait correcte. Cependant, pour un développeur
    expérimenté, il est évident que cette classe possède plus d'une
    responsabilité. En effet, la classe <code>CsvDataImporter</code> réalise
    deux tâches de nature complètement différente :
</p>

<ul>
    <li>Lire un fichier CSV et transformer les données en tableaux PHP,</li>
    <li>Importer ces enregistrements dans une base de données MySQL.</li>
</ul>

<p>
    Il y a donc clairement deux raisons que la classe change dans un futur
    proche. La première est le changement du format de sérialisation des données
    tandis que la deuxième concerne le moyen de stockage de ces dernières. En
    effet, il faudra modifier la méthode <code>loadFile</code> si demain les
    données sont issues d'un fichier XML ou JSON. Aussi une réécriture de la
    méthode <code>importData</code> sera nécessaire s'il est question de charger
    ces données dans un <code>Mongodb</code> par exemple.
</p>

<p>
    La solution pour se conformer au principe de responsabilité unique consiste
    à décomposer la classe <code>CsvDataImporter</code> en deux sous-classes :
    <code>CsvFileLoader</code> et <code>DataGateway</code>. La nouvelle classe
    générique <code>DataImporter</code> n'a alors plus qu'à déléguer ces deux
    tâches à ses deux dépendances.
</p>

<pre class="language-php"><code>&lt;?php

class DataImporter
{
    private $loader;
    private $gateway;

    public function __construct(FileLoader $loader, Gateway $gateway)
    {
        $this-&gt;loader  = $loader;
        $this-&gt;gateway = $gateway;
    }
    public function import($file)
    {
        foreach ($this-&gt;loader-&gt;load($file) as $record) {
            $this-&gt;gateway-&gt;insert($record);
        }
    }
}
</code></pre>

<p>
    <em>Note</em> : les types des dépendances dans le constructeur de la classe
    <code>DataImporter</code> sont ici des classes abstraites ou des
    interfaces.
</p>

<p>
    Avec ce découpage en trois petites classes, il est désormais plus facile de
    tester unitairement chaque objet, de faire évoluer les implémentations
    existantes ou d'en ajouter de nouvelles.
</p>

<h3>Principe ouvert / fermé (<em>OCP</em>)</h3>

<blockquote>
  <p><em>You should be able to extend a classes behavior, without modifying it.</em><br />
  Robert C. Martin.</p>
</blockquote>

<p>
    Le principe ouvert / fermé consiste à rendre les modules <em>ouverts à
    l'extension</em> et <em>fermés aux modifications</em>. En d'autres termes,
    il s'agit de pouvoir enrichir aisément les fonctionnalités d'un module sans
    avoir à en modifier son comportement.
</p>

<p>
    Le dernier exemple présenté à la fin du principe de responsabilité unique se
    conforme en effet au principe ouvert / fermé. En effet, il est très facile
    de supporter de nouveaux formats de sérialisation des données ainsi que de
    nouveaux adapteurs pour des systèmes de stockage. Il s'agit tout simplement
    de créer de nouvelles classes respectant les contrats des interfaces sans
    avoir à changer la moindre classe existante.
</p>

<pre class="language-php"><code>$importer = new DataImporter(new CsvFileLoader(), new MySQLGateway());
$importer = new DataImporter(new XmlFileLoader(), new MongoGateway());
$importer = new DataImporter(new JsonFileLoader(), new ElasticSearchGateway());
</code></pre>

<p>
    Comme le montre le code ci-dessus, l'objet <code>DataImporter</code> n'a pas
    été modifié. Il s'agit juste de lui injecter de nouvelles implémentations
    des interfaces <code>FileLoader</code> et <code>Gateway</code> afin de
    pouvoir utiliser par exemple des données sérialisées en JSON à insérer dans
    une base MongoDB. Inutile de changer l'implémentation interne de la classe
    <code>DataImporter</code> pour y parvenir.
</p>

<h3>Principe de substitution de Liskov (<em>LSP</em>)</h3>

<blockquote>
  <p><em>Derived classes must be substitutable for their base classes.</em><br />
  Robert C. Martin.</p>
</blockquote>

<p>
    Le principe de substitution de Liskov indique qu'il doit être possible pour
    un objet de type <code>T</code> acceptant une dépendance de type
    <code>S</code>, de pouvoir remplacer cette dernière par une dépendance d'un
    type dérivé de <code>S</code> sans que cela est le moindre impact sur le
    fonctionnement du code.
</p>

<p>
    Derrière cette définition aux airs savants se cache en réalité un principe
    fondamental de la conception orientée objet : l'héritage. Il s'agit en
    réalité de toujours conserver les signatures des méthodes d'une classe
    parent dérivée ainsi que la nature des valeurs de retour de ces
    dernières.
</p>

<p>
    En PHP, il est obligatoire d'implémenter strictement les mêmes signatures
    des méthodes de la classe parent lorsque celle-ci est spécialisée et que ses
    méthodes sont redéfinies. En revanche, comme PHP est un langage faiblemenent
    typé, il est possible de retourner n'importe quel type de valeur en sortie
    d'une méthode.
</p>

<p>
    Le principe de substitution de Liskov impose donc de s'assurer que la valeur
    retournée par une méthode redéfinie, est bien du même type que celle
    initialement retournée par la méthode de la classe parente.
</p>

<pre class="language-php"><code>&lt;?php

abstract class AbstractLoader implements FileLoader
{
    public function load($file)
    {
        if (!file_exists($file)) {
            throw new \InvalidArgumentException(sprintf('%s does not exist.', $file));
        }

        return [];
    }
}

class CsvFileLoader extends AbstractLoader
{
    public function load($file)
    {
        $records = parent::load($file);

        if (false !== $handle = fopen($file, 'r')) {
            while ($record = fgetcsv($handle)) {
                $records[] = $record;
            }
        }
        fclose($handle);

        return $records;
    }
}
</code></pre>

<p>
    Dans l'exemple de code ci-dessus, la classe <code>CsvFileLoader</code>
    hérite de la classe abstraite <code>AbstractLoader</code> et redéfinit sa
    méthode <code>load</code>. La signature de la méthode est respectée ainsi
    que les types de retour. Dans les deux classes, la méthode <code>load</code>
    est programmée pour retourner un tableau d'enregistrements.
</p>

<p>
    Si toutes les classes concrètes dérivant la classe
    <code>AbstractLoader</code> conservent les mêmes types de paramètres
    d'entrée et de sortie, alors c'est qu'elles s'engagent à respecter le
    contrat de l'interface <code>FileLoader</code>. Par conséquent, il est
    possible de remplacer un objet <code>CsvFileLoader</code> par une instance
    de la classe <code>XmlFileLoader</code> dans le constructeur de la classe
    <code>DataImporter</code>.
</p>

<p>
    En pratique dans la vie quotidienne, c'est comme changer un pneu crevé d'une
    marque X par un autre pneu d'une marque Y. En effet, les fabricants de
    pneumatiques suivent les spécifications techniques standardisées des
    constructeurs automobiles. En programmation orientée objet, une interface
    est une spécification technique qui définit un modèle d'implémentation.
</p>

<h3>Le principe de ségrégation d'interfaces (<em>ISP</em>)</h3>

<blockquote>
  <p><em>Make fine grained interfaces that are client specific.</em><br />
  Robert C. Martin.</p>
</blockquote>

<p>
    Le principe de ségrégation d'interfaces est identique au principe de
    responsabilité unique des classes (<em>SRP</em>), mais à la différence qu'il
    s'applique aux interfaces. Le principe de responsabilité unique stipule
    qu'une classe doit avoir une seule responsabilité. Eh bien c'est la même
    chose pour une interface qui se doit d'être la plus petite possible et
    représenter l'implémentation d'une seule tâche.
</p>

<p>
    L'avantage des interfaces par rapport aux classes en PHP, c'est qu'elles se
    composent facilement grâce à l'héritage. En PHP, une classe peut dériver
    qu'une seule classe parente à la fois. En revanche, une interface peut
    elle-même dériver une, voire plusieurs interfaces à la fois. L'héritage
    multiple existe bel et bien en PHP !
</p>

<p>
    Un très bel exemple de composition d'interfaces par héritage multiple existe
    dans le framework Symfony. Il s'agit de l'interface
    <code>RouterInterface</code> implémentée par la classe
    <code>Router</code>.
</p>

<p>
    Le routeur de Symfony a pour rôle de générer des urls et de faire
    correspondre une url à des paramètres de route. C'est pour cette raison que
    la classe <code>Router</code> définit les deux méthodes publiques
    <code>generate</code> et <code>match</code>.
</p>

<p>
    A première vue, ces deux méthodes peuvent être réunies dans une interface
    commune <code>RouterInterface</code>. Cependant, le routeur peut être
    injecté à divers endroits dans le framework pour réaliser ces tâches
    séparément et donc unitairement. Le fait de n'avoir besoin que de la méthode
    <code>generate</code> ou de la méthode <code>match</code> à un instant T
    dans un objet justifie donc de décomposer plus finement cette
    <code>RouterInterface</code> en deux plus petites interfaces.
</p>

<pre class="language-php"><code>&lt;?php

interface UrlGeneratorInterface
{
    public function generate($name, $parameters = array());
}

interface UrlMatcherInterface
{
    public function match($pathinfo);
}

interface RouterInterface extends UrlMatcherInterface, UrlGeneratorInterface
{
    public function getRouteCollection();
}
</code></pre>

<p>
    Ainsi, par exemple, il devient possible de typer un argument uniquement avec
    l'interface <code>UrlGeneratorInterface</code> quand une classe a besoin
    d'appeler seulement la méthode <code>generate</code> sur cet argument. C'est
    d'ailleurs exactement ce qui est fait dans la classe d'extension Twig
    <code>RoutingExtension</code> qui reçoit dans son constructeur le routeur
    afin de permettre aux fonctions Twig <code>path</code> et <code>url</code>
    de générer des chemins.
</p>

<pre class="language-php"><code>&lt;?php

namespace Symfony\Bridge\Twig\Extension;

use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

class RoutingExtension extends \Twig_Extension
{
    private $generator;

    public function __construct(UrlGeneratorInterface $generator)
    {
        $this-&gt;generator = $generator;
    }

    public function getPath($name, $parameters = array())
    {
        return $this-&gt;generator-&gt;generate($name, $parameters);
    }
}
</code></pre>

<p>
    Dans cet exemple, l'argument <code>$generator</code> peut être aussi bien le
    routeur ou bien un autre objet dédié à cette responsabilité de générer des
    urls.
</p>

<p>
    Un dernier avantage à fractionner des interfaces en petites interfaces
    concerne la testabilité du code. En effet, plus les interfaces sont petites,
    et plus il est facile de tester leurs implémentations. Aussi, dans un
    framework de tests unitaires comme PHPUnit, il est bien plus facile de «
    mocker » une interface plutôt qu'une classe concrète ou abstraite.
</p>

<h3>Le principe d'injection de dépendance (<em>DIP</em>)</h3>

<blockquote>
  <p><em>Depend on abstractions, not on concretions.</em><br />
  Robert C. Martin.</p>
</blockquote>

<p>
    Enfin, le principe d'injection de dépendance (aussi appelé principe
    d'inversion des dépendances) stipule qu'il faille programmer par rapport à
    des abstractions plutôt que des implémentations.
</p>

<p>
    Le code ci-dessous réalise complètement l'inverse puisque la classe
    <code>DataImporter</code> dépend directement de deux implémentations
    concrètes du fait de l'instanciation des deux classes
    <code>CsvFileLoader</code> et <code>DataGateway</code>.
</p>

<pre class="language-php"><code>&lt;?php

class DataImporter
{
    private $loader;
    private $gateway;

    public function __construct()
    {
        $this-&gt;loader  = new CsvFileLoader();
        $this-&gt;gateway = new DataGateway();
    }
}
</code></pre>

<p>
    Instancier les dépendances directement à l'intérieur du constructeur limite
    considérablement les capacités à étendre le code mais aussi à le tester. En
    effet, en codant en dur une instanciation avec le mot clé <code>new</code>,
    la classe <code>DataImporter</code> devient fortement couplée à sa
    dépendance <code>CsvFileLoader</code>. Cela signifie aussi qu'il est
    impossible de remplacer cette dépendance par une autre pour un besoin
    ultérieur. Aussi cela empêche de tester unitairement la classe
    <code>DataImporter</code> puisque les dépendances ne peuvent être remplacées
    par des doublures (« mocks »).
</p>

<p>
    Pour se conformer au principe d'injection de dépendances, il s'agit tout
    simplement de créer les deux dépendances de la classe
    <code>DataImporter</code> à l'extérieur de celle-ci, puis de les injecter
    dans le constructeur. Cela a pour effet immédiat d'éliminer l'utilisation du
    mot clé <code>new</code> et donc de réduire le couplage entre les
    composants.
</p>

<pre class="language-php"><code>&lt;?php

class DataImporter
{
    private $loader;
    private $gateway;

    public function __construct(CsvFileLoader $loader, DataGateway $gateway)
    {
        $this-&gt;loader  = $loader;
        $this-&gt;gateway = $gateway;
    }
}
</code></pre>

<p>
    Bien que cette classe reçoive désormais ses dépendances par l'intermédiaire
    de son constructeur, elle reste néanmoins fortement couplée aux deux
    implémentations injectées. En effet, les arguments du constructeur sont ici
    typés avec des classes concrètes (donc des implémentations). En typant un
    paramètre avec une classe concrète (ou abstraite également), cela oblige à
    injecter forcément une instance de cette classe ou bien une instance d'une
    classe dérivée. C'est du au fait que PHP supporte uniquement de l'héritage
    simple pour les classes.
</p>

<p>
    Pour rappel, le principe d'injection de dépendance stipule qu'une classe
    doit dépendre d'abstractions et non d'implémentations. Par conséquent, il
    s'agit de remplacer le typage des arguments par des interfaces au lieu de
    classes.
</p>

<pre class="language-php"><code>&lt;?php

class DataImporter
{
    private $loader;
    private $gateway;

    public function __construct(FileLoader $loader, Gateway $gateway)
    {
        $this-&gt;loader  = $loader;
        $this-&gt;gateway = $gateway;
    }
}
</code></pre>

<p>
    Ici les interfaces <code>FileLoader</code> et <code>Gateway</code>
    favorisent l'injection de n'importe quels objets implémentant ces
    dernières.
</p>

<h2>Conclusion</h2>

<p>
    <em>STUPID</em> et <em>SOLID</em> sont deux principes qui s'opposent. Le
    premier est un ensemble de mauvaises pratiques et d'écueils à éviter
    absolument tandis que l'autre invite à suivre les bonnes pratiques. Avec ces
    deux outils en sa possession, le développeur pourra facilement identifier
    les problèmes dans son code et trouver les remèdes pour les corriger.
</p>
{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/hugo-hamon.png') }}" />
{% endblock %}

{% block article_bio %}
<h2>
    <a href="{% block author_url 'https://connect.sensiolabs.com/profile/hhamon' %}">{% block article_author 'Hugo Hamon' %}</a>
</h2>
<p>
    Après l'obtention d'une licence professionnelle en développement informatique à l'Université de Savoie,
    <a href="https://connect.sensiolabs.com/profile/hhamon">Hugo Hamon</a> a rejoint en 2008 la société
    <a href="http://sensiolabs.com">SensioLabs</a> à Paris. Il occupe aujourd'hui le poste de responsable des formations
    chez SensioLabs. Au quotidien, il anime des formations professionnelles pour ses clients à travers le monde et
    participe également en tant qu'orateur à de nombreuses conférences internationales. Hugo Hamon est également un
    contributeur actif au projet Symfony ainsi qu'à d'autres projets Open Source de PHP. Il est enfin co-auteur
    d'ouvrages sur PHP et Symfony aux éditions Eyrolles.
    <a href="https://twitter.com/hhamon">@hhamon</a> sur Twitter.</p>
{% endblock %}
