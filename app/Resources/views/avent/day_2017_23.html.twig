{% extends 'avent/day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 23 - Comment l’architecture hexagonale nous a facilité la vie !" %}

{% block article_content %}
    <h1 id="comment-l-architecture-hexagonale-nous-a-facilite-la-vie">Comment l’architecture hexagonale nous a facilité la vie !</h1>

    <h2 id="commencons-le-projet">Commençons le projet</h2>
    <p>
        Nouveau projet, nouvelle équipe et nouveau client pour moi.
        Comme d’habitude j’ai hâte de commencer le projet et de connaître ce client pour qui je n’ai jamais travaillé.
        Je commence à faire mon enquête pour me faire une vague idée sur ce client qui m’est inconnu.
    </p>
    <ul>
        <li>« Oh le client est bien, mais pas trop habitué au mode agile. »</li>
        <li>« C’est un client avec des méthodes de travail un peu à l’ancienne »</li>
        <li>« Tu vas voir il faut s’appuyer sur des Webservice <abbr title="Simple Object Access Protocol"><abbr title="Simple Object Access Protocol">SOAP</abbr></abbr> bien sympathiques »</li>
        <li>« Leur plateforme de dev n’est pas très stable, parfois on ne peut plus utiliser les WS de dev, car ils ne sont plus disponibles. »</li>
    </ul>

    <p>
        Et j’en passe…
    </p>

    <p>
        Vous vous imaginez bien que même avant de commencer je me suis dis, ça va être drôle, je sens qu’on va bien s’amuser !
    </p>

    <p>
        <strong>Problème principal :</strong>
        trouver un outil qui nous permette de transformer les Webservices <abbr title="Simple Object Access Protocol">SOAP</abbr> et leurs méthodes en langage objet.
        Ça tombe bien, une petite librairie PHP nous permet d’effectuer une génération de classes à partir des <abbr title="Web Services Description Language">WSDL</abbr> (langage qui permet de décrire l'emplacement d'un service web ainsi que ses opérations),
        Génial !! Problème résolu, YES !
    </p>
    <p>
        <strong>Second problème (celui qui nous intéresse aujourd'hui) :</strong>
        comment pouvons-nous travailler sans dépendre de leur « super » Webservices <abbr title="Simple Object Access Protocol">SOAP</abbr> ?
    </p>
    <p>
        C'est là que nous avons l'idée de mettre en place une architecture hexagonale,
        car ça va nous permettre de détacher tout ce qui est métier de l’infrastructure et ainsi on pourra utiliser soit les Webservices <abbr title="Simple Object Access Protocol">SOAP</abbr>,
        soit une autre source de données (SQLite pour nous).
    </p>

    <h2>Comment avons-nous utilisé ce principe d’architecture hexagonale ?</h2>
    <p>
        Voici l'article que nous avons utilisé comme point d'entrée, dans notre démarche :
        <a href="http://blog.xebia.fr/2016/03/16/perennisez-votre-metier-avec-larchitecture-hexagonale/">Pérennisez votre métier avec l'architecture hexagonale</a>
    </p>

    <h4 style="text-align: center;">Principe schématisé</h4>
    <p style="text-align:center;">
        <figure>

            <img src="{{ asset('bundles/afsyfront/images/avent/2017/23/23-archi-hexagonale.png') }}" alt="Architecture hexagonale" />
            <figcaption style="text-align: center">
                (source :
                <a href="http://blog.xebia.fr/2016/03/16/perennisez-votre-metier-avec-larchitecture-hexagonale/">
                    http://blog.xebia.fr/2016/03/16/perennisez-votre-metier-avec-larchitecture-hexagonale/
                </a>
                )
            </figcaption>
        </figure>
    </p>

    <p>
        Concrètement nous avons toute notre partie métier, qui possède la logique de l'application, ce qu'elle doit faire exactement.
        Autour de laquelle nous pouvons connecter une <abbr title="Interface de programmation applicative">API</abbr>, une <abbr title="Base de données">BDD</abbr>, un service de cache, etc.
    </p>
    <p>
        Tous les services ne doivent en aucun cas impacter la logique métier, il faut donc faire en sorte que tous soient un maximum indépendants.
        Pour ce faire nous allons créer des interfaces permettant aux adaptateurs des différents services de se brancher aux métiers sans l'impacter.
        Avec cette architecture nous pourrons ajouter n'importe quel service pour traiter nos données (repository, persister) sans qu'il y n'ait d'impact sur le métier !
        Voici le découpage de notre application dans le répertoire <code>/src</code>  :
    </p>
    <pre>
        <code>
    src
    ├── AppBundle
    │   ├── AppBundle.php
    │   ├── Command
    │   ├── Component
    │   ├── Controller
    │   ├── DependencyInjection
    │   ├── Dictionary
    │   ├── Doctrine
    │   ├── Event
    │   ├── Exception
    │   ├── Form
    │   ├── Http
    │   ├── Monolog
    │   ├── Provider
    │   ├── Repository
    │   ├── Resources
    │   ├── Response
    │   ├── Security
    │   ├── Sort
    │   ├── Transformer
    │   ├── Twig
    │   ├── Validator
    │   └── Webview
    ├── Domain
    │   ├── Model
    │   ├── Persister
    │   └── Repository
    └── Infrastructure
    ├── Cache
    ├── Doctrine
    ├── Sqlite
    └── Webservice
        </code>
    </pre>
    <ul>
        <li>
            <code>/AppBundle :</code> code symfony
            <ul>
                <li><code>/Provider :</code> services faisant le lien entre les Repository et les services symfony (ex. token_storage)</li>
            </ul>
        </li>
        <li>
            <code>/Domain :</code>contient une abstraction du métier
            <ul>
                <li><code>/Model:</code> représente les modèles de données utilisés sur l’application</li>
                <li><code>/Persister:</code> interface définissant comment les modèles sont sauvegardés</li>
                <li><code>/Repository:</code> interface définissant comment les modèles sont récupérés</li>
            </ul>
        </li>
        <li><code>/Infrastructure :</code> contient les implémentations des interfaces du répertoire /Domain</li>
    </ul>

    <p>
        Voici notre démarche de développement pour chaque nouvelle fonctionnalité :
    </p>
    <ul>
        <li>Création des modèles.</li>
        <li>Création des interfaces <code>Persister</code> et <code>Repository</code>. Notre politique est de créer uniquement ce dont on a besoin. Si nous avons simplement besoin de récupérer les données, on ne crée qu’un repository et vice-versa.</li>
        <li>Développement de la partie SQLite (persister / repository) pour valider le côté fonctionnel de l'application.</li>
        <li>Création des tests fonctionnels (behat dans notre cas) pour valider que tout fonctionne.</li>
        <li>Création des tests unitaires.</li>
        <li>Si tout est ok en SQLite, développement des adapteurs pour la partie Webservice.</li>
        <li>Si besoin, développement d'adaptateurs de cache nous permettant de créer le cache et de l'utiliser à la place des Webservices.</li>
    </ul>

    <p>Voici à quoi peut ressembler notre application aujourd'hui :</p>

    <h4 style="text-align: center;">Pour les <code>Repository</code> (lecture des données)</h4>
    <p style="text-align:center">
        <figure>
            <img src="{{ asset('bundles/afsyfront/images/avent/2017/23/23-archi-hexagonale-repository.png') }}" alt="persister" />
            <figcaption style="text-align: center">
                (source : schéma déssiné par <a href="https://github.com/melicerte">@melicerte</a>)
            </figcaption>
        </figure>
    </p>
    <br/><br/>
    <h4 style="text-align: center;">Pour les <code>Persister</code> (écriture des données)</h4>
    <p style="text-align:center">
        <figure>
            <img src="{{ asset('bundles/afsyfront/images/avent/2017/23/23-archi-hexagonale-persister.png') }}" alt="persister" />
            <figcaption style="text-align: center">
                (source : schéma déssiné par <a href="https://github.com/melicerte">@melicerte</a>)
            </figcaption>
        </figure>
    </p>

    <h2 id="exemple">Exemple</h2>

    <p>Nous allons ajouter la possibilité de lire un article de blog.</p>

    <h4>D'abord nous créons un modèle <code>Article</code>, avec un titre et un contenu.</h4>

    <pre class="language-php"><code>namespace AppBundle\Domain\Model;

class Article
{
    /** @var string */
    private $title;

    /** @var string */
    private $content;

    /**
    * @param string $title
    * @param string $content
    */
    public function __construct(string $title, string $content)
    {
        $this->title = $title;
        $this->content = $content;
    }

    /**
    * @return string
    */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
    * @param string $title
    */
    public function setTitle(string $title)
    {
        $this->title = $title;
    }

    /**
    * @return string
    */
    public function getContent(): string
    {
        return $this->content;
    }

    /**
    * @param string $content
    */
    public function setContent(string $content)
    {
        $this->content = $content;
    }
}
        </code>
    </pre>
    <h4>Création de l'interface pour le <code>Repository</code>, car nous souhaitons lire le contenu d'un article.</h4>
    <pre class="language-php"><code>namespace AppBundle\Domain\Repository;

use AppBundle\Domain\Model;

interface Article
{
   /**
    * @param string $title
    *
    * @return Model\Article
    */
   public function getArticleByTitle(string $title): Model\Article;
}
        </code>
    </pre>

    <h4>Création du repository SQLite</h4>

    <pre class="language-php"><code>namespace AppBundle\Infrastructure\Sqlite\Repository;

use Doctrine\DBAL\Connection;
use AppBundle\Domain\Model;
use AppBundle\Domain\Repository;

class Article implements Repository\Article
{
    private $connection;

    /**
     * @param Connection      $connection
     * @param Hydrator\Agency $hydrator
     */
    public function __construct(Connection $connection, Hydrator\Agency $hydrator)
    {
        $this->connection = $connection;
    }

    public function getArticleByTitle(string $title): Model\Article
    {
        $qb = $this->connection->createQueryBuilder();

        $result = $qb
            ->select('a.*')
            ->from('article', 'a')
            ->where('a.title = :title')
            ->setParameter('title', $title)
            ->execute()
            ->fetch()
        ;

        if ($result === false) {
            throw new UserNotFoundException('Cette article n\'existe pas.');
        }

        return $this->hydrator->hydrate($result);
    }
}

        </code>
    </pre>


    <h4>Création du <code>Repository</code> avec les Webservices <abbr title="Simple Object Access Protocol">SOAP</abbr></h4>
    <pre class="language-php"><code>namespace AppBundle\Infrastructure\Webservice\Repository;

use AppBundle\Webservice\Article\ArticleService;
use AppBundle\Domain\Model;
use AppBundle\Domain\Repository;
use AppBundle\Infrastructure\Webservice\RequestBuilder\LireArticle;

class Agency implements Repository\Agency
{
    private $articleService;

    private $requestBuilder;

    /**
     * @param ArticleService   $articleService
     * @param LireArticle      $requestBuilder
     */
    public function __construct(
        ArticleService $articleService,
        LireArticle $requestBuilder
    ) {
        $this->articleService  = $articleService;
        $this->requestBuilder = $requestBuilder;
    }

    /**
     * {@inheritdoc}
     */
    public function getArticleByTitle(string $title): Model\Article
    {
        $request  = $this->requestBuilder->build($title);
        $response = $this->articleService->lireArticle($request);

        return $response;
    }
}
        </code>
    </pre>

    <br/>
    <p>
        Chaque service utilisé a sa propre manière d'aller chercher l'information, mais le métier, lui doit seulement utiliser la méthode
        <code class="language-none">getArticleByTitle</code>. Donc, pour n'importe quel service utilisé la façon de récupérer les données pour la partie métier reste la même.
    </p>

    <h2 id="et-aujourd-hui-ca-donne-quoi">Et aujourd'hui ça donne quoi ?</h2>

    <p>
        Alors, comment je peux affirmer que cette architecture m'a facilité la vie.
        Et bien nous nous sommes retrouvés avec des Webservices en panne toute une journée, alors que nous devions travailler sur le projet.
        Du coup la partie SQLite nous a permis d'avancer sans coupure de développement, pas de pause involontaire dans le projet.
    </p>

    <p>
        Une partie métier bien maitrisée, on a pu vraiment se concentrer sur les fonctionnalités désirées par le client.
        Et cette architecture nous a permis de certifier au client que toute la partie métier n'aura pas à être modifiée s'il décide de passer des Webservices <abbr title="Simple Object Access Protocol">SOAP</abbr> à une API REST par exemple.
        Et oui, nous n'aurons que les adaptateurs à ajouter, elle est pas belle la vie ?!
    </p>

    <p>
        Pour les nouvelles personnes arrivant sur le projet il est vrai que ce n'est pas tout simple,
        mais dès qu'ils ont le projet en mains ça roule plutôt pas mal !
        Voici pour preuve le petit témoignage d'un de mes collègues qui a du travailler sur le projet alors que tout était déjà en place :
    </p>
    <blockquote>
        <p>
            "C'est très dur de comprendre l'architecture quand on débarque sur le projet.
            Mais après tu vois et comprends pourquoi c'est fait comme ça, et tu te dis : Ah oui c'est pas mal au final"
        </p>
    </blockquote>


    <p>
        Malgré les bons cotés de ce style d'architecture je ne pense pas qu'il soit la solution à tous les problèmes.
        Comme pour tous projets il faut bien sûr réfléchir à ce qui convient le mieux aux besoins et aux contraintes clients.
    </p>


{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/23/23-celine-morin.jpg') }}" alt="Céline Morin" />
{% endblock %}

{% block article_bio %}
    <h2>
        <a href="{% block author_url %}https://twitter.com/Titi_Celine{% endblock %}" target="_blank">
            {% block article_author %}Céline Morin{% endblock %}
        </a>
    </h2>
    <p>
        Développeuse Back-end Symfony chez
        <a target="_blank" href="//biig.fr">BiiG</a>.
    </p>
{% endblock %}
