{% extends 'Avent/day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 21 - Symfony et WebSockets" %}

{% block article_content %}
  <style type="text/css">
    img {
      display: inline-block;
      margin: 0 auto;
    }

    .centered-image {
      margin-top: 1em;
      text-align: center;
    }

    .centered-image figcaption {
      display: none;
    }
  </style>
  <h1 id="symfonyetwebsockets">Symfony et WebSockets</h1>

  <p>
    Nous allons voir aujourd’hui comment mettre en place facilement et rapidement un Chat dans votre projet Symfony.
    Mais avant de commencer ce tutoriel, reprenons un peu quelques bases.
  </p>
  <figure class="centered-image">
    <img src="https://media.giphy.com/media/130OHeDvqdHiy4/giphy.gif" alt="Cat on computer" />
    <figcaption>Cat on computer</figcaption>
  </figure>

  <h2 id="introduction">Introduction</h2>

  <p>
    Dans un site web traditionnel, lorsqu’on veut faire des échanges entre la page web qu’un utilisateur est en train
    de consulter et le serveur, le tout sans recharger la page, on fait une requête en
    <abbr title="Asynchronous JavaScript And Xml" lang="en">AJAX</abbr>.
    C’est un procédé assez simple à mettre en place mais qui a un gros inconvénient :
    la communication entre le client et le serveur ne se fait que dans un sens.
    Le client fait une requête au serveur, qui lui répond en lui apportant ce qu’il a demandé.
    Le problème, c’est que dans certains cas, la demande du client peut nécessiter du temps.
    Dans ce cas là, ce client est obligé de faire des requêtes régulières au serveur pour lui demander où en est sa
    demande. Évidemment, ça ne fait plaisir ni au client, ni au serveur parce que ça nécessite beaucoup plus
    de ressources que nécessaire.
  </p>
  <p>
    C’est là que les WebSockets interviennent. Ils permettent, par l’intermédiaire d’un serveur supplémentaire,
    la création d’un système de notifications et l’envoi de messages du client au serveur… et vice versa !
  </p>

  <h2 id="installationdesymfonyetderatchet">Installation de Symfony et de Ratchet</h2>
  <p>
    Pour réaliser ce tutoriel, nous allons partir d’une version de <strong>Symfony 3.4</strong>,
    avec la librairie <strong>Ratchet</strong>.
    Ratchet est une librairie PHP qui facilite la mise en place d’applications utilisant des WebSockets
    et qui va nous faire gagner pas mal de temps (cf :
    <a href="http://www.raphael-goncalves.fr/blog/chat-temps-reel-en-php-avec-des-websocket">
      l’article de Raphaël Gonçalves</a>).
  </p>
  <p>
    À noter : j’aurais préféré utiliser Symfony 4 (fraîchement sorti), mais, à l’heure où j’écris ce tutoriel,
    la librairie <code>cboden/ratchet</code> n’est pas encore compatible avec Symfony 4
    (<a href="https://github.com/ratchetphp/Ratchet/pull/579">ça ne saurait tarder</a>).
  </p>
  <pre><code class="language-bash">$ symfony new afsy-websocket-tutorial 3.4
$ cd afsy-websocket-tutorial
$ composer require cboden/ratchet
</code></pre>

  <h2 id="creationdenotreserveurdechat">Création de notre serveur de Chat</h2>

  <h3 id="creationduserveur">Création du serveur</h3>

  <p>
    Pour créer notre serveur de chat, nous n'aurons besoin que d’une seule chose :
    une classe qui implémente l’interface <code class="language-php">Ratchet\MessageComponentInterface</code>.
    Nous créons donc le fichier <code class="language-none">src/AppBundle/Server/Chat.php</code> avec le contenu suivant :
  </p>

  <pre><code class="language-php">// src/AppBundle/Server/Chat.php
namespace AppBundle\Server;

use Ratchet\ConnectionInterface;
use Ratchet\MessageComponentInterface;

class Chat implements MessageComponentInterface
{
    private $clients;

    public function __construct()
    {
        $this-&gt;clients = new \SplObjectStorage();
    }

    public function onOpen(ConnectionInterface $conn)
    {
        $this-&gt;clients-&gt;attach($conn);
        $conn-&gt;send(sprintf('New connection: Hello #%d', $conn-&gt;resourceId));
    }

    public function onClose(ConnectionInterface $closedConnection)
    {
        $this-&gt;clients-&gt;detach($closedConnection);
        echo sprintf('Connection #%d has disconnected\n', $closedConnection-&gt;resourceId);
    }

    public function onError(ConnectionInterface $conn, \Exception $e)
    {
        $conn-&gt;send('An error has occurred: '.$e-&gt;getMessage());
        $conn-&gt;close();
    }

    public function onMessage(ConnectionInterface $from, $message)
    {
        $totalClients = count($this-&gt;clients) - 1;
        echo vsprintf(
            'Connection #%1$d sending message &quot;%2$s&quot; to %3$d other connection%4$s'.&quot;\n&quot;, [
            $from-&gt;resourceId,
            $message,
            $totalClients,
            $totalClients === 1 ? '' : 's'
        ]);
        foreach ($this-&gt;clients as $client) {
            if ($from !== $client) {
                $client-&gt;send($message);
            }
        }
    }
}
</code></pre>

  <h3 id="creationduscriptdelancementduserveurdechat">Création du script de lancement du serveur de Chat</h3>

  <p>Et voilà, c’est tout… Ou presque. Il faut maintenant le lancer. Pour cela, deux possibilités s’offrent à nous : </p>

  <ol>
    <li>Faire un script PHP qui charge cette classe ;</li>
    <li>Créer une commande Symfony.</li>
  </ol>

  <p>
    Évidemment, nous allons créer une commande Symfony : ça semble plus cohérent et, accessoirement,
    ça nous permet de rester dans le sujet.
  </p>

  <pre><code class="language-php">// src/AppBundle/Command/ChatServerCommand.php
namespace AppBundle\Command;

use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Ratchet\Server\IoServer;
use AppBundle\Server\Chat;

class ChatServerCommand extends ContainerAwareCommand
{
    protected function configure()
    {
        $this
            -&gt;setName('afsy:app:chat-server')
            -&gt;setDescription('Start chat server');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $server = IoServer::factory(
            new Chat(),
            8080,
            '127.0.0.1'
        );
        $server-&gt;run();
    }
}
</code></pre>

  <p>
    Nous pourrions spécifier le port <code class="language-none">8080</code> en paramètre de l’application,
    mais nous préférons rester sur l’essentiel.
  </p>

  <h3 id="lancementduserveurdechat">Lancement du serveur de chat</h3>

  <figure class="centered-image">
    <img src="https://media.giphy.com/media/WdkpFbqU4KPyE/giphy.gif" alt="Ninja cat"/>
    <figcaption>Ninja cat</figcaption>
  </figure>

  <p>Une fois la classe et la commande créées, il ne reste plus qu’à lancer la commande et à la tester :</p>

  <pre><code class="language-bash">$ php bin/console afsy:app:chat-server</code></pre>

  <p>
    Et là, il ne se passe (presque) rien ! Tout est normal. Pour tester que le script fonctionne bien,
    il faut démarrer une connexion à ce serveur (depuis une autre fenêtre de terminal) :
  </p>

  <pre><code class="language-bash">$ telnet 127.0.0.1 8080
# Et vous devriez avoir un message qui ressemble à :
# Trying 127.0.0.1...
# Connected to localhost.
# Escape character is '^]'.
# New connection: Hello #545
</code></pre>

  <p>
    Vous pouvez évidemment ouvrir plusieurs fenêtres comme celle-ci et tester que les messages envoyés
    par une des fenêtres sont bien envoyés aux autres fenêtres.
  </p>

  <h2 id="miseenplaceduwebsocket">Mise en place du WebSocket</h2>

  <p>
    Maintenant que nous avons vu que le serveur de chat est opérationnel,
    nous pouvons créer notre page de chat. <br />
    Pour cela, nous avons seulement besoin de modifier la page par défaut de Symfony pour y ajouter notre code.
  </p>

  <h3 id="creationdelapageduchat">Création de la page du chat</h3>

  <p>
    Nous commençons tout d’abord par modifier le contrôleur pour remplacer le contenu de l’action
    <code class="language-php">indexAction()</code> par :
  </p>

  <pre><code class="language-php">// src/AppBundle/Controller/DefaultController.php
return $this-&gt;render('default/index.html.twig', [
    'ws_url' =&gt; 'localhost:8080',
]);
</code></pre>

  <p>Ainsi que le contenu de la vue associée par le contenu suivant :</p>

  <pre><code class="language-twig">{% raw %}{# app/Resources/views/default/index.html.twig #}
{% extends 'base.html.twig' %}
{% block body %}
  &lt;div class=&quot;container&quot;&gt;
  &lt;h1&gt;AFSY - WebSockets and Symfony&lt;/h1&gt;
  &lt;div id=&quot;ws-content-receiver&quot;&gt;
  Connecting...
  &lt;/div&gt;
  &lt;/div&gt;
{% endblock %}
{% block javascripts %}
  &lt;script type=&quot;text/javascript&quot;&gt;
  var wsUrl = '{{ ws_url }}';
  &lt;/script&gt;
  &lt;script type=&quot;text/javascript&quot; src=&quot;{{ asset('bundles/app/js/sf-websocket.js') }}&quot;&gt;&lt;/script&gt;
{% endblock %}
{% endraw %}</code></pre>

  <p>
    Nous sommes maintenant fin prêts à mettre en place le JavaScript dans le fichier <code class="language-none">js/sf-websocket.js</code>.
    Petit conseil avant de passer à la suite : il est grandement conseillé de mettre en place
    <a href="https://eslint.org">ESLint</a> sur le projet
    (afin d’éviter de nombreuses erreurs et d’avoir une base de code uniforme).
  </p>

  <h3 id="miseenplacedujavascriptetduwebsocket">Mise en place du JavaScript et du WebSocket</h3>

  <p>
    Avant de mettre en place le JavaScript, il est important de modifier la commande du serveur.
    Celle que nous avons créée ne supporte que les appels de la ligne de commande et il faut modifier
    le premier paramètre du constructeur de <code class="language-php">IoServer::factory()</code>
    pour pouvoir ajouter un support en HTTP et en WebSocket.
  </p>

  <p>Notre serveur se lancera donc de la manière suivante à partir de maintenant :</p>

  <pre><code class="language-php">// src/AppBundle/Command/ChatServerCommand.php
use Ratchet\Http\HttpServer;
use Ratchet\WebSocket\WsServer;

$server = IoServer::factory(
    new HttpServer(new WsServer(new Chat())),
    8080,
    '127.0.0.1'
);
</code></pre>

  <p>Nous pouvons maintenant modifier notre fichier JavaScript pour y ajouter le contenu suivant :</p>

  <pre><code class="language-JavaScript">// src/AppBundle/Resources/public/js/sf-websocket.js
/* globals wsUrl: true */
(function () {
  'use strict';

  var _receiver = document.getElementById('ws-content-receiver');
  var ws = new WebSocket('ws://' + wsUrl);

  ws.onopen = function () {
    ws.send('Hello');
    _receiver.innerHTML = 'Connected !';
  };

  ws.onmessage = function (event) {
    _receiver.innerHTML = event.data;
  };

  ws.onclose = function () {
    _receiver.innerHTML = 'Connection closed';
  };

  ws.onerror = function () {
    _receiver.innerHTML = 'An error occured!';
  };
})();
</code></pre>

  <h3 id="premierstests">Premiers tests</h3>

  <p>Pour faire notre premier test, nous avons besoin de :</p>

  <ol>
    <li>
      Installer les assets, pour que le fichier JavaScript soit pris en compte :
      <code class="language-bash">php bin/console assets:install --symlink</code> ;
    </li>
    <li>
      Lancer le serveur Symfony, pour que la page soit accessible :
      <code class="language-bash">php bin/console server:start</code> ;
    </li>
    <li>
      Lancer notre serveur de chat :
      <code class="language-bash">php bin/console afsy:app:chat-server</code> ;
    </li>
    <li>Et c’est déjà pas mal !</li>
  </ol>

  <p>Il ne nous reste plus qu’à consulter la page que nous venons de modifier pour voir le résultat suivant :</p>

  <figure class="centered-image">
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/21/premiers-tests.png') }}" alt="Premiers tests"/>
    <figcaption>Premiers tests</figcaption>
  </figure>

  <p>Ça y est, nous avons une connexion en WebSocket entre notre JavaScript et notre application Symfony.</p>

  <h2 id="creationduchat">Création du Chat</h2>

  <p>
    Maintenant que le plus dur est fait, nous allons créer un chat et vérifier que tout communique bien
    ensemble.
  </p>

  <h3 id="pimpmychat">Pimp My Chat</h3>

  <p>
    Pour ajouter la notion d’utilisateur et de canal, nous modifions notre serveur de chat
    pour lui ajouter trois propriétés :
  </p>

  <ul>
    <li>
      <code class="language-none">users</code> qui sera la liste des utilisateurs :
      une liste associative avec la clé qui correspond à l’id de la connexion
      et dont la valeur est un tableau associatif contenant l’object de connexion, le pseudo de l’utilisateur
      et la liste des canaux auxquels il est abonné
    </li>
    <li><code class="language-none">botName</code> qui sera notre utilisateur par défaut</li>
    <li><code class="language-none">defaultChannel</code> qui sera le nom du canal par défaut</li>
  </ul>

  <pre><code class="language-php">// src/AppBundle/Server/Chat.php
private $users = [];
private $botName = 'ChatBot';
private $defaultChannel = 'general';
</code></pre>

  <p>
    Une fois nos variables ajoutées, on modifie la méthode <code class="language-php">onOpen()</code>
    pour ajouter la connexion à la liste des utilisateurs :
  </p>

  <pre><code class="language-php">// src/AppBundle/Server/Chat.php
$this-&gt;users[$conn-&gt;resourceId] = [
    'connection' =&gt; $conn,
    'user' =&gt; '',
    'channels' =&gt; []
];
</code></pre>

  <p>
    Bien évidemment, on modifie aussi la méthode <code class="language-javascript">onClose()</code>
    pour supprimer l’utilisateur de la liste lors de sa déconnexion :
  </p>

  <pre><code class="language-php">// src/AppBundle/Server/Chat.php
unset($this-&gt;users[$closedConnection-&gt;resourceId]);
</code></pre>

  <p>
    Maintenant que nous avons un système qui peut gérer des utilisateurs et des canaux,
    nous pouvons modifier la communication entre le front et le serveur de chat pour tout passer en
    <abbr title="JavaScript Object Notation" lang="en">JSON</abbr>.
  </p>

  <p>
    Nous avons utilisé des messages basiques au début, mais pour avoir un chat digne de ce nom,
    le <abbr title="JavaScript Object Notation" lang="en">JSON</abbr> semble une des solutions les plus simples
    et efficaces à mettre en place.
  </p>

  <p>
    Pour commencer, nous devons modifier la réception des messages dans la méthode <code>Chat::onMessage()</code>
    pour gérer plusieurs actions :
  </p>

  <ul>
    <li><code class="language-javascript">subscribe</code> : pour lier un utilisateur à un canal ;</li>
    <li><code class="language-javascript">unsubscribe</code> : pour supprimer le lien entre l&#8217;utilisateur et le canal ;</li>
    <li><code class="language-javascript">message</code> : pour que l&#8217;utilisateur puisse poster un message.</li>
  </ul>

  <pre><code class="language-php">// src/AppBundle/Server/Chat.php
public function onMessage(ConnectionInterface $conn, $message)
{
    $messageData = json_decode($message);
    if ($messageData === null) {
        return false;
    }

    $action = $messageData-&gt;action ?? 'unknown';
    $channel = $messageData-&gt;channel ?? $this-&gt;defaultChannel;
    $user = $messageData-&gt;user ?? $this-&gt;botName;
    $message = $messageData-&gt;message ?? '';

    switch ($action) {
        case 'subscribe':
            $this-&gt;subscribeToChannel($conn, $channel, $user);
            return true;
        case 'unsubscribe':
            $this-&gt;unsubscribeFromChannel($conn, $channel, $user);
            return true;
        case 'message':
            return $this-&gt;sendMessageToChannel($conn, $channel, $user, $message);
        default:
            echo sprintf('Action &quot;%s&quot; is not supported yet!', $action);
            break;
    }
    return false;
}
</code></pre>

  <p>
    Comme vous pouvez le voir, ces actions auront, pour plus de lisibilité et de maintenabilité,
    chacune leur propre méthode :
  </p>

  <pre><code class="language-php">// src/AppBundle/Server/Chat.php
private function subscribeToChannel(ConnectionInterface $conn, $channel, $user)
{
    $this-&gt;users[$conn-&gt;resourceId]['channels'][$channel] = $channel;
    $this-&gt;sendMessageToChannel(
        $conn,
        $channel,
        $this-&gt;botName,
        $user.' joined #'.$channel
    );
}
</code></pre>

  <pre><code class="language-php">// src/AppBundle/Server/Chat.php
private function unsubscribeFromChannel(ConnectionInterface $conn, $channel, $user)
{
    if (array_key_exists($channel, $this-&gt;users[$conn-&gt;resourceId]['channels'])) {
        unset($this-&gt;users[$conn-&gt;resourceId]['channels']);
    }
    $this-&gt;sendMessageToChannel(
        $conn,
        $channel,
        $this-&gt;botName,
        $user.' left #'.$channel
    );
}
</code></pre>

  <pre><code class="language-php">// src/AppBundle/Server/Chat.php
private function sendMessageToChannel(ConnectionInterface $conn, $channel, $user, $message)
{
    if (!isset($this-&gt;users[$conn-&gt;resourceId]['channels'][$channel])) {
        return false;
    }
   foreach ($this-&gt;users as $connectionId =&gt; $userConnection) {
        if (array_key_exists($channel, $userConnection['channels'])) {
            $userConnection['connection']-&gt;send(json_encode([
                'action' =&gt; 'message',
                'channel' =&gt; $channel,
                'user' =&gt; $user,
                'message' =&gt; $message
            ]));
        }
    }
    return true;
}
</code></pre>

  <p>
    Voilà notre serveur de chat peut maintenant recevoir et gérer différents utilisateurs, canaux et types
    d’actions.
  </p>

  <h3 id="backtothefront">Back to the Front</h3>

  <p>
    Continuons avec la mise à jour du <em lang="en">front</em> pour qu'il puisse envoyer des messages dignes
    de ce nom au serveur. Pour cela, nous devons modifier le <em lang="en">template</em>
    pour y ajouter un formulaire d'envoi de message :
  </p>

  <pre><code class="language-twig">{% raw %}{# app/Resources/views/default/index.html.twig #}
&lt;div id=&quot;ws-content-receiver&quot;&gt;&lt;/div&gt;
&lt;input type=&quot;text&quot; id=&quot;ws-content-to-send&quot; /&gt;
&lt;button id=&quot;ws-send-content&quot;&gt;Send&lt;/button&gt;
{% endraw %}</code></pre>

  <p>
    Le block <code class="language-css">#ws-content-receiver</code> a été vidé
    pour qu’il soit entièrement géré par JavaScript.
    Vous noterez que le formulaire est très basique et qu’il ne contient même pas la balise
    <code class="language-html">&lt;form&gt;</code>, parce que ça n’est pas vraiment un « vrai » formulaire.
    Une fois cette modification faite, nous revenons sur notre fichier JavaScript pour y ajouter
    plusieurs choses :
  </p>

  <ul>
    <li>mettre à jour le système d’envoi de messages au <em lang="en">backend</em></li>
    <li>{# -#}
      ajouter une méthode d’affichage de message dans le
      <abbr title="HyperText Markup Language" lang="en">HTML</abbr>
    </li>
    <li>ajouter une méthode pour que le ChatBot puisse communiquer avec l’utilisateur</li>
    <li>demander à l’utilisateur son nom quand il arrive sur la page</li>
    <li>envoyer de messages des utilisateurs au serveur</li>
  </ul>

  <h4 id="miseajourdusystemedenvoietdaffichagedesmessages">
    Mise à jour du système d’envoi et d’affichage des messages
  </h4>

  <p>
    Dorénavant, nous devons envoyer des messages au serveur au format
    <abbr title="JavaScript Object Notation" lang="en">JSON</abbr> et nous devons donc adapter les méthodes du
    WebSocket pour prendre en compte cette modification. Au passage, nous ajoutons (comme nous l’avons fait côté
    serveur) un canal et un nom de bot par défaut.
  </p>

  <pre><code class="language-JavaScript">// src/AppBundle/Resources/public/js/sf-websocket.js
var defaultChannel = 'general';
var botName = 'ChatBot';

var addMessageToChannel = function(message) {
  _receiver.innerHTML += '&lt;div class=&quot;message&quot;&gt;' + message + '&lt;/div&gt;';
};

var botMessageToGeneral = function (message) {
  return addMessageToChannel(JSON.stringify({
    action: 'message',
    channel: defaultChannel,
    user: botName,
    message: message
  }));
};

ws.onopen = function () {
  ws.send(JSON.stringify({
    action: 'subscribe',
    channel: defaultChannel,
    user: userName
  }));
};

ws.onmessage = function (event) {
  addMessageToChannel(event.data);
};

ws.onclose = function () {
  botMessageToGeneral('Connection closed');
};

ws.onerror = function () {
  botMessageToGeneral('An error occured!');
};
</code></pre>

  <h4 id="papierssilvousplait">Papiers s’il vous plaît</h4>

  <p>
    Il nous faut maintenant demander à l’utilisateur son identifiant
    et nous allons le faire de manière très simpliste :
  </p>

  <pre><code class="language-JavaScript">// src/AppBundle/Resources/public/js/sf-websocket.js
var userName = prompt('Hi! I need your name for the Chat please :)');
</code></pre>

  <p>Et c’est tout.</p>

  <p>
    Dans une « vraie » application, il faudrait vérifier si un autre utilisateur n’a pas le même identifiant,
    mais pour ce tutoriel, restons simples.
  </p>

  <h4 id="illsendansostotheworld" lang="en">I&#8217;ll send an SOS to the world</h4>

  <p>Pour envoyer un message de l’utilisateur, il nous faut deux~trois choses :</p>

  <ul>
    <li>{# -#}
      Une méthode d’envoi du contenu présent dans le champs texte et qui ré-initialise son contenu une fois envoyé ;
    </li>
    <li>Un lien entre cette méthode et le clic sur le bouton « <em lang="en">Send</em> » ;</li>
    <li>{# -#}
      Et le petit bonus : un lien entre la touche entrée et la méthode d’envoi pour envoyer automatiquement le message
      après avoir appuyé sur cette touche.
    </li>
  </ul>

  <pre><code class="language-JavaScript">// src/AppBundle/Resources/public/js/sf-websocket.js
var _textInput = document.getElementById('ws-content-to-send');
var _textSender = document.getElementById('ws-send-content');
var enterKeyCode = 13;

var sendTextInputContent = function () {
  // Get text input content
  var content = _textInput.value;

  // Send it to WS
  ws.send(JSON.stringify({
    action: 'message',
    user: userName,
    message: content,
    channel: 'general'
  }));

  // Reset input
  _textInput.value = '';
};

_textSender.onclick = sendTextInputContent;
_textInput.onkeyup = function(e) {
  // Check for Enter key
  if (e.keyCode === enterKeyCode) {
    sendTextInputContent();
  }
};
</code></pre>

  <p>
    Nous pouvons maintenant relancer notre serveur de chat et retourner sur notre page pour vérifier que
    tout fonctionne bien.
  </p>

  <figure class="centered-image">
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/21/afsy-prompt.png') }}" alt="Demande de l'identité de l'utilisateur"/>
    <figcaption>Demande de l'identité de l'utilisateur</figcaption>
  </figure>

  <p>Le navigateur nous demande bien notre identité au chargement de la page.</p>

  <figure class="centered-image">
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/21/test-json.png') }}"
         alt="Affichage du message au format JSON"/>
    <figcaption>Affichage du message au format JSON</figcaption>
  </figure>

  <p>
    Et nous avons bien une communication établie en <abbr title="JavaScript Object Notation" lang="en">JSON</abbr>.
    Vous pouvez normalement envoyer des messages qui s’afficheront dans
    l’ensemble des fenêtres connectées à l’application.
  </p>

  <figure class="centered-image">
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/21/tests-json-messages.png') }}"
         alt="Tests d'envoi de messages au au format JSON"/>
    <figcaption>Tests d'envoi de messages au au format JSON</figcaption>
  </figure>

  <h2 id="lemotdelafin">Le mot de la fin</h2>

  <p>
    Et voilà, c’est terminé pour aujourd’hui ! Alors oui, l’interface est minimaliste et tout reste à faire,
    mais le but de cet article était de vous montrer comment mettre en place des WebSockets dans un projet Symfony.
    Pour aller plus loin, j’ai créé un <a href="https://github.com/clem/afsy-websockets-tutorial">projet Github</a>
    avec le code commenté (contrairement à celui publié dans cet article).
  </p>

  <figure class="centered-image">
      <img src="{{ asset('bundles/afsyfront/images/avent/2017/21/main-content.png') }}"
         alt="Interface du chat pour le calendrier de l'avent"/>
    <figcaption>Interface du chat pour le calendrier de l'avent</figcaption>
  </figure>

  <p>
    J’espère que cet article vous aura plu, je vous remercie de l’avoir lu jusqu’au bout,
    et il ne me reste plus qu’à vous souhaiter de belles fêtes de fin d’année !
  </p>

{% endblock %}

{% block article_avatar %}
  <img src="{{ asset('bundles/afsyfront/images/avent/2017/21/clement-delmas.jpg') }}" alt="Clément Delmas" />
{% endblock %}

{% block article_bio %}
  <h2>
    <a href="{% block author_url %}https://twitter.com/clem{% endblock %}">
      {% block article_author %}Clément Delmas{% endblock %}
    </a>
  </h2>
  <p>Clément est consultant chez <a href="http://www.acensi.fr/">Acensi</a> et développeur couteau-suisse.</p>
{% endblock %}
