{% extends 'Avent/day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 19 - Le composant Workflow par l'exemple" %}

{% block article_content %}
    <style type="text/css">
        em {
            font-family: sans-serif;
        }
    </style>

    <h1 id="le-composant-workflow-par-exemple">Le composant <em lang="en">Workflow</em> par l'exemple</h1>

    <p> Introduit avec Symfony 3.2, le <a href="https://symfony.com/doc/master/components/workflow.html" target="_blank">composant Workflow</a> permet de gérer simplement les différents états et transitions au sein de vos objets. Découvrons ensemble l’utilisation de ce composant avec un exemple simple de l’e-commerce et bien connu de tous : le colis. </p>

    <p>Un colis ne peut avoir qu’un état à la fois. Son état peut prendre les valeurs «&nbsp;<em lang="en">new</em>&nbsp;», «&nbsp;<em lang="en">preparing</em>&nbsp;», «&nbsp;<em lang="en">prepared</em>&nbsp;», «&nbsp;<em lang="en">shipped</em>&nbsp;», «&nbsp;<em lang="en">delivered</em>&nbsp;», «&nbsp;<em lang="en">returned</em>&nbsp;», «&nbsp;<em lang="en">lost</em>&nbsp;».</p>

    <p>Grâce au composant Workflow, nous pouvons très simplement définir ces différents états et les transitions entre chacun d’entre eux. Pour cela, éditons le fichier <em>config/packages/workflows.yml</em> ainsi :</p>

<pre><code class="language-yaml">framework:
  workflows:
    delivery:
      marking_store:
        type: single_state
        arguments:
          - state
      supports:
        - App\Entity\Packet
      places:
        - new
        - preparing
        - packed
        - shipped
        - delivered
        - returned
        - lost
      transitions:
        prepare:
          from: new
          to:   preparing
        pack:
          from: preparing
          to:   packed
        send:
          from: packed
          to:   shipped
        deliver:
          from: shipped
          to:   delivered
        return:
          from: [delivered, shipped]
          to:   returned
        lose:
          from: [shipped, delivered]
          to:   lost
</code></pre>

    <h2 id="le-composant-workflow-par-exemple-configuration">La configuration </h2>

    <ul>
        <li><code>marking_store</code> : définit la façon de stocker l’information d’état au sein de votre objet. Ici nous souhaitons que notre objet ne stocke qu’un seul état à la fois d’où le type <code>single_state</code>. Aussi nous souhaitons que la valeur de notre état soit stockée dans la propriété <code>$state</code> de l’objet.</li>
        <li><code>supports</code> : définit les objets sur lesquels le workflow s’applique.</li>
        <li><code>places</code> : définit les différents états possibles pour notre objet.</li>
        <li><code>transitions</code> : définit la liste des transitions entre chaque état. Ici un objet en état "<em lang="en">shipped</em>" pourra seulement suivre les transitions “<em lang="en">deliver</em>", “<em lang="en">return</em>" et “<em lang="en">lose</em>", mais aucune autre.</li>
    </ul>

    <p>Une fois la configuration créée, vous pouvez simplement créer un schéma de votre workflow en utilisant <a href="https://graphviz.gitlab.io/" target="_blank">Graphviz</a> : </p>

<pre><code class="language-bash">php bin/console workflow:dump delivery | dot -Tpng -o graph.png</code></pre>

    <p>Ce qui génèrera l’image suivante :</p>

    <img src="{{ asset('bundles/afsyfront/images/avent/2017/19/graph.png') }}" alt="Workflow packet example"/>

    <p><abbr title="Documentation">Doc</abbr> ? Qui a dit <abbr title="Documentation">doc</abbr> ?</p>

    <h2 id="le-composant-workflow-par-exemple-magic">Et la magie commence ici !</h2>

    <p>Maintenant, vous pouvez très simplement récupérer les transitions possibles pour votre objet.</p>
    <pre><code class="language-php">$packet = new Packet();
$workflow = $this-&gt;get('workflow.delivery');
$workflow-&gt;getEnabledTransitions($packet);
</code></pre>

    <p>Tester si une transition est possible et l’appliquer</p>
<pre><code class="language-php">if ($workflow-&gt;can($packet, 'lose')) {
  $workflow-&gt;apply($packet, 'lose');
}
</code></pre>

    <h2 id="le-composant-workflow-par-exemple-advanced">Quand les règles métier s’en mêlent</h2>

    <p>Facile, on a défini tous nos états et transitions mais nous n’avons aucune règle de gestion. Imaginons, par exemple qu’un colis ne peut être considéré comme perdu que 15 jours après avoir été expédié.</p>

    <p>Actuellement, rien ne limite cette contrainte dans notre modèle heureusement, c’est possible de l’implémenter via les évènements déclenchés par le composant.</p>

    <p>Dans notre cas, voici ce que cela pourra donner :</p>

<pre><code class="language-php">use Symfony\Component\Workflow\Event\GuardEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class PacketLostListener implements EventSubscriberInterface
{
   public function guardLost(GuardEvent $event)
   {
       /** @var \App\Entity\Packet $packet */
       $packet = $event-&gt;getSubject();
       $shippedAt = $packet-&gt;getShippedAt();
       $now = new \DateTime();

       if ($now-&gt;diff($shippedAt)-&gt;format('%a') &lt; 15) {
           $event-&gt;setBlocked(true);
       }
   }

   public static function getSubscribedEvents()
   {
       return array(
           'workflow.blogpost.guard.lost' =&gt; array('guardLost'),
       );
   }
}
</code></pre>

    <h2 id="le-composant-workflow-par-exemple-conclusion">Conclusion</h2>

    <p>Simple à utiliser, ce composant vous permettra de décorréler votre workflow de votre modèle. Simple à mettre en place, mangez-en matin, midi et soir.</p>

    <h3 id="le-composant-workflow-par-exemple-symfony-2" lang="en">One More Thing</h3>

    <p>Cet example a été créé sous Symfony 4, le composant a été introduit par Symfony 3.2, mais si d'aventure vous étiez encore sur une version antérieure, sachez qu'il existe un <a href="https://github.com/fduch/workflow-bundle" target="_blank">bundle</a> pour intégrer ce composant à partir de Symfony 2.3. Plus d'excuse ;).</p>

{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/19/cyril_souillard.jpeg') }}" alt="Cyril Souillard"/>
{% endblock %}

{% block article_bio %}
    <h2><a href="{% block author_url 'https://twitter.com/CyrilSouillard' %}"
           target="_blank">{% block article_author 'Cyril Souillard' %}</a></h2>
    <p>
        <abbr title="Chief Technical Officer" lang="en">CTO</abbr> chez <a href="https://www.mylittlebox.fr/" target="_blank">MyLittleBox</a>.
    </p>
{% endblock %}
