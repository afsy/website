{% extends 'Avent/day.html.twig' %}

{% set year = 2013 %}

{% block article_title "Jour 20 - Intégration d'Elasticsearch dans vos applications Symfony2" %}

{% block article_content %}
<h1>Intégration d'Elasticsearch dans vos applications Symfony2</h1>

<p>La recherche est un domaine dans lequel les <abbr title="Système de gestion de base de données">SGBD</abbr> traditionnels sont particulièrement mauvais :</p>

<ul>
<li>pas d'agrégation ;</li>
<li>lenteur proportionnelle à la taille des données ;</li>
<li>pertinence complexe à calculer ;</li>
<li>pas de scalling ;</li>
<li>index à créer manuellement ;</li>
</ul>

<img src="{{ asset('bundles/afsyfront/images/avent/20-elasticsearch.png') }}" alt="Elasticsearch" style="float:right;" />

<p>Et ça tombe bien, des logiciels dédiés à ces tâches existent : Lucene, Solr et le plus hype d'entre tous, <a href="http://www.elasticsearch.org/">Elasticsearch</a> (<abbr title="Elasticsearch">ES</abbr> pour les intimes).</p>

<p>Il s'agit d'une application Java dans laquelle vous envoyez des documents JSON, et effectuez des recherches via une API REST avec des temps de réponses à faire rougir Usain Bolt. Je ne vais pas m'étendre plus longtemps sur le produit, si vous manipulez une quantité de données significative (qu'il s'agisse de vos données métier ou de vos logs) Elasticsearch est <strong>un must-have</strong>.</p>

<p>L'objectif de cet article est de vous initier à l'utilisation de <a href="https://github.com/FriendsOfSymfony/FOSElasticaBundle">FOSElasticaBundle</a>, à ses subtilités et à son fonctionnement.</p>

<p><strong>Nous utilisons ici la version 3.0 du Bundle, qui n'est pas encore déclarée stable.</strong></p>

<h2>Elastica et FOSElasticaBundle</h2>

<p>Elastica est un des meilleurs clients PHP pour Elasticsearch à ce jour<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Il est massivement <a href="https://packagist.org/search/?q=elastica">supporté dans l'écosystem Symfony2</a> avec un nombre important de Bundle dédiés, mais aussi dans des librairies tierces tel que <a href="https://github.com/Seldaek/monolog">Monolog</a> qui permet d'envoyer les logs directement dans votre cluster.</p>

<p>FOSElasticaBundle est le Bundle le plus complet pour intégrer Elastica, il nous permet :</p>

<ul>
<li>d'utiliser facilement <a href="http://jmsyst.com/bundles/JMSSerializerBundle">JMSSerializerBundle</a> pour transformer vos entités en document JSON <em>(nouveautée de la version 3.0)</em> ;</li>
<li>de déclarer vos <code>index</code> et <code>type</code> via un fichier Yml (et non en JSON) ;</li>
<li>d'indexer automatiquement des entités Doctrine ou Propel en <code>bulk</code> ;</li>
<li>d'avoir un service de recherche à votre disposition ;</li>
<li>d'obtenir directement vos entités Doctrine ou Propel en résultat de recherche, plutôt que vos documents JSON ;</li>
<li>d'utiliser Pagerfanta ou KnpPaginator facilement ;</li>
<li>d'avoir un récapitulatif des requêtes dans le profiler ;</li>
<li>d'indexer automatiquement tout changement dans vos entités Doctrine.</li>
</ul>

<p>Il couvre vraiment une grande partie des besoins et nous allons voir comment implémenter ces features dans votre applicatif existant.</p>

<h2>Mettre en place le Bundle</h2>

<p>Prenons l'exemple du site web de l'Afsy, qui est une application Symfony2 <a href="https://github.com/afsy/website">tout à fait classique</a>.
 Il est composé d'entités <strong>Article</strong> et <strong>Author</strong> que nous souhaitons indexer.</p>

<p>La première chose à faire est d'installer nos nouvelles dépendances, <strong>FOSElasticaBundle</strong> et <strong>JMSSerializerBundle</strong> :</p>

<pre class="no-highlight"><code>composer require jms/serializer-bundle 0.12.0
composer require friendsofsymfony/elastica-bundle 3.0.*@dev
</code></pre>

<p><em>Faites toujours attention aux numéros de version, <a href="https://packagist.org/packages/friendsofsymfony/elastica-bundle">référez-vous à packagist</a> !J'utilise une version en cours de développement à l'heure où j'écris ces lignes, les dernières nouveautés du Bundle n'étant pas encore déclarées stable.</em></p>

<p>On ajoute, comme d'habitude, les Bundles à notre Kernel :</p>

<pre class="language-php"><code>// app/AppKernel.php
public function registerBundles()
{
    $bundles = array(
        // ...
        new \JMS\SerializerBundle\JMSSerializerBundle(),
        new \FOS\ElasticaBundle\FOSElasticaBundle(),
    );
}
</code></pre>

<p>Et enfin, le vif du sujet, la configuration. Notre node <abbr title="Elasticsearch">ES</abbr> expose ses API sur le port 9200 et nos deux entités seront des <strong>types</strong> dans le vocabulaire d'Elasticsearch, eux-même inclus dans un <strong>index</strong> que nous nommerons <strong>afsy</strong>.</p>

<pre class="language-yaml"><code>fos_elastica:
    clients:
        default: { host: localhost, port: 9200 }
    serializer:
        callback_class: FOS\ElasticaBundle\Serializer\Callback
        serializer: serializer
    indexes:
        afsy:
            client: default
            types:
                Article:
                    mappings: ~
                    persistence:
                        driver: orm # orm, mongodb, propel are available
                        model:  Afsy\Bundle\CoreBundle\Entity\Article
                        provider: ~
                Author:
                    mappings: ~
                    persistence:
                        driver: orm
                        model:  Afsy\Bundle\CoreBundle\Entity\Author
                        provider: ~
</code></pre>

<p>Déclarer le mapping complet des types n'est pas obligatoire, il est automatique dans <abbr title="Elasticsearch">ES</abbr> mais il est souvent nécessaire de l'affiner manuellement, pour donner un boost ou changer un <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/analysis-analyzers.html">analyzer</a>. Cela ce fait donc ici !</p>

<p>Nous avons aussi indiqué au Bundle à quelle Entité Doctrine se réfère chaque type (Propel et MongoDB sont aussi supportés).</p>

<h2>Indexer vos entités</h2>

<p>Si tout s'est bien passé vous devriez pouvoir lancer la commande suivante :</p>

<pre class="no-highlight"><code>$ php app/console fos:elastica:populate
Resetting afsy
Populating afsy/Article, 100.0% (2/2), 12 objects/s
Populating afsy/Author, 100.0% (1/1), 29 objects/s
Refreshing afsy
</code></pre>

<p>Elle fait plusieurs choses :</p>

<ul>
<li>créer nos index et types (ou les recréer s'ils existent déjà) ;</li>
<li>faire appel au <code>provider</code> de chaque type pour récupérer les entités à indexer ;</li>
<li>envoyer ses entités au <code>serializer</code> pour transformation ;</li>
<li>et enfin, envoyer en <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html">bulk</a> les documents dans le moteur d'indexation.</li>
</ul>

<p>Vous pouvez constater le bon fonctionnement de la commande en consultant le contenu de votre serveur ES via <a href="http://mobz.github.io/elasticsearch-head/">le plugin Head</a>.</p>

<img src="{{ asset('bundles/afsyfront/images/avent/20-head.png') }}" alt="Head Plugin" style="display:block;margin:10px auto;" />

<p>Dans une application classique, cette commande ne devrait pas vous servir, à part en cas de changement de mapping. En effet, elle supprime complètement votre index pour le recréer de zéro : en production cela signifierait que vos requêtes de recherche n'aboutieraient plus pendant toute cette phase d'indexation.</p>

<p><strong>Vous pouvez jouer avec les contenus, les requêtes et le mapping sans rien installer grâce <a href="https://www.found.no/play/gist/7821653">au playground found.no créé pour l'occasion</a> ♥.</strong></p>

<h2>Indexation automatique au fil de l'eau</h2>

<p>Plutôt que de recréer l'index à chaque modification de contenu, nous allons mettre à jour l'index de façon transparente. Grâce aux <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html#lifecycle-events">LifeCycle Events de Doctrine</a>, il est possible de demander à notre Bundle d'envoyer dans <abbr title="Elasticsearch">ES</abbr> l'entité à chaque changement :</p>

<pre class="language-yaml"><code>persistence:
    driver: orm
    model:  Afsy\Bundle\CoreBundle\Entity\Article
    provider: ~
    listener: ~ # by default, listens to "insert", "update" and "delete"
</code></pre>

<p>Cette nouvelle ligne dans la configuration va donc s'assurer pour nous d'envoyer dans <abbr title="Elasticsearch">ES</abbr> nos entités à chaque changement ! C'est très sexy mais laissez moi vous mettre en garde sur l'impact négatif que cela pourrait avoir sur vos performances : à utiliser en connaissance de cause, chaque <code>flush</code> Doctrine produira alors des requêtes HTTP !</p>

<p>Pour information, une fois envoyé dans <abbr title="Elasticsearch">ES</abbr>, votre document est disponible à la recherche environ une seconde plus tard (et immédiatement en cas de <code>_get</code>) : votre moteur de recherche est donc presque temps réel !</p>

<h2>Vos premières recherches</h2>

<p>Pour faire des recherches dans l'index, des <strong>services</strong> sont mis à votre disposition :</p>

<ul>
<li><strong>fos_elastica.index.afsy</strong> qui représente votre index (<code>Elastica\Index</code>) ;</li>
<li><strong>fos_elastica.index.afsy.article</strong> qui représente le type Article (<code>Elastica\Type</code>) ;</li>
<li><strong>fos_elastica.index.afsy.author</strong> qui représente le type Author (<code>Elastica\Type</code>).</li>
</ul>

<p>Ainsi, le code suivant recherche "toto" dans le type Articles :</p>

<pre class="language-php"><code>$article_type = $this-&gt;get('fos_elastica.index.afsy.article');
$article_type-&gt;search("toto");
</code></pre>

<p>Alors que celui-ci recherche aussi bien dans les Articles que dans les Authors car il cherche dans l'Index afsy :</p>

<pre class="language-php"><code>$index = $this-&gt;get('fos_elastica.index.afsy');
$index-&gt;search("toto");
</code></pre>

<p>Dans ce second cas, il est intéressant de noter que le <code>ResultSet</code> comprend aussi bien des documents <em>Article</em> que <em>Author</em>, à vous de faire le tri à l'affichage.</p>

<p>La recherche que nous effectuons ici est la plus simple, il s'agit d'une <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html">QueryString</a> construite automatiquement pour nous par Elastica, voyons une requête plus complexe !</p>

<pre class="language-php"><code>$type = $this-&gt;get('fos_elastica.index.afsy.article');

$query_part = new \Elastica\Query\Bool();
$query_part-&gt;addShould(
    new \Elastica\Query\Term(array('title' =&gt; array('value' =&gt; 'introduction', 'boost' =&gt; 3)))
);
$query_part-&gt;addShould(
    new \Elastica\Query\Term(array('markdown_body' =&gt; array('value' =&gt; 'introduction')))
);

$filters = new \Elastica\Filter\Bool();
$filters-&gt;addMust(
    new \Elastica\Filter\Term(array('language' =&gt; 'fr'))
);
$filters-&gt;addMust(
    new \Elastica\Filter\NumericRange('published_at', array(
        'lte' =&gt; date('c'),
    ))
);

$query = new \Elastica\Query\Filtered($query_part, $filters);

$type-&gt;search($query);
</code></pre>

<p>Ça pique un peu n'est-ce pas ! Nous demandons ici à <abbr title="Elasticsearch">ES</abbr> les Articles dont le <code>title</code> ou le <code>markdown_body</code> contiennent la chaine "introduction", filtrés par date de publication inférieure à maintenant et par langue "fr".</p>

<p>Pour information, en JSON cela donne :</p>

<pre class="language-json"><code>{
    "query": {
        "filtered": {
            "query": {
                "bool": {
                    "should": [{
                        "term": {
                            "title": {
                                "value": "introduction",
                                "boost": 3
                            }
                        }
                    }, {
                        "term": {
                            "markdown_body": {
                                "value": "introduction"
                            }
                        }
                    }]
                }
            },
            "filter": {
                "bool": {
                    "must": [{
                        "term": {
                            "language": "fr"
                        }
                    }, {
                        "numeric_range": {
                            "published_at": {
                                "lte": "2013-11-30T23:22:23+01:00"
                            }
                        }
                    }]
                }
            }
        }
    }
}
</code></pre>

<p>Vous l'aurez compris, composer une requête Elastica est aussi verbeux mais bien plus sûr que d'écrire son équivalent JSON. Il est recommandé de les regrouper dans des services dédiées afin d'éviter de polluer vos controleurs.</p>

<h2>Le Finder Doctrine</h2>

<p>FOSElasticaBundle permet, comme je le disais en introduction, de vous retourner vos entités plutôt que des objets <code>Elastica\Result</code>. Il utilise pour cela des Finder.</p>

<pre class="language-yaml"><code>persistence:
    driver: orm # orm, mongodb, propel are available
    model:  Afsy\Bundle\CoreBundle\Entity\Article
    provider: ~
    listener: ~ # by default, listens to "insert", "update" and "delete"
    finder: ~
</code></pre>

<p>La nouvelle ligne <code>finder: ~</code> dans notre configuration permet alors d'utiliser le service <code>fos_elastica.manager.orm</code> et de lancer des recherches sur des entités plutôt que sur des types <abbr title="Elasticsearch">ES</abbr> :</p>

<pre class="language-php"><code>/** var FOS\ElasticaBundle\Manager\RepositoryManager */
$repositoryManager = $container-&gt;get('fos_elastica.manager.orm');

/** var FOS\ElasticaBundle\Repository */
$repository = $repositoryManager-&gt;getRepository('AfsyCoreBundle:Article');

/** Array of Article entities */
$articles = $repository-&gt;find('toto');
</code></pre>

<p>Il est aussi possible d'utiliser <code>findHybrid()</code> pour récupérer à la fois le <code>Elastica\Result</code> (contenant les informations du résultat tel que le score du document, son JSON source...) et les entités.</p>

<p>La méthode <code>find()</code> accepte aussi une <code>Query</code> Elastica évidement, et il est aussi possible de créer votre propre repository :</p>

<pre class="language-yaml"><code>persistence:
    driver: orm # orm, mongodb, propel are available
    model:  Afsy\Bundle\CoreBundle\Entity\Article
    provider: ~
    listener: ~ # by default, listens to "insert", "update" and "delete"
    finder: ~
    repository: Afsy\Bundle\CoreBundle\SearchRepository\ArticleRepository
</code></pre>

<pre class="language-php"><code>&lt;?php

namespace Afsy\Bundle\CoreBundle\SearchRepository;

use FOS\ElasticaBundle\Repository;

class ArticleRepository extends Repository
{
    /**
     * @param $searchText
     * @return array&lt;Article&gt;
     */
    public function findPublished($searchText)
    {
        $query_part = new \Elastica\Query\Bool();
        $query_part-&gt;addShould(
            new \Elastica\Query\Term(array('title' =&gt; array('value' =&gt; $searchText, 'boost' =&gt; 3)))
        );
        $query_part-&gt;addShould(
            new \Elastica\Query\Term(array('markdown_body' =&gt; array('value' =&gt; $searchText)))
        );

        $filters = new \Elastica\Filter\Bool();
        $filters-&gt;addMust(
            new \Elastica\Filter\Term(array('language' =&gt; 'fr'))
        );
        $filters-&gt;addMust(
            new \Elastica\Filter\NumericRange('published_at', array(
                'lte' =&gt; date('c'),
            ))
        );

        $query = new \Elastica\Query\Filtered($query_part, $filters);

        // return $this-&gt;findHybrid($query); if you also want the ES ResultSet
        return $this-&gt;find($query);
    }
}
</code></pre>

<p>Bien plus propre pour stocker vos requêtes Elastica !</p>

<h2>Mettre en place une facette</h2>

<p>Une des forces d'Elasticsearch est la possibilité de faire de l'aggregation sur les résultats et d'en sortir des statistiques. Il nous serait par exemple possible de récupérer la répartition des articles par année avec une <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-facets-date-histogram-facet.html">facette Date Histogram</a>. Voici comment l'implémenter avec Elastica :</p>

<pre class="language-php"><code>$query = \Elastica\Query::create(); // Nous recherchons tout (MatchAll)

$date_facet = new DateHistogram('years'); // Nous donnons un nom à la facette
$date_facet-&gt;setField('published_at');
$date_facet-&gt;setInterval('year');
$query-&gt;addFacet($date_facet);
</code></pre>

<p>Malheureusement, nous ne pouvons pas utiliser directement le <code>finder</code> vu précédement. En effet, il ne sait retourner qu'un tableau de résultats (entités ou hybrid) et ne se préoccupe pas de tout ce qu'une réponse Elasticsearch peut contenir :</p>

<ul>
<li>des facettes ;</li>
<li>des suggestions ;</li>
<li>des mlt (More lile this)...</li>
</ul>

<p>Nous passons donc à nouveau par notre service <code>Elastica\Type</code> pour lancer la recherche :</p>

<pre class="language-php"><code>$articles = $this-&gt;get('fos_elastica.index.afsy.article')-&gt;search($query);
$facets = $articles-&gt;getFacets();
$years  = $facets['years']['entries'];

// Retourne :
// array
//   array 'time' =&gt; int 1325376000000 'count' =&gt; int 1
//   array 'time' =&gt; int 1356998400000 'count' =&gt; int 2
</code></pre>

<p>Nous pouvons alors manipuler les résultats comme avec une installation standard d'Elastica. La récupération des entités Doctrine se fait ensuite via <code>TransformedFinder</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> :</p>

<pre class="language-php"><code>$entities = $this-&gt;get('fos_elastica.finder.afsy.article')-&gt;transform($articles);
</code></pre>

<h2>Définir un mapping plus fin</h2>

<p>Pour vous épargner quelques chapitres, j'omets, dans les exemples ci-dessus, toute notion de mapping, et je fais mes recherches avec les analyses par défaut. Cela fonctionne car les paramètres par défaut d'Elasticsearch sont plutôt bons... <strong>Mais</strong> il ne font que de la tokenisation standard. Si nous recherchons "poney" alors que le mot est écrit au pluriel "poney<strong>s</strong>" dans tous les documents, la recherche ne retournera <strong>rien du tout</strong>.</p>

<img src="{{ asset('bundles/afsyfront/images/avent/20-ponies.png') }}" alt="Y U NO FIND PONIES" style="display:block;margin:10px auto;" />

<p>Idem pour des mots composés comme "l'avent", si nous cherchons "avent", rien ne sera retourné.</p>

<p>Pour voir comment <abbr title="Elasticsearch">ES</abbr> tokenise une chaîne, nous pouvons utiliser l'API <strong>analyse</strong>:</p>

<pre class="no-highlight"><code>curl 'http://localhost:9200/afsy/_analyze?pretty=true' -d "l'avent"
{
  "tokens" : [ {
    "token" : "l'avent",
    "start_offset" : 0,
    "end_offset" : 7,
    "type" : "&lt;ALPHANUM&gt;",
    "position" : 1
  } ]
}
</code></pre>

<p>Nous n'avons qu'un seul token, et il ne correspond pas au token "avent".</p>

<p>C'est là qu'entre en jeu l'<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/analysis.html">analyse</a>. Nous devons spécifier à <abbr title="Elasticsearch">ES</abbr> comment couper nos phrases, comment transformer nos mots en tokens, quels mots utiliser pour remplacer d'autres, que filtrer... Voici donc ici un exemple complet de configuration pour la langue française, et appliqué via notre fichier de configuration - c'est cadeau ♥ - mais bien sûr à adapter à vos besoins !</p>

<pre class="language-yaml"><code>indexes:
    afsy:
        client: default
        settings:
            index:
                analysis:
                    analyzer:
                        custom_french_analyzer:
                            type: custom
                            tokenizer: letter
                            filter: ["asciifolding", "lowercase", "french_stem", "stop_fr"]
                    filter:
                        stop_fr:
                            type: "stop"
                            stopwords: ["l", "m", "t", "qu", "n", "s", "j", "d"]
</code></pre>

<p>Nous faisons plusieurs choses avec cette configuration<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> :</p>

<ul>
<li>remplacer les lettres accentuées par leurs équivalent ASCII (<code>é</code> -&gt; <code>e</code>) ;</li>
<li>appliquer un lowercase (<code>E</code> -&gt; <code>e</code>) ;</li>
<li>tronquer la fin des mots pour enlever toute forme d'accords (<code>bundles</code> -&gt; <code>bundl</code>, <code>envoutée</code> -&gt; <code>envoute</code>) ;</li>
<li>séparer les mots composés et supprimer l'article (<code>l'afsy</code> -&gt; <code>l</code>,<code>afsy</code> -&gt; <code>afsy</code>).</li>
</ul>

<p>Nous pouvons refaire notre test et constater que "bundles" devient "bundl" une fois passé dans notre analyzer <code>custom_french_analyzer</code> :</p>

<pre class="no-highlight"><code>curl 'http://localhost:9200/afsy/_analyze?pretty=true&amp;analyzer=custom_french_analyzer' -d "bundles"
{
  "tokens" : [ {
    "token" : "bundl",
    "start_offset" : 0,
    "end_offset" : 7,
    "type" : "word",
    "position" : 1
  } ]
}
</code></pre>

<p>Vous pouvez ensuite appliquer cette analyse aux champs que vous voulez via le mapping, lorsque vous chercherez sur ces champs, <abbr title="Elasticsearch">ES</abbr> appliquera automatiquement la même analyse à votre recherche pour ce champ là :</p>

<pre class="language-yaml"><code>types:
    Article:
        mappings:
            title: { analyzer: custom_french_analyzer }
            body: { analyzer: custom_french_analyzer }
</code></pre>

<p>Ces trois recherches nous retournent bien notre document contenant le mot "bundles" :</p>

<pre class="language-php"><code>$search1 = $this-&gt;get('fos_elastica.index.afsy.article')-&gt;search(
    new Field('body', 'bundles')
);
$search2 = $this-&gt;get('fos_elastica.index.afsy.article')-&gt;search(
    new Field('body', 'bundle')
);
$search3 = $this-&gt;get('fos_elastica.index.afsy.article')-&gt;search(
    new Field('body', 'des BUNDLES')
);
</code></pre>

<h2>Aller encore plus loin</h2>

<p>Nous pourrions écrire un livre sur l'utilisation d'Elasticsearch, mais finissons plutôt avec ces quelques recommandations !</p>

<h3>Ne pas faire d'indexation synchrone</h3>

<p>Je vous parlais des soucis de performance liés à l'utilisation du <code>listener</code> Doctrine, la bonne solution serait d'implémenter votre propre listener et d'envoyer les demandes d'indexation à un broker (type RabbitMQ). À votre charge alors de développer les workers pour traiter ces messages, mais les avantages sont multiples :</p>

<ul>
<li>accélerer l'indexation est aussi simple que d'ajouter des workers ;</li>
<li>réindexer toute votre base se fait simplement en produisant des messages pour le broker ;</li>
<li>vous ne ralentissez plus votre application en demandant des indexations au fil de l'eau ;</li>
<li>d'autres consommateurs de votre base de données peuvent eux aussi produire des messages pour demander une indexation...</li>
</ul>

<h3>Débugger directement dans Elasticsearch</h3>

<p>Autre astuce, plus orientée debug, sachez que vous pouvez transformer une <code>Elastica\Request</code> en appel <code>cURL</code> facilement executable (<code>cURL</code> et <a href="https://chrome.google.com/webstore/detail/sense/doinijnbnggojdlcjifpdckfokbbfpbo">Sense</a> sont vos deux seuls amis en cas de coup dur sur la construction d'une requête) :</p>

<pre class="language-php"><code>\Elastica\Util::convertRequestToCurlCommand($type-&gt;getIndex()-&gt;getClient()-&gt;getLastRequest())
// curl -XGET 'http://localhost:9200/afsy/Article/_search' -d '{"query":{"query_string":{"query":"toto"}}}'
</code></pre>

<p><em>Depuis peu, le web profiler vous propose aussi la version cURL de chaque requête.</em></p>

<p>N'ayez pas peur d'utiliser <abbr title="Elasticsearch">ES</abbr> directement sans passer par votre client, vous irez beaucoup plus vite pour débugger ! Cette classe <code>Util</code> contient quelques méthodes d'échappage de requête Lucene ou encore de transformation de date. À connaitre donc.</p>

<h3>Brancher votre SonataAdminBundle sur vos Index</h3>

<p>Si vous utilisez SonataAdminBundle, il est desormais possible de brancher tous vos filtres sur <abbr title="Elasticsearch">ES</abbr> via <a href="https://github.com/marmelab/SonataElasticaBundle">SonataElasticaBundle</a>. Sur de grande quantités de données le gain de performance sera sans précédent !</p>

<h3>Quelques liens utile pour débuter</h3>

<p>Il n'existe pas beaucoup de ressources en français sur Elasticsearch, voici quelques recommandations de lecture en anglais :</p>

<ul>
<li><a href="http://found.no/foundation/">Foundation</a>, une société qui propose <abbr title="Elasticsearch">ES</abbr> en <abbr title="Software as a service">SaaS</abbr> mais qui a surtout l'avantage d'avoir un super blog ;</li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index.html">la documentation officielle</a> bien entendu ;</li>
<li><a href="https://groups.google.com/forum/#!forum/elasticsearch-fr">la communauté Française Elasticsearch</a> sur Google Group et sur <a href="https://twitter.com/ElasticsearchFR">twitter</a> ;</li>
<li>en complément de HEAD cité plus haut, <a href="https://github.com/royrusso/elasticsearch-HQ">elasticsearch-HQ</a> est un très bon outil pour surveiller votre cluster, consulter l'état de vos indexes et diagnostiquer tout type de problème ;</li>
<li><a href="http://www.elasticsearch.org/blog/">et le blog officiel</a> à mettre dans vos lecteurs RSS tout de suite !</li>
</ul>

<p>J'espère que cet article vous aura mis le pied à l'étrier et que plus jamais vous ne ferez appel à un <strong>LIKE</strong> pour faire de la recherche dans vos applications Symfony2 ! N'hésitez pas non plus à poser vos questions dans les commentaires, j'y répondrais avec plaisir.</p>

<div class="footnotes">
<hr />
<ol>

<li id="fn:1">
<p><a href="http://jolicode.com/blog/quel-client-php-pour-elasticsearch">Quel client PHP pour Elasticsearch</a>, un comparatif des clients sur le blog de JoliCode.&#160;<a href="#fnref:1" rev="footnote">&#8617;</a></p>
</li>

<li id="fn:2">
<p>La <a href="https://github.com/FriendsOfSymfony/FOSElasticaBundle/pull/414"><abbr title="Pull Request">PR</abbr> 414</a> permet d'utiliser la transformation du Finder depuis n'importe où mais il faut aussi surveiller <a href="https://github.com/FriendsOfSymfony/FOSElasticaBundle/pull/435">celle-ci</a>, il se peut que les résultats hybride changent beaucoup prochainement.&#160;<a href="#fnref:2" rev="footnote">&#8617;</a></p>
</li>

<li id="fn:3">
<p>Je vous ai déjà donné le lien, mais vraiment, allez faire un tour sur <a href="https://www.found.no/play/gist/7821653#analysis">le playground found.no</a>, l'analyzer y est très bien présenté.&#160;<a href="#fnref:3" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>

{% endblock %}
{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/damien-alexandre.png') }}" alt="Damien Alexandre" />
{% endblock %}
{% block article_bio %}
<h2>
    <a href="{% block author_url %}http://damienalexandre.fr/{% endblock %}">{% block article_author %}Damien Alexandre{% endblock %}</a>
</h2>
<p>
    Damien est consultant web au sein de <a href="http://jolicode.com/">JoliCode</a> où la qualité et la performance sont ses leitmotive. Présent dans l'éco-système symfony depuis plus de 5 ans, il n'en oublie pas ses compétences frontend et Javascript, outils avec lesquels il travaille quotidiennement, bien qu'Elasticsearch soit son nouveau jouet préféré.<br />Orateur à de nombreux évènements tels que Symfony Live, Forum PHP, Paris Web ou encore Sub Web, il est aussi un habitué des meetups parisiens.
</p>
<p>
    Sur Twitter :
    <a href="https://twitter.com/damienalexandre">@damienalexandre</a>
</p>
{% endblock %}
