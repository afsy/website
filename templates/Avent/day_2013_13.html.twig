{% extends 'Avent/day.html.twig' %}

{% set year = 2013 %}

{% block article_title "Jour 13 - Jouons à cache-cache avec HTTP" %}

{% block article_content %}
<h1>Jouons à cache-cache avec HTTP</h1>

<p>Le cache HTTP est devenu le cache à la mode pour les développeurs PHP depuis l'arrivée de Symfony2.</p>

<p>La mise en oeuvre du cache HTTP à travers Symfony2 est assez simple, grâce au respect de la <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html">norme</a>, et de reverse proxy comme celui de <a href="http://symfony.com/doc/current/book/http_cache.html#symfony2-reverse-proxy">Symfony2</a> ou encore mieux <a href="https://www.varnish-cache.org/">Varnish</a>.<br />
Son implémentation est <a href="http://symfonic.fr/fr/2012/08/gestion-cache-http-avec-symfony2/">évoquée</a> dans de <a href="http://n.ippo.io/b/gestion-du-cache-avec-symfony2">très</a> <a href="http://blog.webnet.fr/utilisation-de-cache-sur-des-pages-utilisant-une-session-utilisateur-avec-symfony-2-et-varnish/">nombreux</a> <a href="http://odino.org/symfony-2-http-cache/">articles</a>.</p>

<p>Cependant, la mise en oeuvre est la partie émergée de l'iceberg. Il ne suffit pas de mettre quelques lignes de code en plus pour avoir un cache performant. La partie la plus importante étant l'analyse préalable du site, permettant de connaître les pages nécessitant un cache et quel type de cache il faut employer plutôt qu'un autre.</p>

<h2>Faire un bon cache-cache c'est d'abord savoir compter</h2>

<p>Avant de partir dans du code, il est nécessaire d'avoir une bonne vision de l'utilisation du site par les clients et par les contributeurs en effectuant différentes mesures.</p>

<p>L'implémentation d'un cache HTTP, comme tout développement, doit se faire de manière itérative afin de détecter les risques, ajuster les choix et avoir une meilleur visibilité  sur son impact. Les trois premières mesures : temps, charge et popularité, servent à répartir ce développement itératif.</p>

<p>Les deux autres mesures : versatilité et criticité, permettent de déterminer le type de cache et ses paramètres à implémenter.</p>

<h3>Temps</h3>

<p>Tout d'abord il faut savoir le temps d'exécution de chacune des pages. Il n'est pas nécessaire d'établir une mesure précise, un simple ordre de grandeur des différentes pages suffit.</p>

<p>Pour la simplification de cet article, deux ordres de grandeurs sont retenus :</p>

<ul>
<li>Temps long ;</li>
<li>Temps court</li>
</ul>

<h3>Charge</h3>

<p>La plupart du temps, plus le temps d'exécution d'une page est longue plus sa charge associée est grande, mais ce n'est pas tout le temps vrai : l'utilisation de services web, par exemple, peut allonger le temps d'exécution d'une page sans pour autant en augmenter sa charge (le processus reste en attente). Il est aussi possible d'avoir une page ayant une charge importante mais un temps d'exécution très court : remplir 1Go de mémoire est assez rapide en PHP...</p>

<p>Il faut donc mesurer cette charge, ainsi, pour simplifier, deux ordres de grandeurs sont retenus :</p>

<ul>
<li>Charge importante ;</li>
<li>Charge peu importante</li>
</ul>

<h3>Popularité</h3>

<p>Le nombre de visites pour chaque page est un autre critère à prendre en compte. Il permet de mesurer la popularité et d'émettre une classification avec les deux critères précédents, ainsi deux critères sont encore retenus :</p>

<ul>
<li>Page très visitée ;</li>
<li>Page peu visitée</li>
</ul>

<h3>Versatilité</h3>

<p>Chaque donnée, proposée par un site, possède une fréquence de mise à jour différente. Par exemple, un contenu éditorial délivre des articles qui ne sont que peu mis à jour mais aussi des valeurs boursières, qui sont elles fréquemment mises à jour.</p>

<p>Il faut être capable de donner trois valeurs à cette versatilité :</p>

<ul>
<li>Une valeur haute : Le temps maximum entre deux modifications ;</li>
<li>Une moyenne : La moyenne de temps entre deux mises à jours ;</li>
<li>Une valeur basse : Le temps minimum entre deux éditions</li>
</ul>

<h3>Criticité</h3>

<p>Cette mesure n'en est pas vraiment une. Elle est surtout un ordre de grandeur qui détermine si votre donnée doit être absolument à jour ou non pour votre client. Prenons encore l'exemple de la valeur boursière par : sur un site de contenu éditorial, cette donnée peut se permettre de ne pas être exact pendant quelques minutes, en revanche, sur une API REST destinée à faire des échanges boursiers il est absolument nécessaire d'avoir la donnée la plus fraîche possible.</p>

<p>Le tri des données s'effectue sur ces deux critères :</p>

<ul>
<li>Criticité importante ;</li>
<li>Criticité peu importante</li>
</ul>

<h3>Mise en place</h3>

<p>Pour mesurer toutes ces valeurs, il est nécessaire d'avoir un ensemble d'outils de monitoring :</p>

<p><img src="{{ asset('bundles/afsyfront/images/avent/13-newrelic.png') }}" alt="exemple de Dashboard NewRelic" /></p>

<ul>
<li>Des outils de benchmarks pour le temps de réponse comme <a href="http://www.joedog.org/siege-home/">siège</a> (ou <a href="http://httpd.apache.org/docs/2.2/programs/ab.html">ab</a> mais <a href="http://paul-m-jones.com/archives/421">moins fiable</a>), ou même des outils en mode SaaS comme <a href="http://newrelic.com/">NewRelic</a>;</li>
<li>Connaître la charge d'une page, c'est utiliser un bon outil de profiling comme <a href="http://php.net/manual/fr/book.xhprof.php">XHProf</a>, et de relever les valeurs de consommation de CPU et de mémoire de la page;</li>
<li>La popularité d'une page peut se mesurer facilement avec <a href="http://www.google.fr/intl/fr/analytics/">Google Analytics</a> par exemple ou d'autres solutions du même genre. Il peut aussi être possible de la mesurer en analysant les fichiers d'accès du serveur web (mais ce sera bien plus compliqué);</li>
<li><p>La versatilité se mesure de différentes manières selon la source :</p>

<ul>
<li>Si la modification des données provient d'une administration, et donc de modifications humaines, il suffit de mesurer la popularité de cette interface avec les mêmes outils que la mesure précédente;</li>
<li>En revanche si cette modification provient de sources automatiques, il faut mettre en place son propre monitoring. Par exemple, on peut très bien utiliser <a href="https://github.com/etsy/statsd/">Statsd</a> avec la bibliothèque <a href="https://github.com/domnikl/statsd-php">statsd-php</a> et mettre ce bout de code :</li>
</ul>

<pre class="language-php"><code>&lt;?php
if ($dataHasChanged) {
    $statsd-&gt;timing("mydata.".$dataKey.".versatility", $timeBetweenUpdate);
}
</code></pre></li>
<li>Il est en revanche impossible de mesurer la criticité d'une donnée. La tâche en revient au directeur du produit ou aux utilisateurs qui seront capables de spécifier cette ordre de grandeur.</li>
</ul>

<h2>Analyse</h2>

<h3>Classification</h3>

<p>La classification permet de déterminer l'ordre de changement lors d'un développement itératif. Ce principe n'est pas que lié au cache HTTP et peut être utilisé pour toute phase d'optimisation.</p>

<p>Le tri de nos pages, de la plus importante à modifier à la moins importante, se fait d'abord sur sa popularité décroissante, puis son temps décroissant et enfin sa charge décroissante, ce qui donne avec les ordres définis plus haut cette classification :</p>

<ol>
<li>Page très visitée + Temps long + Charge importante ;</li>
<li>Page très visitée + Temps long + Charge peu importante ;</li>
<li>Page très visitée + Temps court + Charge importante ;</li>
<li>Page très visitée + Temps court + Charge peu importante ;</li>
<li>Page peu visitée + Temps long + Charge importante ;</li>
<li>Page peu visitée + Temps long + Charge peu importante ;</li>
<li>Page peu visitée + Temps court + Charge importante ;</li>
<li>Page peu visitée + Temps court + Charge peu importante</li>
</ol>

<p>Elle permet aussi de connaître l'utilité de l'implémentation d'un cache, en effet pour les 2 à 4 derniers cas le cache HTTP peut ne pas avoir d'utilité et être contre performant en ajoutant une couche de calcul peu utilisée.</p>

<h3>Max-Age ? Expires ?</h3>

<p>Le type de cache et ses paramètres sont déterminés par la combinaison de la versatilité et de la criticité de l'information. Plus la donnée est critique moins le cache doit avoir un impact sur la fraîcheur des données.</p>

<p>Ainsi pour une donnée très critique, il est préférable de mettre en place un <code>max-age</code> avec la valeur basse de la versatilité. Si elle est moins critique, on peut utiliser des valeurs plus hautes.</p>

<h3>Etag ? Last-Modified ?</h3>

<p>Si la différence entre la versatilité haute et la versatilité basse est très importante, une chose est certaine : on ne saura jamais quand notre donnée peut être modifiée. Il est alors intéressant de se baser sur une clé de modification comme une date de mise à jour pour un header <code>last-modified</code> ou encore un hash de la donnée via un header <code>etag</code>.</p>

<p>Cependant, il faut être sur que la création de cette clé sera toujours plus rapide que la récupération de la donnée + son post-processing (la plupart du temps l'affichage de la donnée avec Twig sur Symfony2).</p>

<p>L’accumulation d'un de ces headers avec un <code>max-age</code> ou <code>expires</code> peut être intéressant si notre donnée n'est pas très critique, on évite alors le temps de pre-processing.</p>

<h2>Invalidation</h2>

<p>L'invalidation du cache par une méthode <code>PURGE</code> est considérée comme une mauvaise pratique dans le cache HTTP.</p>

<p><strong>Premièrement</strong> cette méthode n'est pas incluse dans la norme. Ainsi, chaque Reverse-Proxy implémente son propre mécanisme de purge et il faudra de nouveau implémenter toute cette partie si l'on passe du reverse proxy de Symfony2 à Varnish par exemple.</p>

<blockquote>
  <p>There are only two hard things in Computer Science: cache invalidation and naming things.<br />
  -- Phil Karlton</p>
</blockquote>

<p><strong>Deuxièment</strong> la gestion d'une purge coté applicatif peut très vite être douloureuse et engendrer de nombreux bugs. Il revient en effet au développeur de penser au cache à chaque fois que la donnée est manipulée et, croyez-moi, il va souvent l'oublier.</p>

<p>De plus l'invalidation est déjà comprise dans la norme HTTP :</p>

<ul>
<li>quand le <code>max-age</code> arrive à 0,</li>
<li>quand <code>expires</code> est antérieur à la date actuelle</li>
<li>ou encore à la mise à jour de la clé de modification.</li>
</ul>

<p>Il faut donc à tout prix éviter de créer son propre mécanisme d'invalidation.</p>

<h2>Règle d'or</h2>

<p>Cette méthodologie vous permettra de poser les bases pour votre cache HTTP mais ne pourra jamais répondre à tous les cas particulier, ni apporter la finesse nécessaire du premier coup.</p>

<p>La règle d'or pour la mise en place d'un cache HTTP est de tester et répéter ce cycle de Mesure - Analyse - Implémentation, jusqu'à obtenir un cache performant et pertinent.</p>

{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/joel.png') }} alt="Avatar Joël" />
{% endblock %}

{% block article_bio %}
<h2>
    <a href="{% block author_url %}http://jolicode.com/equipe/joel-wurtz{% endblock %}">{% block article_author %}Joël Wurtz{% endblock %}</a>
</h2>
<p>
   Expert technique Web au sein de <a href="http://jolicode.com">JoliCode</a>, Joël est un utilisateur de longue date du framework Symfony, qu'il utilise dans son quotidien. Confériencier au PHP Tour 2012 et à
   <a href="http://conference.phpbenelux.eu/2014/sessions/#docker-contain-fast">PHPBenelux 2014</a> sur des sujets permettant d'améliorer l'écosystème des développeurs, il présente un grand intérêt pour l'administration système et les outils destinés
   aux développeurs.
</p>

<p>
   Vous pouvez le retrouver sur son twitter : <a href="https://twitter.com/joelwurtz">@joelwurtz</a>
</p>
{% endblock %}
