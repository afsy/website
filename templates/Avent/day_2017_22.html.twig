{% extends 'Avent/day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 22 - Log me tender" %}

{% block article_content %}

	<h1 id="log-me-tender">Log me tender ♥</h1>

	<h2 id="introduction">Introduction</h2>
	<p>Les logs tout le monde connait, configurés souvent par défaut dans les frameworks récents, ils permettent durant le développement de garder un oeil sur les différents évènements qui se déclenchent au cours de l’exécution de votre appli. Ils peuvent aussi bien faire remonter des erreurs non attrapées que nous informer de la création d’une ressource par exemple.</p>
	<p>Lorsque l’application passe en production, nos très chers logs ne sont plus à notre disposition immédiate. Cela peut avoir quelques effets indésirables comme leur taille non maitrisée ou tout simplement le passage à la trappe d’informations capitales.</p>
	<p>Plusieurs possibilités s’offrent à vous comme par exemple graylog et sentry, deux outils open source (what else ?) dont nous allons parler aujourd’hui.</p>

  <h3 id="sentry">Sentry</h3>
	<p>
      Sentry est un outil de tracking d’erreurs. Il est idéal pour récupérer une belle exception non catchée avec tout un contexte associé.
      Stacktrace, origine de l’appel, fréquence des erreurs, assignations des erreurs à un agent, possibilité de le linker à github ou gitlab pour les issues.
  </p>
  <p>
      A noter que Sentry fournit une offre hébergée chez eux, dont une gratuite, qui peut vous permettre de tester plus rapidement et pourquoi pas l'utiliser en production.
  </p>

	<h3 id="graylog">Graylog</h3>
	<p>
      Graylog est un agrégateur de logs. Plusieurs sources différentes (nginx, apache, redis, syslog, etc) peuvent envoyer leurs logs vers cet outil qui met à disposition un moteur de recherche puissant ainsi que des règles de parsing de logs avancés.
      Il peut ressembler à Sentry sous certains aspects (pourquoi ne pas lui envoyer les exceptions ?) et peut même remplacer Sentry sous une certaine forme mais son rôle reste au final le parsing, monitoring et recherche de logs.
  </p>

	<h2 id="installation-des-outils-de-monitoring">Installation des outils de monitoring</h2>
  <p>
    Les différents services seront lancés via docker afin de vous simplifier l'expérimentation.
  </p>
	<h3 id="demarrage-de-la-stack">Démarrage de la stack</h3>
	<p>Commencez par créer le fichier docker-compose qui va nous permettre de lancer la stack complète :</p>
  
  <pre><code class="language-none">touch docker-compose.yml</code></pre>

  <p>Le contenu de celui-ci doit ressembler à cela.</p>

  <pre><code class="language-yaml"># docker-compose.yml
version: '2'

services:
  redis:
    image: redis

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
      POSTGRES_DBNAME: sentry
      POSTGRES_DBUSER: sentry
      POSTGRES_DBPASS: sentry

  sentry:
    image: sentry
    links:
    - redis
    - postgres
    ports:
    - 9000:9000
    environment:
      SENTRY_SECRET_KEY: '!!!SECRET!!!'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis

  cron:
    image: sentry
    links:
    - redis
    - postgres
    command: "sentry run cron"
    environment:
      SENTRY_SECRET_KEY: '!!!SECRET!!!'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis

  worker:
    image: sentry
    links:
    - redis
    - postgres
    command: "sentry run worker"
    environment:
      SENTRY_SECRET_KEY: '!!!SECRET!!!'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis

  mongo:
    image: mongo:3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.5.2
    environment:
      - http.host=0.0.0.0
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
  
  graylog:
    image: graylog/graylog:2.3.2-1
    environment:
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      # Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_WEB_ENDPOINT_URI=http://127.0.0.1:9001/api
    links:
      - mongo
      - elasticsearch
    ports:
      - 9001:9000
      - 514:514
      - 514:514/udp
      - 12201:12201
      - 12201:12201/udp</code></pre>
	
  <p>Une fois fait, reste à démarrer l'ensemble de nos éléments :</p>

  <pre><code class="language-none">docker-compose up -d</code></pre>

  <p>Si vous souhaitez garder un oeil sur l'avancement :</p>

  <pre><code class="language-none">docker-compose logs -f</code></pre>

	<p>Sentry nécessite une étape supplémentaire avant de pouvoir démarrer :</p>

  <pre><code class="language-none">docker-compose exec sentry sentry upgrade</code></pre>

	<p>Si tout se passe bien, nos serveurs sont disponibles sur <a href="http://localhost:9000">http://localhost:9000</a> pour graylog et <a href="http://localhost:9001">http://localhost:9001</a> pour Sentry.</p>
	<p>Graylog fournit par défaut l’utilisateur admin/admin pour vous connecter. Une fois connecté, il suffit de créer une nouvelle input de type GELF UDP sur le port 12201</p>
	<p>Sentry nécessite la création d’un utilisateur et d’un projet manuellement. Une fois le projet créé, il suffit de se rendre dans la partie "Project Settings" du projet pour récupérer le DSN dans la rubrique "Client Keys"</p>

	<h2 id="installation-de-symfony">Installation de symfony</h2>
	<p>Passons rapidement sur la magnifique version 4 de symfony :) et jetons les bases de notre projet :</p>
  <pre><code class="language-none">composer create-project symfony/skeleton ./</code></pre>
	<p>Pour la gestion des logs, le choix le plus pragmatique reste le projet Monolog. Il gère, bien entendu, les logs à la perfection et a le mérite d’être compatible directement avec les outils qui nous intéressent.</p>
	<p>Bien d’autres sont disponibles sur leur <a href="https://seldaek.github.io/monolog/doc/02-handlers-formatters-processors.html">site officiel</a>.</p>
	<p>Même s’il est compatible avec ces outils, quelques librairies supplémentaires sont nécessaires pour communiquer avec graylog et sentry. Installons les :</p>
  <pre><code class="language-none">composer require symfony/monolog-bundle graylog2/gelf-php sentry/sentry</code></pre>

	<h2 id="configuration-de-monolog">Configuration de Monolog</h2>
	<p>Voyons comment renseigner notre fichier de configuration pour que notre appli puisse communiquer avec l’extérieur</p>
	<p>Nous créons deux channels. Les channels servent à identifier l’origine ou le but d’une famille de log. Cela permet de centraliser par exemple toutes les lignes de log relatives aux commandes de notre application.</p>
  <pre><code class="language-yaml">channels: ["order", "invoice"]</code></pre>

	<p>Nous créons un premier handler de type <code class="language-none">fingers_crossed</code>. Ce type de handler agit comme un buffer de logs. Il les conservera jusqu’au franchissement du seuil définit par <code class="language-none">action_level</code>.</p>
	<p>Nous en profitons également pour exclure les erreurs liées à une page absente qui en soit ne sont pas des erreurs et peuvent polluer votre flux.</p>
	<p>Enfin, nous lui indiquons qu’en cas de déclenchement, les logs doivent être transmis à un autre handler que nous appelons <code class="language-none">grouped_main</code>.</p>
  <pre><code class="language-yaml">handlers:
    main:
        type: fingers_crossed
        action_level: debug
        channels: ["!event"]
        handler: grouped_main
        excluded_404s:
            - ^/</code></pre>

	<p><code class="language-none">grouped_main</code> est de type <code class="language-none">group</code> (#kaptainobvious). Cela signifie tout simplement qu’il transmettra les lignes de logs aux membres de ce groupe.</p>
  <pre><code class="language-yaml">grouped_main:
    type: group
    members: [local_rotated, sentry, graylog]</code></pre>

	<p>
      Le handler sentry filtre au niveau <code class="language-none">error</code> afin d’évacuer les niveaux inférieurs qui n’ont pas vocation à être monitorés de près dans cet outil.
      Vous pouvez référencer ici le DSN de votre projet sentry configuré plus haut.
  </p>
  <pre><code class="language-yaml">sentry:
    level: error
    type: raven
    dsn: "%sentry.dsn%"</code></pre>

	<p>Le handler graylog ne filtre lui que sur le niveau <code class="language-none">info</code>. Nous pourrons ainsi suivre un plus grand nombre d’informations que sur Sentry.</p>
  <pre><code class="language-yaml">graylog:
    level: info
    type: gelf
    publisher:
        hostname: 127.0.0.1
        port: 12201</code></pre>

	<p>Ci-dessous, le fichier complet :</p>
  <pre><code class="language-yaml"># config/packages/dev/monolog.yal
monolog:
    channels: ["order", "invoice"]
    handlers:
        main:
            type: fingers_crossed
            action_level: debug
            channels: ["!event"]
            handler: grouped_main
            excluded_404s:
                - ^/

        grouped_main:
            type: group
            members: [local_rotated, sentry, graylog]

        local_rotated:
            level: debug
            type: stream
            path: "%kernel.logs_dir%/%kernel.environment%.log"

        sentry:
            level: error
            type: raven
            dsn: "%sentry.dsn%"

        graylog:
            level: info
            type: gelf
            publisher:
                hostname: 127.0.0.1
                port: 12201

        console:
            type:   console
            process_psr_3_messages: false
            channels: ["!event", "!doctrine", "!console"]</code></pre>

  <h3 id="lancement-de-notre-appli">Lancement de notre appli</h3>
  <pre><code class="language-none">./bin/console server:run</code></pre>
  <p>
    Une fois l'appli lancée, pointez votre navigateur sur <a href="http://localhost:8000">http://localhost:8000</a>. Vous devriez être accueilli par une page 404. Afin de tester, plusieurs possibilités s'offrent à vous :
  <p>

  <p>
    <b>Log classique</b> : votre application utilise déjà le logger ? Vous devriez voir vos lignes arriver dans graylog. Si ces logs sont d'un niveau supérieur ou égal à error, ils seront également envoyés sur Sentry.
  <p>

  <p>
    <b>Lancement d'une exception</b> : Editez un controller et lancez une exception. Celle-ci sera transmise à Sentry ainsi que le contexte qu'elle transporte (stacktrace, referrer etc...)
  <p>

  <h2 id="conclusion">Conclusion</h2>

  <p>
    Comme nous l'avons vu, quelques lignes de configuration suffisent à avoir un suivi des logs solides pour un début en production.
    Avec ces outils, Sentry vous tiendra au courant de toutes erreur non catchée tandis que Graylog vous permettra de garder un oeil sur le comportement global de votre application.
  <p>

	<h2 id="bonnes-pratiques">Bonnes pratiques</h2>

	<h3 id="maitriser-la-taille-des-logs-sur-fichiers">Maitriser la taille des logs sur fichiers</h3>
	<p>Plutôt que le classique stream, préférer le type rotating_file. Il se chargera tout seul de la rotation des fichiers de log et vous évitera des mauvaises surprises liées à l’oubli de la configuration de logrotate (qui reste le plus efficace dans ce domaine)</p>
  <pre><code class="language-yaml">local_rotated:
    type: rotating_file
    max_files: 15
    path: "%kernel.logs_dir%/%kernel.environment%.log"
    level: debug</code></pre>

	<h3 id="ajouter-du-contexte">Ajouter du contexte</h3>
	<p>Prenons la ligne de log suivante</p>
  <pre><code class="language-php">$this->logger->info(sprintf("L'utilisateur N°%d vient de créer la commande N°%d",
  $user->getId(),
  $order->getId()
));

# [2017-12-16 15:04:21] L'utilisateur N°123 vient de créer la commande N°456</code></pre>

	<p>Extraire l’information n’est pas particulièrement aisée et non structurée :|</p>
	<p>Dans des cas comme celui-là, Monolog permet le passage de context relatif à la ligne de log créée. Ce contexte a le mérite de structurer le message en identifiant de manière précise le nom d’une information par exemple.</p>
  <pre><code class="language-php">$this->logger->info('user_command_created', [
  'user_id'  => $user->getId(),
  'order_id' => $order->getId()
]);</code></pre>

	<p>Monolog le propagera également lors de la transmission à Sentry et à Graylog. Il sera par exemple possible par le suite de faire une recherche précise sur le user_id ou sur toute autre information envoyés.</p>

	<h3 id="attention-a-la-quantite-de-logs-produite">Attention à la quantité de logs produite</h3>
	<p>Suivant la quantité d’information loggées et le nombre de requêtes par seconde traitées, la gestion des logs peut rapidement se compliquer. Saturation de votre espace disque serveur, temps de réponse à rallonge de votre outil de monitoring…</p>
	<p>Pour palier à cela, l’introduction d’une queue de traitement pour vos logs peut vous aider à absorber des charges anormales auxquelles vous pourriez être confrontés.</p>
{% endblock %}

{% block article_avatar %}
  <img src="{{ asset('bundles/afsyfront/images/avent/2017/22/matthieu-cramet.png') }}" alt="Matthieu Cramet" />
{% endblock %}

{% block article_bio %}
  <h2>
      {% block article_author %}Matthieu Cramet{% endblock %}
    </a>
  </h2>
  <p>Matthieu est développeur chez <a href="https://www.biig.fr/">BiiG</a>.</p>
{% endblock %}
